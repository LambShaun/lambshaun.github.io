{"config":{"lang":["zh","en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u4f60\u597d","text":"<p>\u8fd9\u91cc\u662f\u9648\u5cf0\u4e2a\u4eba\u7f51\u7ad9 https://lambshaun.github.io/</p> <ul> <li>\u901a\u8fc7\u4e3b\u9898\u548c\u76ee\u5f55\u6d4f\u89c8\u6587\u7ae0\u3002<ul> <li>\u7535\u8111\u7aef\uff1a\u5728\u4e0a\u65b9\u6807\u7b7e\u680f\u9009\u62e9\u4e3b\u9898\uff0c\u5728\u5de6\u4fa7\u76ee\u5f55\u9009\u62e9\u6587\u7ae0\u3002</li> <li>\u79fb\u52a8\u7aef\uff1a\u70b9\u51fb\u5de6\u4e0a\u89d2\u56fe\u6807\u9009\u62e9\u4e3b\u9898\u548c\u6587\u7ae0\u3002</li> </ul> </li> <li>\u641c\u7d22\u5173\u952e\u8bcd\u67e5\u627e\u6587\u7ae0</li> </ul>"},{"location":"BLOG/","title":"\u535a\u5ba2","text":"<p>\u70b9\u51fb\u5de6\u4fa7\u76ee\u5f55\u6253\u5f00\u6587\u7ae0</p>"},{"location":"DEV/","title":"\u5f00\u53d1","text":"<p>\u70b9\u51fb\u5de6\u4fa7\u76ee\u5f55\u6253\u5f00\u6587\u7ae0</p>"},{"location":"DEV/ESP32AccessKeyBoardDesign/","title":"\u57fa\u4e8eESP32\u7684\u65e0\u969c\u788d\u5916\u8bbe\u7684\u7814\u5236","text":"<p>\u91c7\u7528ESP32S3N16R8\u82af\u7247</p>"},{"location":"DEV/ESP32AccessKeyBoardDesign/#_1","title":"\u4e3b\u8981\u529f\u80fd\u5b9e\u73b0","text":"<ul> <li> <p>\u901a\u8fc7USB HID\u534f\u8bae\u5b9e\u73b0\u952e\u76d8</p> </li> <li> <p>\u901a\u8fc7\u6447\u6746\u6a21\u5757\u6a21\u62df\u6309\u952eWASD\uff0c\u6309\u4e0b\u5219\u4e3a\u7a7a\u683c</p> </li> <li> <p>\u901a\u8fc7LED\u663e\u793a\u5f53\u524d\u914d\u7f6e\u6a21\u5f0f</p> </li> <li> <p>\u5171\u6709\u4e5d\u4e2a\u81ea\u5b9a\u4e49\u6309\u952e\uff08\u53ef\u4ee5\u4efb\u610f\u914d\u7f6e\u6309\u952e\uff09</p> </li> <li> <p>\u4e94\u79cd\u81ea\u5b9a\u4e49\u6a21\u5f0f\uff08\u914d\u7f6e\u4e4b\u95f4\u4e92\u4e0d\u5e72\u6270\uff09</p> </li> </ul>"},{"location":"DEV/Programming/C/review/","title":"C\u8bed\u8a00\u590d\u4e60\u7b14\u8bb0","text":""},{"location":"DEV/Programming/C/review/#1","title":"1.\u7eea\u8bba","text":""},{"location":"DEV/Programming/C/review/#hello-world","title":"Hello World\uff01","text":"<pre><code>#include &lt;stdio.h&gt;\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n</code></pre>"},{"location":"DEV/Programming/C/review/#_1","title":"\u9884\u5904\u7406","text":"<p>\u5904\u7406\u6307\u4ee4\u4ee5<code>#</code>\u5f00\u5934\uff0c\u901a\u5e38\u51fa\u73b0\u5728\u6e90\u4ee3\u7801\u7684\u6700\u524d\u9762\u3002\u9884\u5904\u7406\u5668\u5728\u7f16\u8bd1\u4e4b\u524d\u5904\u7406\u8fd9\u4e9b\u6307\u4ee4\u3002</p> <p>\u7f16\u8bd1\u5668\u5c06.h\u548c.c\u6587\u4ef6\uff0c\u901a\u8fc7\u9884\u5904\u7406\u751f\u6210\u4e00\u4e2a.i\u6587\u4ef6\uff0c\u901a\u8fc7\u7f16\u8bd1\u540e\u751f\u6210\u4e00\u4e2a.s(\u6c47\u7f16\u4ee3\u7801)\u6587\u4ef6\uff0c\u6700\u540e\u901a\u8fc7\u6c47\u7f16\u5668\u751f\u6210\u4e00\u4e2a.o\u6587\u4ef6\u3002</p> <p>## include</p> <p><code>#include</code>\u6307\u4ee4\u7528\u4e8e\u5305\u542b\u5934\u6587\u4ef6\u3002\u5934\u6587\u4ef6\u901a\u5e38\u5305\u542b\u51fd\u6570\u58f0\u660e\u3001\u5b8f\u5b9a\u4e49\u548c\u5176\u4ed6\u5fc5\u8981\u7684\u4ee3\u7801\u3002</p> <p>\u628a\u5934\u6587\u4ef6\u4e2d\u7684\u6587\u4ef6\u5185\u5bb9\u590d\u5236\u5230\u6307\u4ee4\u6240\u5728\u7684\u4f4d\u7f6e\u3002</p>"},{"location":"DEV/Programming/C/review/#define","title":"define","text":"<p><code>#define</code>\u6307\u4ee4\u7528\u4e8e\u5b9a\u4e49\u5b8f\u3002\u5b8f\u662f\u4e00\u79cd\u6587\u672c\u66ff\u6362\u673a\u5236\uff0c\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u5b8f\u540d\u6765\u4ee3\u66ff\u5b8f\u7684\u503c\u3002  \u9884\u5904\u7406\u5668\u4f1a\u5c06\u6240\u6709\u7684\u5b8f\u540d\u66ff\u6362\u4e3a\u5b8f\u7684\u503c\u3002    <pre><code>#define N 5  // \u5b9a\u4e49\u5b8fN\u4e3a5\n\n#define Foo(x) (1+(x) * (x))  // \u5e26\u53c2\u6570\u7684\u5b8f\uff08\u5b8f\u51fd\u6570\uff09\uff08\u6587\u672c\u66ff\u6362\uff1a\u7528\u201c\u5b9e\u53c2\u201d\u66ff\u6362\u201c\u5f62\u53c2\u201d\uff09\n</code></pre> \u600e\u4e48\u7528\u5b8f\u51fd\u6570\uff1f</p> <ul> <li> <p>a. \u5de6\u62ec\u53f7\u8981\u7d27\u8ddf\u7740\u5b8f\u51fd\u6570\u540d\u5b57</p> </li> <li> <p>b.\"\u53c2\u6570\"\u8981\u52a0\u62ec\u53f7</p> </li> <li> <p>c.\u6574\u4e2a\u8868\u8fbe\u5f0f\u4e5f\u8981\u52a0\u62ec\u53f7</p> </li> </ul> <p>\u4e3a\u4ec0\u4e48\u8981\u7528\u5b8f\u51fd\u6570\uff1f</p> <ul> <li> <p>a.\u907f\u514d\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\uff1a\u7b80\u77ed\u9891\u7e41\u8c03\u7528\u3002</p> </li> <li> <p>b.\u63d0\u4f9b\u4e86\u4e00\u5b9a\u7684\u201c\u5b8f\u7f16\u7a0b\u201d</p> </li> </ul>"},{"location":"DEV/Programming/C/review/#_2","title":"\u53d8\u91cf","text":"<p>\u53d8\u91cf\u8981\u7ed1\u5b9a\u4e00\u4e2a\u503c</p>"},{"location":"DEV/Programming/C/review/#_3","title":"\u4e09\u8981\u7d20\uff1a","text":"<ul> <li> <p>\u53d8\u91cf\u540d\uff1a\u5f15\u7528\u7ed1\u5b9a\u7684\u503c</p> </li> <li> <p>\u7c7b\u578b\uff1a</p> <ul> <li> <p>1.\u9650\u5b9a\u4e86\u503c\u5f97\u8303\u56f4\uff1a\u7f16\u7801 \u5185\u5b58\u5927\u5c0f</p> </li> <li> <p>2.\u9650\u5b9a\u4e86\u503c\u7684\u64cd\u4f5c\uff1a\u8bed\u4e49</p> </li> </ul> </li> <li> <p>\u503c</p> </li> </ul>"},{"location":"DEV/Programming/C/review/#_4","title":"\u6807\u8bc6\u7b26","text":"<p>\u6807\u8bc6\u7b26\u662f\u53d8\u91cf\u3001\u51fd\u6570\u3001\u7c7b\u578b\u7b49\u7684\u540d\u79f0\u3002\u6807\u8bc6\u7b26\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\u3002</p> <ul> <li> <p>1.\u5b57\u6bcd\uff1a\u533a\u5206\u5927\u5c0f\u5199</p> </li> <li> <p>2.\u6570\u5b57\uff1a0-9</p> </li> <li> <p>3.\u4e0b\u5212\u7ebf\uff1a_</p> </li> <li> <p>4.\u957f\u5ea6\uff1a\u4e0d\u8d85\u8fc731\u4e2a\u5b57\u7b26</p> </li> <li> <p>5.\u4e0d\u80fd\u662f\u5173\u952e\u5b57</p> </li> </ul>"},{"location":"DEV/Programming/C/review/#_5","title":"\u5173\u952e\u5b57","text":"<p>\u5173\u952e\u5b57\u662fC\u8bed\u8a00\u4e2d\u9884\u5b9a\u4e49\u7684\u4fdd\u7559\u5b57\uff0c\u4e0d\u80fd\u7528\u4f5c\u6807\u8bc6\u7b26\u3002C\u8bed\u8a00\u7684\u5173\u952e\u5b57\u5305\u62ec\uff1a   <pre><code>auto        break       case        char\n\nconst       continue    default     do\n\ndouble      else        enum        extern\n\nfloat       for         goto        if\n\nint         long        register    return\n\nshort       signed      sizeof      static\n\nstruct      switch      typedef     union\n\nunsigned    void        volatile    while\n</code></pre></p>"},{"location":"DEV/Programming/C/review/#printf","title":"printf \u51fd\u6570","text":"<ul> <li>\u7531\u6765   <pre><code>printf = print + format(\u683c\u5f0f\u5316)\n</code></pre></li> <li>\u4f5c\u7528</li> </ul> <p>\u6253\u5370\u683c\u5f0f\u4e32\u4e2d\u7684\u5185\u5bb9\uff0c\u5e76\u7528\u540e\u9762\u8868\u8fbe\u5f0f\u7684\u503c\u66ff\u6362\u683c\u5f0f\u4e32\u4e2d\u7684\u8f6c\u6362\u8bf4\u660e\u3002</p>"},{"location":"DEV/Programming/C/review/#_6","title":"\u683c\u5f0f\u4e32","text":""},{"location":"DEV/Programming/C/review/#_7","title":"\u666e\u901a\u5b57\u7b26\uff1a\u539f\u6837\u8f93\u51fa","text":""},{"location":"DEV/Programming/C/review/#_8","title":"\u8f6c\u6362\u8bf4\u660e\uff1a\u5360\u4f4d\u7b26","text":""},{"location":"DEV/Programming/C/review/#_9","title":"\u8f6c\u6362\u8bf4\u660e\u7684\u683c\u5f0f","text":"<pre><code> `%m.pX`   `X`:\u7c7b\u578b\u5982\u4f55\u8f6c\u6362\u7b26\u6570\u636e\n\n `%-m.pX`   `m`:\u6700\u5c0f\u5b57\u6bb5\u8f6c\u6362\u5bbd\u5ea6\n\n  `-`\u53f7\u7684\u610f\u4e49\uff1a\u5de6\u5bf9\u9f50\u3002\u5728\u53f3\u8fb9\u6dfb\u52a0\u7a7a\u683c\u3002\n\n  `f` `.float`\n\n  `d` `.decimal`\n\n  `X`:\u7c7b\u578b\u5982\u4f55\u8f6c\u6362\u7b26\u7684\u6570\u636e\n\n  `m`:\u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6 `%+d`\n\n  `P`:\u7cbe\u5ea6\n\n  `%d`:\u6700\u5c11\u663e\u793a\u6570\u5b57\u4e2a\u6570\u3002\u4e0d\u591f\u524d\u9762\u663e\u793a0\u3002\n\n  `%f`:\u663e\u793a\u5c0f\u6570\u7684\u4f4d\u6570\n</code></pre>"},{"location":"DEV/Programming/C/review/#_10","title":"\u8f6c\u6362\u8bf4\u660e","text":"<pre><code>\u7c7b\u578b\u8f6c\u6362:`X`\n\n`-m.p`:\u63a7\u5236\u8f93\u51fa\u683c\u5f0f\n</code></pre>"},{"location":"DEV/Programming/C/review/#scanf","title":"scanf \u51fd\u6570","text":"<pre><code>scanf = scan + format\n\n        \u626b\u63cf\n</code></pre>"},{"location":"DEV/Programming/C/review/#_11","title":"\u539f\u7406\uff1a","text":"<p>\u4ece\u5de6\u5230\u53f3\uff0c\u4f9d\u6b21\u5339\u914d\u683c\u5f0f\u4e32\u4e2d\u7684\u6bcf\u4e00\u9879</p> <p>\u5982\u679c\u6709\u4e00\u9879\u5339\u914d\u4e0d\u6210\u529f,<code>scanf</code>\u4f1a\u7acb\u5373\u8fd4\u56de\u3002</p> <p>\u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u7684\u662f\u5339\u914d\u6210\u529f\u7684\uff0c\u8f6c\u6362\u8bf4\u660e\u7684\u4e2a\u6570\u3002</p> <p><code>%d</code>\u5ffd\u7565\u524d\u7f6e\u7a7a\u767d\u7684\u5b57\u7b26</p> <pre><code>\u7a7a\u683c\uff0c  tab,   /n,  /v\n</code></pre>"},{"location":"DEV/Programming/C/review/#_12","title":"\u683c\u5f0f\u4e32","text":"<p>\u666e\u901a\u5b57\u7b26:\u7cbe\u786e\u5339\u914d</p> <p>\u7a7a\u767d\u5b57\u7b26:\u7a7a\u683c  \\n  \\v \u5339\u914d\u4efb\u610f\u4e2a\u7a7a\u767d\u5b57\u7b26</p> <p>\u8f6c\u6362\u8bf4\u660e</p>"},{"location":"DEV/Programming/C/review/#_13","title":"\u6574\u6570\u7684\u7f16\u7801","text":"<ul> <li> <p>\u65e0\u7b26\u53f7\u6574\u6570\uff1a\u4e8c\u8fdb\u5236\u7f16\u7801</p> </li> <li> <p>\u6709\u7b26\u53f7\u6574\u6570\uff1a\u8865\u7801</p> </li> </ul>"},{"location":"DEV/Programming/C/review/#_14","title":"\u6d6e\u70b9\u6570","text":"<p>\u7f16\u7801\uff1aIEEE754</p> <p>\u6d6e\u70b9\u6570\u662f\u4e0d\u7cbe\u786e\u7684</p>"},{"location":"DEV/Programming/C/review/#_15","title":"\u5b57\u7b26\u7684\u7f16\u7801","text":"<p>ASCII\uff081\u5b57\u8282\uff0c\u4f4e7\u4f4d\uff0c128\u4e2a\uff09</p> <p></p> <p><code>Dec</code>:\u5341\u8fdb\u5236</p> <p><code>Hx</code>\uff1a\u5341\u516d\u8fdb\u5236</p> <p><code>Oct</code>\uff1a\u516b\u8fdb\u5236</p> <pre><code>0-31 \u548c 127 \u4e3a\u63a7\u5236\u5b57\u7b26\n\nnull space  0  A  a   \u9700\u8981\u8bb0\u5fc6 \n</code></pre>"},{"location":"DEV/Programming/C/review/#_16","title":"\u7c7b\u578b","text":"<ul> <li> <p>\u9650\u5b9a\u503c\u7684\u53d6\u503c</p> <ul> <li> <p>\u7f16\u7801\uff08ASCII\uff09</p> </li> <li> <p>\u5185\u5b58\u5927\u5c0f\uff081\u5b57\u8282\uff09</p> </li> </ul> </li> <li> <p>\u9650\u5b9a\u503c\u80fd\u8fdb\u884c\u7684\u64cd\u4f5c</p> </li> </ul>"},{"location":"DEV/Programming/C/review/#_17","title":"\u4e00\u3001\u8868\u793a\u503c","text":"<p><code>'a'</code> <code>'A'</code></p>"},{"location":"DEV/Programming/C/review/#_18","title":"\u8f6c\u4e49\u5e8f\u5217\uff1a","text":""},{"location":"DEV/Programming/C/review/#1_1","title":"1.\u5b57\u7b26\u8f6c\u4e49\u5e8f\u5217","text":""},{"location":"DEV/Programming/C/review/#2","title":"2.\u6570\u5b57\u8f6c\u4e49\u5e8f\u5217","text":"<p>\u516b\u8fdb\u5236\uff08\u6700\u591a3\u4e2a\uff09<code>\\</code></p> <p>\u5341\u516d\u8fdb\u5236        <code>\\xABC</code></p> <p><pre><code>#include &lt;stdio.h&gt;\n\nint main(void){\n    printf(\"%c\\n\",'A');\n    printf(\"%c\\n\",'\\101');\n    printf(\"%c\\n\",'\\x41');\n    return 0;\n}\n</code></pre> </p>"},{"location":"DEV/Programming/C/review/#_19","title":"\u4e8c\u3001\u652f\u6301\u54ea\u4e9b\u64cd\u4f5c","text":""},{"location":"DEV/Programming/C/review/#cchar","title":"C\u8bed\u8a00\u5c06<code>char</code>\u5f53\u4f5c\u4e00\u4e2a\u5b57\u8282\u7684\u6574\u6570\u5904\u7406","text":""},{"location":"DEV/Programming/C/review/#ctypeh","title":"<code>&lt;ctype.h&gt;</code>\u6709\u4e00\u4e9b\u5b57\u7b26\u5206\u7c7b\u51fd\u6570\uff1a\u6269\u5c55\u4e86\u5b57\u7b26\u7c7b\u578b\u652f\u6301\u7684\u64cd\u4f5c","text":""},{"location":"DEV/Programming/C/review/#c-referencecomc","title":"C reference.com\u53ef\u4ee5\u67e5\u770bC\u6807\u51c6","text":""},{"location":"DEV/Programming/C/review/#_20","title":"\u4e09\u3001\u8bfb/\u5199\uff08\u548c\u7528\u6237\u4ea4\u4e92\uff09","text":"<ul> <li> <p><code>printf + % c</code></p> </li> <li> <p><code>scanf + % c</code> <code>\u5339\u914d\u4e00\u4e2a\u5b57\u7b26\uff0c\u4e0d\u4f1a\u5ffd\u7565\u7a7a\u767d\u5b57\u7b26</code></p> </li> </ul>"},{"location":"DEV/Programming/C/review/#putcharc","title":"putchar(C);","text":""},{"location":"DEV/Programming/C/review/#c-getchar","title":"c= getchar ();","text":""},{"location":"DEV/Programming/C/review/#_21","title":"\u56fa\u5b9a\u642d\u914d","text":"<pre><code>while (getchar()!='\\n');  //\u8df3\u8fc7\u8fd9\u4e00\u884c\u7684\u5269\u4f59\u5b57\u7b26\n</code></pre>"},{"location":"DEV/Programming/C/review/#_22","title":"\u7c7b\u578b\u8f6c\u6362","text":""},{"location":"DEV/Programming/C/review/#ide","title":"\u9690\u5f0f\u8f6c\u6362 \uff1aIDE\u81ea\u52a8","text":""},{"location":"DEV/Programming/C/review/#_23","title":"\u6574\u6570\u63d0\u5347","text":"<p>\u6bd4<code>int</code>\u5c0f\u7684\u4f1a\u90fd\u4f1a\u88ab\u63d0\u5347\u6210<code>int</code>\u7c7b\u578b</p> <ul> <li>C\u8bed\u8a00\u5904\u7406<code>int</code>\u7c7b\u578b\u6700\u5feb\uff0c\u5904\u7406<code>int</code>\u6700\u81ea\u7136</li> </ul>"},{"location":"DEV/Programming/C/review/#_24","title":"\u503c\u7684\u8868\u793a\u8303\u56f4","text":"<p>\u5c0f\u2192\u5927</p> <p><code>char</code>  \u2192 <code>int</code> \u2192  <code>long long</code> \u2192  <code>float</code> \u2192  <code>double</code></p>"},{"location":"DEV/Programming/C/review/#_25","title":"\u540c\u4e00\u6574\u6570\u8f6c\u6362\u7b49\u7ea7","text":"<p>\u6709\u7b26\u53f7\u2192\u65e0\u7b26\u53f7</p> <p><pre><code>#include &lt;stdio.h&gt;\nint main(void){\n  int i = -1;\n  unsigned int u = 100;\n  if (u &gt;i){\n    printf(\"Greater\\n\");\n  }else{\n    printf(\"Less!\\n\");\n  }\n}\n</code></pre> </p>"},{"location":"DEV/Programming/Cpp/01cppbasics/","title":"CPP Basics-1","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#1","title":"1.\u53d8\u91cf","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#11","title":"1.1\u53d8\u91cf\u5b9a\u4e49","text":"<ul> <li>\u540d\u79f0(\u6216\u8005\u6807\u8bc6\u7b26)</li> <li>\u7c7b\u578b</li> <li>\u503c</li> </ul>"},{"location":"DEV/Programming/Cpp/01cppbasics/#12","title":"1.2\u53d8\u91cf\u547d\u540d\u7684\u7ea6\u5b9a","text":"<ul> <li> <p>\u53d8\u91cf\u540d\u662f\u4e00\u4e2a\u540d\u8bcd\uff0c\u6216\u8005\u7531\u51e0\u4e2a\u8bcd\u7ec4\u6210\u7684\u540d\u8bcd\u77ed\u8bed\u3002\u7b2c\u4e00\u4e2a\u8bcd\u5c0f\u5199\uff0c\u5176\u4f59\u8bcd\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u8bcd\u4e0e\u8bcd\u4e4b\u95f4\u6ca1\u6709\u7a7a\u683c\u3002\uff08\u5982thefontSize ,roomNumber\u3002\uff09</p> </li> <li> <p>\u9009\u62e9\u4e00\u4e2a\u6709\u81ea\u63cf\u8ff0\u6027\u7684\u8bcd\u8bed\u3002</p> </li> <li>\u8c28\u614e\u4f7f\u7528\u5355\u6570\u548c\u590d\u6570\u540d\u8bcd\u6765\u533a\u5206\u5355\u6570\u548c\u590d\u6570\u53d8\u91cf\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/01cppbasics/#13","title":"1.3\u53d8\u91cf\u58f0\u660e","text":"<p>\u8981\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u53d8\u91cf\uff0c\u9700\u8981\u5148\u901a\u8fc7\u58f0\u660e\u6765\u201c\u5f15\u5165\"\u5b83\u3002</p> <ul> <li>\u5728cpp\u4e2d\uff0c\u9700\u8981\u5728\u4f7f\u7528\u53d8\u91cf\u524d\u58f0\u660e\u53d8\u91cf\u7684\u540d\u79f0\u3002</li> <li>cpp\u662f\u4e00\u79cd\u201c\u5f3a\u7c7b\u578b\u201d\u7684\u8bed\u8a00\u3002\u53d8\u91cf\u6709\u7c7b\u578b\u3002\u4e00\u65e6\u53d8\u91cf\u7684\u7c7b\u578b\u88ab\u58f0\u660e\u3002\u5c31\u53ea\u80fd\u5b58\u50a8\u5c5e\u4e8e\u7279\u5b9a\u7c7b\u884c\u7684\u503c\u3002</li> <li>\u6bcf\u4e2a\u53d8\u91cf\u53ea\u80fd\u58f0\u660e\u4e00\u6b21\u3002</li> <li>\u53ef\u4ee5\u5728\u7a0b\u5e8f\u7684\u4efb\u610f\u4f4d\u7f6e\u58f0\u660e\u53d8\u91cf\u3002\u4ec5\u4ec5\u9700\u8981\u5728\u4f7f\u7528\u524d\u58f0\u660e\u5373\u53ef\u3002</li> <li>\u53d8\u91cf\u7684\u7c7b\u578b\u5728\u7a0b\u5e8f\u4e2d\u4e0d\u80fd\u66f4\u6539\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/01cppbasics/#_1","title":"\u6ce8\u610f","text":"<p>\u5f53\u4e00\u4e2a\u53d8\u91cf\u88ab\u58f0\u660e\u65f6\uff0c\u5728\u4f60\u8d4b\u4e88\u5176\u503c\u4e4b\u524d\uff0c\u5b83\u6240\u5305\u542b\u7684\u90fd\u662f\u5783\u573e\u503c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cc/c++\u4e0d\u4f1a\u5728\u4f7f\u7528\u53d8\u91cf\u4e4b\u524d\u521d\u59cb\u5316\u5b83\u53d1\u51fa\u8b66\u544a\u548c\u9519\u8bef\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#2","title":"2.\u6807\u8bc6\u7b26","text":"<p>\u6807\u8bc6\u7b26\u6765\u547d\u540d\u53d8\u91cf\uff08\u6216\u8005\u5176\u4ed6\u5b9e\u4f53\uff0c\u5982\u51fd\u6570\u6216\u8005\u7c7b\uff09</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#21","title":"2.1\u89c4\u5219","text":"<ul> <li>\u6807\u8bc6\u7b26\u5fc5\u987b\u4ee5\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u5f00\u5934\u3002\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934 \u3002\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u6807\u8bc6\u7b26\u901a\u5e38\u4fdd\u7559\u7ed9\u7cfb\u7edf\u4f7f\u7528\u3002</li> <li>\u6807\u8bc6\u7b26\u4e0d\u80fd\u4e3a\u5173\u952e\u5b57\u6216\u8005\u4fdd\u7559\u5b57\u9762\u91cf\uff08\u5982\uff1aint ,double, if ,else ,for)</li> <li>\u6807\u8bc6\u7b26\u533a\u5206\u5927\u5c0f\u5199</li> </ul>"},{"location":"DEV/Programming/Cpp/01cppbasics/#_2","title":"\u6ce8\u610f","text":"<p>\u4e0d\u8981\u4f7f\u7528\u7a7a\u767d\u5b57\u7b26\u4f5c\u4e3a\u540d\u79f0\uff08\u6807\u8bc6\u7b26\uff09</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#3-const","title":"3.\u5e38\u91cf (const)","text":"<p>\u5e38\u91cf\u662f\u4e0d\u53ef\u6539\u53d8\u7684\u503c\uff0c\u4f7f\u7528\u5173\u952e\u5b57const\u58f0\u660e\u3002</p> <p>\u503c\u5728\u6267\u884c\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u65e0\u6cd5\u66f4\u6539\u3002\u9700\u8981\u5728\u58f0\u660e\u65f6\u5c31\u521d\u59cb\u5316\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#31","title":"3.1\u5e38\u91cf\u547d\u540d\u7ea6\u5b9a","text":"<p>\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\uff0c\u7528\u4e0b\u5212\u7ebf\u8fde\u63a5\u3002\u5982MIIN_VALUE, MAX_SIZE</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#4","title":"4.\u8868\u8fbe\u5f0f","text":"<p>\u8868\u8fbe\u5f0f\u662f\u7531\u8fd0\u7b97\u7b26\uff08\u5982\uff1a' + ', ' - ', ' * ', ' / ')\u548c\u64cd\u4f5c\u6570\uff08\u53d8\u91cf\u503c\u6216\u5b57\u9762\u503c\uff09\u7ec4\u5408\u800c\u6210\u3002\u53ef\u4ee5\u8ba1\u7b97\u7279\u5b9a\u7c7b\u578b\u7684\u503c\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#5","title":"5.\u8d4b\u503c \uff08=\uff09","text":"<ul> <li>\u5199\u6cd5</li> </ul> <p>variable = literal - value;</p> <p>variable = expression;</p> <p>\u5982 number = 88;</p> <p>sum = sum + number ;</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#51","title":"5.1\u8d4b\u503c\u8bed\u53e5\u89e3\u91ca\uff1a","text":"<p>\u8d4b\u503c\u8bed\u53e5\u89e3\u91ca\uff1a\u9996\u5148\u8ba1\u7b97\u53f3\u4fa7\u8868\u8fbe\u5f0f\u7684\u503c\uff08RHS\uff09\u4ee5\u4ea7\u751f\u4e00\u4e2a\u7ed3\u679c\u503c\uff08rvalue\u6216\u53f3\u503c\uff09\u3002\u7136\u540e\u5c06rvalue\u503c\u8d4b\u7ed9\u5de6\u4fa7\u7684\u53d8\u91cf\uff08LHS\uff09\u6216lvalue\u3002\u5148\u8ba1\u7b97\u53f3\u4fa7,\u5728\u5c06\u7ed3\u679c\u8d4b\u7ed9\u5de6\u4fa7\u3002</p> <p>\u7b26\u53f7' = '\u88ab\u79f0\u4e3a\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u548c\u6570\u5b66\u4e2d\u7684\u542b\u4e49\u4e0d\u540c\uff0c\u662f\u8d4b\u503c\u800c\u4e0d\u662f\u7b49\u4e8e\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#6","title":"6.\u57fa\u672c\u7c7b\u578b","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#61","title":"6.1\u6574\u6570","text":"<p>\u6574\u6570\uff1achar,   short,  int,  long,  long long, \u6309\u5927\u5c0f\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5217\u3002</p> <p>\u9664\u4e86char\u4e4b\u5916\u7684\u6574\u6570\u90fd\u662f\u6709\u7b26\u53f7\u6570\uff08\u53ef\u4ee5\u5b58\u50a8\u96f6\u3001\u6b63\u6570\u548c\u8d1f\u6570\uff09\u3002\u53ef\u4ee5\u4f7f\u7528\u5173\u952e\u5b57 **unsigned ** [char  | short | int | long | long long]\u6765\u58f0\u660e\u65e0\u7b26\u53f7\u6574\u6570\uff08\u53ea\u80fd\u5b58\u50a8\u96f6\u548c\u6b63\u6570\uff09\u3002</p> <p>\u603b\u5171\u6709\u5341\u79cd\u6570\u636e\u7c7b\u578b -signed \u548c unsigned \u4e0e char | short | int | long | long long \u7ec4\u5408\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#62char","title":"6.2\u5b57\u7b26char","text":"<p>\u5b57\u7b26\uff1a\u4f8b\u5982 'a' , 'Z' , '0' , '9'\u3002\u5728ASCII\u4e2d\u88ab\u7f16\u7801\u4e3a\u6574\u6570\uff0c\u5e76\u4ee5 char \u7c7b\u578b\u5b58\u50a8\u3002\u4f8b\u5982: '0'\u662f48\uff08\u5341\u8fdb\u5236\uff09\u6216'30H'(16\u8fdb\u5236)</p> <p>\u7c7b\u578bchar \u53ef\u4ee5\u89e3\u91ca\u4e3aASCII\u4ee3\u7801\u4e2d\u7684\u5b57\u7b26\uff0c\u6216\u4e00\u4e2a8\u4f4d\u6574\u6570\u3002\u4e0e int \u548c long \u4e0d\u540c\u3002\u540e\u8005\u662fsigned \u3002\u800c char \u53ef\u4ee5\u6839\u636e\u6570\u636e\u6765\u5b9e\u73b0\u662fsigned\u6216unsigned\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u7528signed char \u6216 unsigned char\u6765\u660e\u786e\u58f0\u660e\u662f signed \u8fd8\u662f unsigned char\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#63","title":"6.3 \u6d6e\u70b9\u6570","text":"<ul> <li>float : \u5355\u7cbe\u5ea6</li> <li>double : \u53cc\u7cbe\u5ea6</li> <li>long double : \u957f\u53cc\u7cbe\u5ea6</li> </ul>"},{"location":"DEV/Programming/Cpp/01cppbasics/#64-bool","title":"6.4 bool\u7c7b\u578b","text":"<p>\u7279\u6b8a\u7c7b\u578b\u88ab\u79f0\u4e3a bool \uff0c\u503c\u53ef\u4ee5\u4e3a true \u6216 false</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#_3","title":"\u7279\u6b8a","text":"<p>\u6b64\u5916\uff0c\u8bb8\u591aC++\u5e93\u51fd\u6570\u4f7f\u7528\u4e00\u79cdsize_t\u7684\u7c7b\u578b\uff0c\u5b83\u7b49\u540c\u4e8e\uff08typedef) \u4e00\u4e2a unsigned int \uff0c\u7528\u4e8e\u8ba1\u6570 \u3001\u5927\u5c0f\u6216\u957f\u5ea6\uff0c\u5305\u542b0\u548c\u6b63\u6574\u6570\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#7sizeof","title":"7.sizeof \u8fd0\u7b97\u7b26","text":"<p>C/C++\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e00\u5143sizeof \u8fd0\u7b97\u7b26\u6765\u83b7\u53d6\u64cd\u4f5c\u6570\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std ;\n\nint main(){\n    cout &lt;&lt;  \"sizeof(char) is \"&lt;&lt; sizeof(char) &lt;&lt; \" bytes \" &lt;&lt; endl;\n    cout &lt;&lt;  \"sizeof(short) is \"&lt;&lt; sizeof(short) &lt;&lt; \" bytes \" &lt;&lt; endl;\n    cout &lt;&lt;  \"sizeof(int) is \"&lt;&lt; sizeof(int) &lt;&lt; \" bytes \" &lt;&lt; endl;\n    cout &lt;&lt;  \"sizeof(long) is \"&lt;&lt; sizeof(long) &lt;&lt; \" bytes \" &lt;&lt; endl;\n    cout &lt;&lt;  \"sizeof(long long) is \"&lt;&lt; sizeof(long long) &lt;&lt; \" bytes \" &lt;&lt; endl;\n    cout &lt;&lt;  \"sizeof(float) is \"&lt;&lt; sizeof(float) &lt;&lt; \" bytes \" &lt;&lt; endl;\n    cout &lt;&lt;  \"sizeof(double) is \"&lt;&lt; sizeof(double) &lt;&lt; \" bytes \" &lt;&lt; endl;    \n    cout &lt;&lt;  \"sizeof(long double) is \"&lt;&lt; sizeof(long double) &lt;&lt; \" bytes \" &lt;&lt; endl;\n    cout &lt;&lt;  \"sizeof(bool) is \"&lt;&lt; sizeof(bool) &lt;&lt; \" bytes \" &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code>sizeof(char) is 1 bytes\nsizeof(short) is 2 bytes\nsizeof(int) is 4 bytes\nsizeof(long) is 4 bytes\nsizeof(long long) is 8 bytes\nsizeof(float) is 4 bytes\nsizeof(double) is 8 bytes\nsizeof(long double) is 8 bytes\nsizeof(bool) is 1 bytes\n</code></pre> <p>\u8f93\u51fa\u7ed3\u679c\u53d6\u51b3\u4e8e\u7cfb\u7edf\uff1b</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#9header","title":"9.Header <p>climits\u5934\u6587\u4ef6\uff08\u4eceC\u7684 limits.h\u79fb\u690d\u5230C++\uff09\u5305\u542b\u6574\u6570\u7c7b\u578b\u7684\u9650\u5236\u4fe1\u606f\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;climits&gt;\nusing namespace std;\n\nint main(){\ncout&lt;&lt; \"int max = \" &lt;&lt; INT_MAX &lt;&lt; endl;\ncout&lt;&lt; \"int min = \" &lt;&lt; INT_MIN &lt;&lt; endl;\ncout&lt;&lt; \"unsigned int max = \" &lt;&lt; UINT_MAX &lt;&lt; endl;\ncout&lt;&lt; \"long long max = \" &lt;&lt; LLONG_MAX &lt;&lt; endl;\ncout&lt;&lt; \"long long min = \" &lt;&lt; LLONG_MIN &lt;&lt; endl;\ncout&lt;&lt; \"unsigned long long max = \" &lt;&lt; ULLONG_MAX &lt;&lt; endl;\ncout&lt;&lt; \"Bits in char = \" &lt;&lt; CHAR_BIT &lt;&lt; endl;\ncout&lt;&lt; \"char max = \" &lt;&lt; CHAR_MAX &lt;&lt; endl;\ncout&lt;&lt; \"char min = \" &lt;&lt; CHAR_MIN &lt;&lt; endl;\ncout&lt;&lt; \"signed char max = \" &lt;&lt; SCHAR_MAX &lt;&lt; endl;\ncout&lt;&lt; \"signed char min = \" &lt;&lt; SCHAR_MIN &lt;&lt; endl;\ncout&lt;&lt; \"unsigned char max = \" &lt;&lt; UCHAR_MAX &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <pre><code>int max = 2147483647\nint min = -2147483648\nunsigned int max = 4294967295\nlong long max = 9223372036854775807\nlong long min = -9223372036854775808\nunsigned long long max = 18446744073709551615\nBits in char = 8\nchar max = 127\nchar min = -128\nsigned char max = 127\nsigned char min = -128\nunsigned char max = 255\n</code></pre> <p>\u8f93\u51fa\u7ed3\u679c\u53d6\u51b3\u4e8e\u7cfb\u7edf</p> <ul> <li>\u65e0\u7b26\u53f7\u6574\u6570\u7684\u6700\u5c0f\u503c\u59cb\u7ec8\u4e3a 0 \u3002</li> </ul>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#10headr","title":"10.Headr <p>\u540c\u6837\uff0ccfloat \u5934\u6587\u4ef6\u4ece\uff08C\u7684float.h\u79fb\u690d\u800c\u6765\uff09\u5305\u542b\u6709\u5173\u6d6e\u70b9\u6570\u7684\u9650\u5236\u4fe1\u606f\uff0c\u4f8b\u5982\u6709\u6548\u6570\u5b57\u7684\u6700\u5c0f\u4f4d\u6570\uff08FLT_DIG\uff0cDBL_DIG , LDBL_DIG\u5206\u522b\u5bf9\u5e94float,double , \u548clong double\u3002\u5c3e\u6570\u7684\u4f4d\u6570(number of bits for mantissa)\uff08FLT_MANT_DIG , FLT_MANT_DIG, LDBL_MANY_DIG)\uff0c\u6700\u5927\u548c\u6700\u5c0f\u6307\u6570\u6570\u503c\u7b49</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#11_1","title":"11.\u9009\u62e9\u7c7b\u578b <p>\u9700\u8981\u9009\u62e9\u53d8\u91cf\u5e76\u51b3\u5b9a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u53d8\u91cf\u7c7b\u578b\u3002\u4f8b\u5982\uff1a\u4f7f\u7528\u6574\u6570\u7c7b\u578b\u6765\u8ba1\u6570\u548c\u8868\u793a\u6574\u6570\uff1b\u6d6e\u70b9\u6570\u7c7b\u578b\u6765\u8868\u793a\u5e26\u6709\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\uff0cchar \u7528\u4e8e\u5355\u4e2a\u5b57\u7b26\uff0c boolean \u7528\u4e8e\u4e8c\u8fdb\u5236\u7684\u7ed3\u679c</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#111","title":"11.1 \u7ecf\u9a8c\u6cd5\u5219","text":"<ul> <li>\u4f7f\u7528int \u8868\u793a\u6574\u6570\uff0c\u4f7f\u7528 double \u8868\u793a\u6d6e\u70b9\u6570\u3002\u53ea\u6709\u5728\u6709\u5145\u5206\u7406\u7531\u9009\u62e9\u7279\u5b9a\u7cbe\u5ea6\u7684\u65f6\u5019\uff0c\u624d\u4f7f\u7528byte , short , long\u548c float\u3002</li> <li>\u4f7f\u7528int(\u6216unsigned int)\u8fdb\u884c\u8ba1\u6570\u548c\u7d22\u5f15\uff0c\u800c\u4e0d\u662f\u6d6e\u70b9\u7c7b\u578b\u3002\uff08float or double)\u3002\u8fd9\u662f\u56e0\u4e3a\u6574\u6570\u7c7b\u578bint\u5728\u64cd\u4f5c\u4e2d\u66f4\u7cbe\u786e\u4e14\u9ad8\u6548\u3002</li> <li>\u5982\u679c\u53ef\u80fd\uff0c\u4f7f\u7528\u6574\u6570\u7c7b\u578b\u3002\u53ea\u6709\u5f53\u6570\u5b57\u5305\u542b\u5c0f\u6570\u90e8\u5206\u65f6\uff0c\u624d\u4f7f\u7528\u6d6e\u70b9\u7c7b\u578b\u3002</li> </ul> <p>There is a subtle difference between int 0 and double 0.0</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#_4","title":"\u6ce8\u610f","text":"<p>\u5728\u89e3\u91ca\u4e00\u4e2a\u503c\u4e4b\u524d\uff0c\u5fc5\u987b\u8981\u5148\u77e5\u9053\u8be5\u503c\u7684\u7c7b\u578b\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#12typedef","title":"12.typedef\u8bed\u53e5 <p>\u591a\u6b21\u8f93\u5165\" unsigned int \"\u592a\u8fc7\u9ebb\u70e6\u3002typedef\u8bed\u53e5\u53ef\u4ee5\u7528\u6765\u4e3a\u73b0\u6709\u7c7b\u578b\u521b\u5efa\u65b0\u540d\u79f0\uff08\u7c7b\u4f3c#define\uff09\u3002\u4f8b\u5982\uff1a\u53ef\u4ee5\u4e3a\" unsigned int \"\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a \" uint \"\u7684\u7c7b\u578b\u3002</p> <ul> <li>\u5e94\u8be5\u5c06typedef \u7d27\u63a5\u7740\u653e\u5728 #include\u4e4b\u540e\u3002</li> <li>\u8c28\u614e\u4f7f\u7528typedef \u53ef\u80fd\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u96be\u4ee5\u7406\u89e3\u3002</li> </ul>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#121","title":"12.1\u4f7f\u7528\u65b9\u5f0f","text":"<pre><code>typedef unsigned int uint ;\n</code></pre>"},{"location":"DEV/Programming/Cpp/01cppbasics/#122size_t","title":"12.2size_t","text":"<p>\u8bb8\u591aC/C++\u7f16\u8bd1\u5668\u5b9a\u4e49\u4e86\u4e00\u79cd\u540d\u4e3a size_t\u7684\u7c7b\u578b\u3002\u5b83\u662f typedef\u7684unsigned int</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#13_1","title":"13\u57fa\u672c\u7c7b\u578b\u548c\u5b57\u7b26\u4e32\u7684\u5b57\u9762\u91cf <p>\u5b57\u9762\u91cf\u662f\u4e00\u4e2a\u7279\u5b9a\u7684\u5e38\u91cf\u503c\u3002\u4f8b\u5982\uff1a123\u3001-456\u30013.14\u3001'a'\u3001\"Hello\".  \u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u7ed9\u53d8\u91cf\uff1b\u6216\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u7684\u4e00\u90e8\u5206\u4f7f\u7528\u3002\u5b83\u4eec\u88ab\u79f0\u4e3a\u5b57\u9762\u91cf\uff0c\u56e0\u4e3a\u5b83\u4eec\u660e\u786e\u7684\u6807\u6ce8\u4e86\u5b83\u4eec\u7684\u503c\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#131","title":"13.1\u6574\u6570\u5b57\u9762\u91cf","text":"<p>\u4e00\u4e2a\u6574\u6570\uff0c\u4f8b\u5982123\u548c-456.\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u88ab\u89c6\u4e3aint\u3002</p> <pre><code>int number = -123;\nint sum = 4567;\nint bigSum = 8234567890; // ERROR : this value is outside the range of int \n</code></pre> <p>\u4e00\u4e2aint \u5b57\u9762\u91cf\u53ef\u4ee5\u4ee5\u52a0\u53f7 + \u6216 - \u5f00\u5934\uff0c\u540e\u9762\u8ddf\u7740\u6570\u5b57\u3002\u4e0d\u5141\u8bb8\u4f7f\u7528\u9017\u53f7\u6216\u7279\u6b8a\u7b26\u53f7\u3002\uff08\u4f8b\u5982\uff0c$\u6216\u7a7a\u683c\uff09\uff08\u4f8b\u5982\uff1a1,123\u548c$123\u90fd\u662f\u65e0\u6548\u7684\uff09\u3002\u4e5f\u4e0d\u5141\u8bb8\u524d\u9762\u6709 0 \uff08\u4f8b\u5982\uff1a007\u4e5f\u662f\u65e0\u6548\u7684\uff09</p> <p>\u9664\u4e86\u9ed8\u8ba4\u7684\u5341\u8fdb\u5236\u6574\u6570\u5916\uff0c\u53ef\u4ee5\u4f7f\u7528\u524d\u7f00 '0' \u6765\u8868\u793a\u516b\u8fdb\u5236\u503c\uff0c \u524d\u7f00 '0x'\u8868\u793a\u5341\u516d\u8fdb\u5236\uff0c\u4ee5\u53ca\u524d\u7f00'0b'\u8868\u793a\u4e8c\u8fdb\u5236\u7684\u503c\uff08\u5728\u67d0\u4e9b\u7f16\u8bd1\u5668\u91cc),\u4f8b\u5982</p> <pre><code>int number1 = 1234;     //Decimal\nint number2 = 01234;    //octal\nint number3 = 0x1abc;   //hexadecimal\nint number4 = 0b10001001;   //binary (may not in some compilers)\n</code></pre> <p>\u4e00\u4e2a long \u5b57\u9762\u91cf\u901a\u8fc7\u540e\u7f00 'L' \u6216 'l' \u6807\u8bc6\uff08\u907f\u514d\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff0c\u53ef\u80fd\u4f1a\u4e0e\u6570\u5b57 1 \u6df7\u6dc6\uff09\u3002</p> <p>\u4e00\u4e2a long long int \u901a\u8fc7\u540e\u7f00 'LL'\u6807\u8bc6\u3002</p> <p>\u8fd8\u53ef\u4ee5\u4f7f\u7528 'U' \u8868\u793a unsigned int \uff0c'UL' \u8868\u793a unsigned long \uff0c\u4ee5\u53ca 'ULL' \u8868\u793aunsigned long long int.</p> <pre><code>long number = 123456789L;\nlong sum = 123;     //int 123 auto-casts to long 123L\nlong long bigNumber = 98534354353LL;\n</code></pre> <p>short \u5b57\u9762\u91cf\u4e0d\u9700\u8981\u540e\u7f00\u3002\u53ea\u80fd\u4f7f\u7528\u5141\u8bb8\u8303\u56f4\u5185\u7684\u6574\u6570\u503c\u3002</p> <pre><code>short smallNumber = 1234567890;     //ERROR: this value is outside the range of shor\nshort midSizeNumber = -12345;\n</code></pre>"},{"location":"DEV/Programming/Cpp/01cppbasics/#132","title":"13.2\u6d6e\u70b9\u5b57\u9762\u91cf","text":"<p>\u4e00\u4e2a\u5e26\u6709\u5c0f\u6570\u70b9\u7684\u6570\uff0c\u4f8b\u5982\uff1a55.66\uff0c-33.44\uff0c\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u88ab\u662f\u89c6\u4e3adouble\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u6765\u8868\u793a\u5b83\u4eec\u3002\u4f8b\u5982\uff1a<code>1.2e3</code>\uff0c -5.5E-6, \u5176\u4e2de\u6216E\u8868\u793a\u4ee510\u4e3a\u5e95\u7684\u7684\u6307\u6570\u3002\u5206\u6570\u90e8\u5206\u6216\u6307\u6570\u90e8\u5206\u524d\u53ef\u4ee5\u52a0\u4e0a + \u6216 - \u3002\u6307\u6570\u5fc5\u987b\u662f\u6574\u6570\u3002\u6570\u5b57\u4e2d\u4e0d\u5f97\u6709\u7a7a\u683c\u6216\u5176\u4ed6\u5b57\u7b26\u3002</p> <ul> <li>\u5fc5\u987b\u4e3afloat\u5b57\u9762\u91cf\u4f7f\u7528 'f' \u6216 'F'\u540e\u7f00\uff0c\u4f8b\u5982-1.2345F</li> </ul> <pre><code>float average = 55.66 //ERROR:RHS is a double. Need suffix 'f' for float \nfloat average = 55.66f;\n</code></pre> <p>\u4f7f\u7528\u540e\u7f00 'L' \uff08\u6216 'l'\uff09\u7528\u4e8e long double </p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#133","title":"13.3 \u5b57\u7b26\u5b57\u9762\u91cf\u548c\u8f6c\u4e49\u5e8f\u5217","text":"<p>\u4e00\u4e2a\u53ef\u6253\u5370\u7684 <code>char</code>\u5b57\u9762\u91cf\u901a\u8fc7\u7528\u4e00\u5bf9\u5355\u5f15\u53f7\u5305\u56f4\u5b57\u7b26\u6765\u7f16\u5199\uff0c\u4f8b\u5982 <code>'z'</code> \uff0c <code>'$'</code> \u548c <code>'9'</code> \u3002\u5728 C++ \u4e2d\uff0c\u5b57\u7b26\u4f7f\u7528 8 \u4f4d ASCII \u7801\u8868\u793a\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u7b97\u672f\u8fd0\u7b97\u4e2d\u88ab\u89c6\u4e3a 8 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c <code>char</code> \u548c 8 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u662f\u53ef\u4ee5\u4e92\u6362\u7684\u3002\u4f60\u8fd8\u53ef\u4ee5\u5c06\u8303\u56f4\u5728 <code>[-128, 127]</code> \u5185\u7684\u6574\u6570\u8d4b\u503c\u7ed9\u4e00\u4e2a <code>char</code> \u53d8\u91cf\uff1b\u4ee5\u53ca\u5c06 <code>[0, 255]</code> \u8d4b\u503c\u7ed9\u4e00\u4e2a <code>unsigned char</code> \u3002</p> <pre><code>char letter = 'a';             // Same as 97\nchar anotherLetter = 98;       // Same as the letter 'b'\ncout &lt;&lt; letter &lt;&lt; endl;        // 'a' printed\ncout &lt;&lt; anotherLetter &lt;&lt; endl; // 'b' printed instead of the number\nanotherLetter += 2;            // 100 or 'd'\ncout &lt;&lt; anotherLetter &lt;&lt; endl; // 'd' printed\ncout &lt;&lt; (int)anotherLetter &lt;&lt; endl;  // 100 printed\n</code></pre> Escape Sequence \u8f6c\u4e49\u5e8f\u5217 Description \u63cf\u8ff0 Hex (Decimal) \u5341\u516d\u8fdb\u5236 (\u5341\u8fdb\u5236) \\n New-line (or Line-feed) \u65b0\u884c\uff08\u6216\u6362\u884c\uff09 0AH (10D) \\r Carriage-return \u56de\u8f66 Carriage-return \u56de\u8f66 \\t Tab \u5236\u8868\u7b26 09H (9D) \\\" \" Double-quote (needed to include \" in double-quoted string) \u53cc\u5f15\u53f7\uff08\u9700\u8981\u5728\u53cc\u5f15\u53f7\u5b57\u7b26\u4e32\u4e2d\u5305\u542b \"\uff09 22H (34D) \\' Single-quote \u5355\u5f15\u53f7 27H (39D) \\\\ Back-slash (to resolve ambiguity) \u53cd\u659c\u6760\uff08\u7528\u4e8e\u89e3\u51b3\u6b67\u4e49\uff09 5CH (92D) <p>[!NOTE]</p> <ul> <li> <p>\u65b0\u884c\uff08 <code>0AH</code> \uff09\u548c\u56de\u8f66\uff08 <code>0dH</code> \uff09\uff0c\u5206\u522b\u7531 <code>\\n</code> \u548c <code>\\r</code> \u8868\u793a\uff0c\u7528\u4f5c\u884c\u5206\u9694\u7b26\uff08\u6216\u884c\u672b\uff0c\u6216 EOL\uff09\u3002\u7136\u800c\uff0c\u8bf7\u6ce8\u610f\uff0cUnixes/Mac \u4f7f\u7528 <code>\\n</code> \u4f5c\u4e3a EOL\uff0cWindows \u4f7f\u7528 <code>\\r\\n</code> \u3002</p> </li> <li> <p>Horizontal Tab (<code>09H</code>) is represented as <code>\\t</code>.   \u6c34\u5e73\u5236\u8868\u7b26 ( <code>09H</code> ) \u8868\u793a\u4e3a <code>\\t</code> </p> </li> <li> <p>To resolve ambiguity, characters back-slash (<code>\\</code>), single-quote (<code>'</code>) and double-quote (<code>\"</code>) are represented using escape sequences <code>\\\\</code>, <code>\\'</code> and <code>\\\"</code>, respectively. This is because a single back-slash begins an escape sequence, while single-quotes and double-quotes are used to enclose character and string.</p> </li> </ul> <p>\u4e3a\u4e86\u89e3\u51b3\u6b67\u4e49\uff0c\u5b57\u7b26\u53cd\u659c\u6760 ()\u3001\u5355\u5f15\u53f7 (') \u548c\u53cc\u5f15\u53f7 (\") \u5206\u522b\u4f7f\u7528\u8f6c\u4e49\u5e8f\u5217 \\\u3001\\' \u548c \\\" \u8868\u793a\u3002\u8fd9\u662f\u56e0\u4e3a\u5355\u4e2a\u53cd\u659c\u6760\u7528\u4e8e\u542f\u52a8\u8f6c\u4e49\u5e8f\u5217\uff0c\u800c\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u7528\u4e8e\u62ec\u4f4f\u5b57\u7b26\u548c\u5b57\u7b26\u4e32\u3002</p> <ul> <li>Other less commonly-used escape sequences are: <code>\\?</code> or <code>?</code>, <code>\\a</code> for alert or bell, <code>\\b</code> for backspace, <code>\\f</code> for form-feed, <code>\\v</code> for vertical tab. These may not be supported in some consoles.   \u5176\u4ed6\u4e0d\u5e38\u7528\u7684\u8f6c\u4e49\u5e8f\u5217\u6709\uff1a <code>\\?</code> \u6216 <code>?</code> \uff0c <code>\\a</code> \u7528\u4e8e\u8b66\u62a5\u6216\u94c3\u58f0\uff0c <code>\\b</code> \u7528\u4e8e\u9000\u683c\uff0c <code>\\f</code> \u7528\u4e8e\u6362\u9875\uff0c <code>\\v</code> \u7528\u4e8e\u5782\u76f4\u5236\u8868\u7b26\u3002\u8fd9\u4e9b\u5728\u67d0\u4e9b\u63a7\u5236\u53f0\u4e2d\u53ef\u80fd\u4e0d\u53d7\u652f\u6301\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/01cppbasics/#134-the-header","title":"13.4 The  Header <p><code>cctype</code>\u5934\u6587\u4ef6\uff08\u4ece<code>C</code>\u7684<code>cctype.h</code>\u79fb\u690d\u800c\u6765\uff09\u3002\u63d0\u4f9b\u4e86\u8bf8\u5982 <code>isalpha()</code> \u3001 <code>isdigit()</code> \u3001 <code>isspace()</code> \u3001 <code>ispunct()</code> \u3001 <code>isalnum()</code> \u3001 <code>isupper()</code> \u3001 <code>islower()</code> \u7b49\u51fd\u6570\u6765\u786e\u5b9a\u5b57\u7b26\u7c7b\u578b\uff1b\u4ee5\u53ca <code>toupper()</code> \u3001 <code>tolower()</code> \u7528\u4e8e\u5927\u5c0f\u5199\u8f6c\u6362\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#135","title":"13.5 \u5b57\u7b26\u4e32\u5b57\u9762\u91cf <p>\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u53ef\u80fd\u5305\u542b\u8f6c\u4e49\u5e8f\u5217\u3002\u5728<code>String</code> \u4e2d\u3002\u9700\u8981\u4f7f\u7528<code>\\\"</code>\u6765\u8868\u793a\u53cc\u5f15\u53f7\uff0c\u533a\u522b\u7ed3\u675f\u7684\u53cc\u5f15\u53f7\u3002\u4f8b\u5982\uff1a<code>\"\\\"quoted\\\"\"</code>\u3002\u5728<code>String</code>\u4e2d\u7684\u5355\u5f15\u53f7\u4e0d\u9700\u8981\u8f6c\u4e49\u5e8f\u5217\u3002</p> <pre><code>cout &lt;&lt; \"Use \\\\\\\" to place\\n a \\\" withiin\\ta\\tsting\" &lt;&lt;endl;\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#136-bool-literals-bool","title":"13.6 bool Literals bool\u5b57\u9762\u91cf <ul> <li>\u53ea\u6709\u4fe9\u4e2abool\u5b57\u9762\u91cf\uff0c\u5373<code>true</code> \u548c<code>false</code>\u3002</li> </ul> <pre><code>bool done = true;\nbool gameOver = false;\nint i;\nif (i == 9) {\n    ..........\n}\n</code></pre> <p>\u5728\u8868\u8fbe\u5f0f\u4e2d\uff0c<code>bool</code>\u503c\u548c\u5b57\u9762\u91cf\u88ab\u8f6c\u6362\u6210<code>int 0</code>\u8868\u793a<code>false</code>,\u4ee5\u53ca<code>1</code>\u6216\u975e\u96f6\u503c\u8868\u793a<code>true</code>.</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main(){\n char gender = 'm';\n bool isMarried = true;\n unsigned short numChildren = 8;\n short yearOfBirth = 1945;\n unsigned int salary = 88000;\n double weight = 88.88;\n float gpa = 3.88f;\n\n cout &lt;&lt; \"Gender is \" &lt;&lt; gender &lt;&lt; endl;\n cout &lt;&lt; \"Is married is \" &lt;&lt; isMarried &lt;&lt; endl;\n cout &lt;&lt; \"Number  of children is \" &lt;&lt; numChildren &lt;&lt; endl;\n cout &lt;&lt; \"Year of birth is \" &lt;&lt; yearOfBirth &lt;&lt; endl;\n cout &lt;&lt; \"Salary is \" &lt;&lt; salary &lt;&lt; endl;\n cout &lt;&lt; \"Weight is \" &lt;&lt; weight &lt;&lt; endl;\n cout &lt;&lt; \"GPA is \" &lt;&lt; gpa &lt;&lt; endl;\n return 0;\n}\n</code></pre> <pre><code>Gender is m\nIs married is 1 //true \uff0cfalse 0;\nNumber  of children is 8\nYear of birth is 1945\nSalary is 88000\nWeight is 88.88\nGPA is 3.88\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#14","title":"14 \u8fd0\u7b97\u7b26","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#141","title":"14.1 \u7b97\u6570\u8fd0\u7b97\u7b26 <p>C++ \u652f\u6301\u4ee5\u4e0b\u6570\u5b57\u8fd0\u7b97\u7b26\uff1a <code>short</code> , <code>int</code> , <code>long</code> , <code>long long</code> , <code>char</code> (\u89c6\u4e3a 8 \u4f4d\u6709\u7b26\u53f7\u6574\u6570), <code>unsigned short</code> , <code>unsigned int</code> , <code>unsigned long</code> , <code>unsigned long long</code> , <code>unsigned char</code> , <code>float</code> , <code>double</code> \u548c <code>long double</code> \u3002</p>    Operator Description \u63cf\u8ff0 Usage \u4f7f\u7528 Examples \u793a\u4f8b     * Multiplication \u4e58\u6cd5 expr1 * expr2 2 * 3 \u2192 6; 3.3 * 1.0 \u2192 3.3   / Division \u9664\u6cd5 expr1 / expr2 1 / 2 \u2192 0; 1.0 / 2.0 \u2192 0.5   % Remainder (Modulus) \u4f59\u6570 (Modulus) expr1 % expr2 5 % 2 \u2192 1; -5 % 2 \u2192 -1   + Addition \u6dfb\u52a0 expr1 + expr2 1 + 2 \u2192 3; 1.1 + 2.2 \u2192 3.3   - Subtraction \u51cf\u6cd5 expr1 - expr2 1 - 2 \u2192 -1; 1.1 - 2.2 \u2192 -1.1    <p>\u4ee5\u4e0a\u6240\u6709\u8fd0\u7b97\u7b26\u90fd\u662f\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u5373\u5b83\u4eec\u9700\u8981\u4e24\u4e2a\u64cd\u4f5c\u6570\u3002\u4e58\u6cd5\u3001\u9664\u6cd5\u548c\u53d6\u4f59\u8fd0\u7b97\u4f18\u5148\u4e8e\u52a0\u6cd5\u548c\u51cf\u6cd5\u3002\u5728\u540c\u4e00\u4f18\u5148\u7ea7\uff08\u4f8b\u5982\u52a0\u6cd5\u548c\u51cf\u6cd5\uff09\u5185\uff0c\u8868\u8fbe\u5f0f\u4ece\u5de6\u5230\u53f3\u8fdb\u884c\u8ba1\u7b97\u3002\u4f8b\u5982\uff0c <code>1+2+3-4</code> \u88ab\u8ba1\u7b97\u4e3a <code>((1+2)+3)-4</code> \u3002</p>  <p>[!CAUTION]</p> <p><code>int /int</code>\u4f1a\u4ea7\u751f\u4e00\u4e2a<code>int</code>\uff0c\u7ed3\u679c\u4f1a\u88ab\u622a\u65ad\uff0c\u4f8b\u5982<code>1/2 = 0(\u800c\u4e0d\u662f 0.5)</code>\u3002</p> <p>C/C++ \u6ca1\u6709\u6307\u6570\uff08\u5e42\uff09\u8fd0\u7b97\u7b26\uff08 <code>'^'</code> \u662f\u5f02\u6216\u8fd0\u7b97\u7b26\uff0c\u4e0d\u662f\u6307\u6570\uff09\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#142","title":"14.2\u7b97\u672f\u8868\u8fbe\u5f0f <p>\u4ee5\u4e0b\u7b97\u672f\u8868\u8fbe\u5f0f\uff1a</p> <p></p> <p>\u5fc5\u987b\u5199\u6210 <code>(1+2*a)/3 + (4*(b+c)*(5-d-e))/f - 6*(7/g+h)</code> \u3002\u4e0d\u80fd\u7701\u7565\u4e58\u6cd5\u7b26\u53f7 <code>'*'</code> \uff08\u5982\u6570\u5b66\u4e2d\u6240\u793a\uff09\u3002</p> <p>\u50cf\u6570\u5b66\u4e00\u6837\uff0c\u4e58\u6cd5 <code>'*'</code> \u548c\u9664\u6cd5 <code>'/'</code> \u4f18\u5148\u4e8e\u52a0\u6cd5 <code>'+'</code> \u548c\u51cf\u6cd5 <code>'-'</code> \u3002\u62ec\u53f7 <code>()</code> \u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u3002\u8fd0\u7b97\u7b26 <code>'+'</code> \u3001 <code>'-'</code> \u3001 <code>'*'</code> \u548c <code>'/'</code> \u662f\u5de6\u7ed3\u5408\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c <code>1 + 2 + 3 + 4</code> \u88ab\u89c6\u4e3a <code>(((1+2) + 3) + 4)</code> \u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#143","title":"14.3\u6df7\u5408\u8fd0\u7b97\u7b26 <p>\u5982\u679c\u7b97\u672f\u8fd0\u7b97\u7684\u4e24\u4e2a\u64cd\u4f5c\u6570\u5c5e\u4e8e\u540c\u4e00\u7c7b\u578b\uff0c\u5219\u8be5\u8fd0\u7b97\u5c06\u5728\u8be5\u7c7b\u578b\u4e2d\u8fdb\u884c\uff0c\u5e76\u4e14\u7ed3\u679c\u4e5f\u5c5e\u4e8e\u8be5\u7c7b\u578b\u3002\u4f8b\u5982\uff0c <code>int/int \u2192 int; double/double \u2192 double</code> \u3002</p>    Type Example Operation     int 2 + 3 int 2 + int 3 \u2192 int 5   double 2.2 + 3.3 double 2.2 + double 3.3 \u2192 double 5.5   mix 2 + 3.3 int 2 + double 3.3 \u2192 double 2.0 + double 3.3 \u2192 double 5.3   int 1 / 2 int 1 / int 2 \u2192 int 0   double 1.0 / 2.0 double 1.0 / double 2.0 \u2192 double 0.5   mix 1 / 2.0 int 1 / double 2.0 \u2192 double 1.0 + double 2.0 \u2192 double 0.5    <pre><code>include &lt;iostream&gt;\n#include &lt;iomanip&gt;   // needed for formatting floating-point numbers\nusing namespace std;\n\nint main() {\n   int i1 = 2, i2 = 4;\n   double d1 = 2.5, d2 = 5.0;\n\n   // Print floating-points in fixed format with 1 decimal place\n   cout &lt;&lt; fixed &lt;&lt; setprecision(1);  // need &lt;iomanip&gt;\n\n   cout &lt;&lt; i1 &lt;&lt; \" + \" &lt;&lt; i2 &lt;&lt; \" = \" &lt;&lt; i1+i2 &lt;&lt; endl;  // 6\n   cout &lt;&lt; d1 &lt;&lt; \" + \" &lt;&lt; d2 &lt;&lt; \" = \" &lt;&lt; d1+d2 &lt;&lt; endl;  // 7.5\n   cout &lt;&lt; i1 &lt;&lt; \" + \" &lt;&lt; d2 &lt;&lt; \" = \" &lt;&lt; i1+d2 &lt;&lt; endl;  // 7.0  &lt;==\n\n   cout &lt;&lt; i1 &lt;&lt; \" - \" &lt;&lt; i2 &lt;&lt; \" = \" &lt;&lt; i1-i2 &lt;&lt; endl;  // -2\n   cout &lt;&lt; d1 &lt;&lt; \" - \" &lt;&lt; d2 &lt;&lt; \" = \" &lt;&lt; d1-d2 &lt;&lt; endl;  // -2.5\n   cout &lt;&lt; i1 &lt;&lt; \" - \" &lt;&lt; d2 &lt;&lt; \" = \" &lt;&lt; i1-d2 &lt;&lt; endl;  // -3.0 &lt;==\n\n   cout &lt;&lt; i1 &lt;&lt; \" * \" &lt;&lt; i2 &lt;&lt; \" = \" &lt;&lt; i1*i2 &lt;&lt; endl;  // 8\n   cout &lt;&lt; d1 &lt;&lt; \" * \" &lt;&lt; d2 &lt;&lt; \" = \" &lt;&lt; d1*d2 &lt;&lt; endl;  // 12.5\n   cout &lt;&lt; i1 &lt;&lt; \" * \" &lt;&lt; d2 &lt;&lt; \" = \" &lt;&lt; i1*d2 &lt;&lt; endl;  // 10.0 &lt;==\n\n   cout &lt;&lt; i1 &lt;&lt; \" / \" &lt;&lt; i2 &lt;&lt; \" = \" &lt;&lt; i1/i2 &lt;&lt; endl;  // 0    &lt;==\n   cout &lt;&lt; d1 &lt;&lt; \" / \" &lt;&lt; d2 &lt;&lt; \" = \" &lt;&lt; d1/d2 &lt;&lt; endl;  // 0.5\n   cout &lt;&lt; i1 &lt;&lt; \" / \" &lt;&lt; d2 &lt;&lt; \" = \" &lt;&lt; i1/d2 &lt;&lt; endl;  // 0.4  &lt;==\n   return 0;\n}\n</code></pre> <p>\u5728\u7b97\u672f\u8fd0\u7b97\u4e2d\uff0c\u5982\u679c\u7ed3\u679c\u503c\u8d85\u51fa\u5176\u8303\u56f4\uff08\u5373\u6ea2\u51fa\u6216\u4e0b\u6ea2\uff09\uff0c\u5219\u4f1a\u56de\u7ed5\u3002C++ \u8fd0\u884c\u65f6\u4e0d\u4f1a\u53d1\u51fa\u9519\u8bef/\u8b66\u544a\u6d88\u606f\uff0c\u4f46\u4f1a\u4ea7\u751f\u9519\u8bef\u7684\u7ed3\u679c\u3002</p> <p>\u91cd\u8981\u7684\u662f\u8981\u6ce8\u610f\uff0c\u68c0\u67e5\u6ea2\u51fa/\u4e0b\u6ea2\u662f\u7a0b\u5e8f\u5458\u7684\u8d23\u4efb\u3002</p> <p>\u6b64\u529f\u80fd\u662f\u4e00\u4e2a\u9057\u7559\u8bbe\u8ba1\uff0c\u5f53\u65f6\u5904\u7406\u5668\u901f\u5ea6\u8f83\u6162\u3002\u68c0\u67e5\u6ea2\u51fa/\u4e0b\u6ea2\u4f1a\u6d88\u8017\u8ba1\u7b97\u80fd\u529b\u5e76\u964d\u4f4e\u6027\u80fd\u3002</p> <p>\u68c0\u67e5\u7b97\u672f\u6ea2\u51fa\uff08\u79f0\u4e3a\u5b89\u5168\u7f16\u7801\uff09\u662f\u7e41\u7410\u7684\u3002\u8c37\u6b4c\u641c\u7d22\u201cINT32-C. Ensure that operations on signed integers do not result in overflow\u201d @ www.securecoding.cert.org\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#144","title":"14.4.\u590d\u5408\u8d4b\u503c\u8fd0\u7b97\u7b26 <p>\u9664\u4e86\u4e4b\u524d\u63cf\u8ff0\u7684\u5e38\u89c1\u7b80\u5355\u8d4b\u503c\u8fd0\u7b97\u7b26 <code>'='</code> \u5916\uff0cC++ \u8fd8\u63d0\u4f9b\u4e86\u6240\u8c13\u7684\u590d\u5408\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u5982\u4e0b\u6240\u5217\uff1a</p>    Operator Usage Description \u63cf\u8ff0 Example \u793a\u4f8b     = var = expr Assign the value of the LHS to the variable at the RHS x = 5;   += var += expr same as var = var + expr x += 5; same as x = x + 5   -= var -= expr same as var = var - expr x -= 5; same as x = x - 5   *= var = expr* same as var = var * expr x *= 5; same as x = x * 5   /= var /= expr same as var = var / expr x /= 5; same as x = x / 5   %= var %= expr same as var = var % expr x %= 5; same as x = x % 5","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#145","title":"14.5\u9012\u589e/\u9012\u51cf\u8fd0\u7b97\u7b26 <p>C++ \u652f\u6301\u8fd9\u4e9b\u4e00\u5143\u7b97\u672f\u8fd0\u7b97\u7b26\uff1a\u9012\u589e <code>'++'</code> \u548c\u9012\u51cf <code>'--'</code> \u3002</p>    Operator Example Result     ++ x++; ++x Increment by 1, same as x += 1   -- x--; --x Decrement by 1, same as x -= 1    <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   int mark = 76;        // declare &amp; assign\n   cout &lt;&lt; mark &lt;&lt; endl; // 76\n\n   mark++;               // increase by 1 (post-increment)\n   cout &lt;&lt; mark &lt;&lt; endl; // 77\n\n   ++mark;               // increase by 1 (pre-increment)\n   cout &lt;&lt; mark &lt;&lt; endl; // 78\n\n   mark = mark + 1;      // also increase by 1 (or mark += 1)\n   cout &lt;&lt; mark &lt;&lt; endl; // 79\n\n   mark--;               // decrease by 1 (post-decrement)\n   cout &lt;&lt; mark &lt;&lt; endl; // 78\n\n   --mark;               // decrease by 1 (pre-decrement)\n   cout &lt;&lt; mark &lt;&lt; endl; // 77\n\n   mark = mark - 1;      // also decrease by 1 (or mark -= 1)\n   cout &lt;&lt; mark &lt;&lt; endl; // 76\n   return 0;\n}\n</code></pre> <p>\u4e00\u5143\u9012\u589e/\u9012\u51cf\u8fd0\u7b97\u7b26\u53ef\u4ee5\u653e\u5728\u64cd\u4f5c\u6570\u4e4b\u524d\uff08\u524d\u7f00\u8fd0\u7b97\u7b26\uff09\uff0c\u4e5f\u53ef\u4ee5\u653e\u5728\u64cd\u4f5c\u6570\u4e4b\u540e\uff08\u540e\u7f00\u8fd0\u7b97\u7b26\uff09\u3002\u5b83\u4eec\u5728\u64cd\u4f5c\u4e2d\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002</p>    Operator Description Example Result     ++var Pre-Increment \u524d\u7f6e\u9012\u589e Increment var, then use the new value of var \u589e\u52a0 var \u7684\u503c\uff0c\u7136\u540e\u4f7f\u7528 var \u7684\u65b0\u503c y = ++x; same as x=x+1; y=x;   var++ Post-Increment \u540e\u589e\u91cf Use the old value of var, then increment var \u4f7f\u7528 var \u7684\u65e7\u503c\uff0c\u7136\u540e\u589e\u52a0 var \u7684\u503c y = x++; same as oldX=x; x=x+1; y=oldX;   --var Pre-Decrement \u9884\u9012\u51cf y = --x; same as x=x-1; y=x;   var-- Post-Decrement \u540e\u9012\u51cf y = x--; same as oldX=x; x=x-1; y=oldX;    <p>\u5982\u679c '++' \u6216 '--' \u6d89\u53ca\u53e6\u4e00\u4e2a\u64cd\u4f5c\uff0c\u90a3\u4e48\u524d\u7f6e\u6216\u540e\u7f6e\u987a\u5e8f\u5bf9\u4e8e\u6307\u5b9a\u4e24\u4e2a\u64cd\u4f5c\u7684\u987a\u5e8f\u975e\u5e38\u91cd\u8981\u3002</p> <pre><code>x = 5;\ncout &lt;&lt; x++ &lt;&lt; endl;  // Save x (5); Increment x (=6); Print old x (5).\nx = 5;\ncout &lt;&lt; ++x &lt;&lt; endl;  // Increment x (=6); Print x (6).\n// This is confusing! Try to avoid! What is i=++i? What is i=i++?\n</code></pre> <p>\u524d\u7f00\u8fd0\u7b97\u7b26\uff08\u4f8b\u5982\uff0c <code>++i</code> \uff09\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u6bd4\u540e\u7f00\u8fd0\u7b97\u7b26\uff08\u4f8b\u5982\uff0c <code>i++</code> \uff09\u66f4\u9ad8\u6548\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#146","title":"14.6.\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u4e0e\u663e\u5f0f\u7c7b\u578b\u8f6c\u6362 <p>\u5c06\u4e00\u4e2a\u503c\u4ece\u4e00\u79cd\u7c7b\u578b\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u7c7b\u578b\u79f0\u4e3a\u7c7b\u578b\u8f6c\u6362\uff08\u6216\u7c7b\u578b\u8f6c\u6362\uff09\u3002\u7c7b\u578b\u8f6c\u6362\u6709\u4e24\u79cd\uff1a</p> <ul> <li> <p>\u7f16\u8bd1\u5668\u81ea\u52a8\u6267\u884c\u7684\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362</p> </li> <li> <p>\u901a\u8fc7\u4e00\u5143\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\u4ee5 (new-type)operand \u6216 new-type(operand) \u7684\u5f62\u5f0f\u8fdb\u884c\u663e\u5f0f\u7c7b\u578b\u8f6c\u6362\u3002</p> </li> </ul>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#1461","title":"14.6.1\u9690\u5f0f\uff08\u81ea\u52a8\uff09\u7c7b\u578b\u8f6c\u6362","text":"<p>\u5c06\u4e00\u4e2a\u57fa\u672c\uff08\u5185\u7f6e\uff09\u7c7b\u578b\u7684\u503c\u8d4b\u7ed9\u53e6\u4e00\u4e2a\u57fa\u672c\u7c7b\u578b\u7684\u53d8\u91cf\u65f6\uff0c\u5982\u679c\u8fd9\u4e24\u79cd\u7c7b\u578b\u517c\u5bb9\uff0cC++ \u4f1a\u81ea\u52a8\u5c06\u8be5\u503c\u8f6c\u6362\u4e3a\u63a5\u6536\u7c7b\u578b\u3002\u4f8b\u5982\uff0c</p> <ul> <li>\u5982\u679c\u5c06\u4e00\u4e2a <code>int</code> \u503c\u8d4b\u503c\u7ed9\u4e00\u4e2a <code>double</code> \u53d8\u91cf\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5c06 <code>int</code> \u503c\u8f6c\u6362\u4e3a <code>double</code> double\uff08\u4f8b\u5982\uff0c\u4ece 1 \u8f6c\u6362\u4e3a 1.0\uff09\uff0c\u7136\u540e\u5c06\u5176\u8d4b\u503c\u7ed9 <code>double</code> \u53d8\u91cf</li> <li>\u5982\u679c\u5c06\u4e00\u4e2a <code>double</code> \u503c\u8d4b\u7ed9\u4e00\u4e2a <code>int</code> \u53d8\u91cf\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5c06 <code>double</code> \u503c\u8f6c\u6362\u4e3a <code>int</code> \u503c\uff08\u4f8b\u5982\uff0c\u4ece 1.2 \u8f6c\u6362\u4e3a 1\uff09\uff0c\u5e76\u5c06\u5176\u8d4b\u7ed9 <code>int</code> \u53d8\u91cf\u3002\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u622a\u65ad\u5e76\u4e22\u5931\u3002\u4e00\u4e9b\u7f16\u8bd1\u5668\u4f1a\u53d1\u51fa\u8b66\u544a/\u9519\u8bef\u201c\u53ef\u80fd\u4e22\u5931\u7cbe\u5ea6\u201d\uff1b\u800c\u5176\u4ed6\u7f16\u8bd1\u5668\u5219\u4e0d\u4f1a\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\nusing namespace std;\nint main() {\n int i;\n double d;\n\n cout &lt;&lt; fixed &lt;&lt; setprecision(1);\n i = 3;\n d = i;\n cout &lt;&lt; \" d = \" &lt;&lt; d &lt;&lt; endl; //3.0\n\n d = 5.5;\n i = d;\n cout &lt;&lt; \" i = \" &lt;&lt; i &lt;&lt; endl; //5 (int)\n\n i = 6.6;\n cout &lt;&lt; \" i = \"&lt;&lt; i &lt;&lt; endl; // 6(int)\n return 0;\n}\n</code></pre> <p>\u5982\u679c\u4e24\u79cd\u7c7b\u578b\u4e0d\u517c\u5bb9\uff0cC++ \u4e0d\u4f1a\u6267\u884c\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\uff0c</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#1462","title":"14.6.2 \u663e\u5f0f\u7c7b\u578b\u8f6c\u6362","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u6240\u8c13\u7684\u5355\u76ee\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\u4ee5 <code>(*new-type*)*operand*</code> \u6216 <code>*new-type*(*operand*)</code> \u7684\u5f62\u5f0f\u663e\u5f0f\u6267\u884c\u7c7b\u578b\u8f6c\u6362\u3002\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\u63a5\u53d7\u7279\u5b9a\u7c7b\u578b\u7684\u4e00\u4e2a\u64cd\u4f5c\u6570\uff0c\u5e76\u8fd4\u56de\u65b0\u7c7b\u578b\u4e2d\u7684\u7b49\u6548\u503c\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u662f\u4e00\u4e2a\u4ea7\u751f\u7ed3\u679c\u503c\u7684\u64cd\u4f5c\uff0c\u7c7b\u4f3c\u4e8e\u52a0\u6cd5\u64cd\u4f5c\uff0c\u5c3d\u7ba1\u52a0\u6cd5\u6d89\u53ca\u4e24\u4e2a\u64cd\u4f5c\u6570\u3002\u4f8b\u5982\uff0c</p> <pre><code>// Print floating-point number in fixed format with 1 decimal point (need &lt;iomanip&gt;)\ncout &lt;&lt; fixed &lt;&lt; setprecision(1);\n\ncout &lt;&lt; (double)5 &lt;&lt; endl;  // int 5 \u2192 double 5.0\ncout &lt;&lt; (int)5.5 &lt;&lt; endl;   // double 5.5 \u2192 int 5\n\ndouble aDouble = 5.6;\nint anInt = (int)aDouble; // return 5 and assign to anInt. aDouble does not change!\n\n// C++ also supports function-style type cast.\ncout &lt;&lt; double(5) &lt;&lt; endl;     // 5.0\ncout &lt;&lt; int(5.5) &lt;&lt; endl;      // 5\ncout &lt;&lt; int(aDouble) &lt;&lt; endl;  // 5\n</code></pre> <p>\u5047\u8bbe\u4f60\u60f3\u627e\u5230\u4ecb\u4e8e <code>1</code> \u548c <code>100</code> \u4e4b\u95f4\u7684\u6574\u6570\u7684\u5e73\u5747\u503c\uff08\u4ee5 <code>double</code> \u8868\u793a\uff09\u3002\u7814\u7a76\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\nusing namespace std;\n\nint main() {\n   int sum = 0;\n   double average;\n   for (int number = 1; number &lt;= 100; ++number) {\n      sum += number;      // Final sum is int 5050\n   }\n   average = sum / 100;   // Won't work (average = 50.0 instead of 50.5)\n   cout &lt;&lt; fixed &lt;&lt; setprecision(1);\n   cout &lt;&lt; \"Average is \" &lt;&lt; average &lt;&lt; endl;  // Average is 50.0\n   return 0;\n}\n</code></pre> <p>\u65e0\u6cd5\u83b7\u5f97\u5c0f\u6570\u90e8\u5206\uff0c\u5c3d\u7ba1 <code>average</code> \u662f\u4e00\u4e2a <code>double</code> \u3002\u8fd9\u662f\u56e0\u4e3a <code>sum</code> \u548c <code>100</code> \u90fd\u662f <code>int</code> \u3002\u9664\u6cd5\u7684\u7ed3\u679c\u662f\u4e00\u4e2a <code>int</code> \uff0c\u7136\u540e\u88ab\u9690\u5f0f\u8f6c\u6362\u4e3a <code>double</code> \u5e76\u8d4b\u503c\u7ed9 <code>double</code> \u53d8\u91cf <code>average</code> \u3002\u8981\u83b7\u5f97\u6b63\u786e\u7b54\u6848\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ee5\u4e0b\u4efb\u4e00\u65b9\u5f0f\uff1a</p> <pre><code>average = (double)sum / 100;     // Cast sum from int to double before division\naverage = sum / (double)100;     // Cast 100 from int to double before division\naverage = sum / 100.0;\naverage = (double)(sum / 100);   // Won't work. why?\n //\u5148 \uff08int 5050/100) \u7136\u540e\uff08double 50)\n// C++ also support function-style type casting in the form of new-type(operand)\naverage = double(sum) / 100;     // Same as (double)sum / 100\n</code></pre> <p>Example</p> <pre><code>/* Test Type Casting (TestTypeCast.cpp) */\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\nusing namespace std;\n\nint main() {\n   // Print floating-point number in fixed format with 1 decimal place\n   cout &lt;&lt; fixed &lt;&lt; setprecision(1);\n\n   // Test explicit type casting\n   int i1 = 4, i2 = 8;\n   cout &lt;&lt; i1 / i2 &lt;&lt; endl;           // 0\n   cout &lt;&lt; (double)i1 / i2 &lt;&lt; endl;   // 0.5\n   cout &lt;&lt; i1 / (double)i2 &lt;&lt; endl;   // 0.5\n   cout &lt;&lt; (double)(i1 / i2) &lt;&lt; endl; // 0.0\n\n   double d1 = 5.5, d2 = 6.6;\n   cout &lt;&lt; (int)d1 / i2 &lt;&lt; endl;      // 0\n   cout &lt;&lt; (int)(d1 / i2) &lt;&lt; endl;    // 0\n\n   // Test implicit type casting\n   d1 = i1;             // int implicitly casts to double\n   cout &lt;&lt; d1 &lt;&lt; endl;  // 4.0\n   i2 = d2;             // double truncates to int! (Warning?)\n   cout &lt;&lt; i2 &lt;&lt; endl;  // 6\n}\n</code></pre> <pre><code>/*\n * Converting between Celsius and Fahrenheit (ConvertTemperature.cpp)\n *   Celsius = (5/9)(Fahrenheit\u201332)\n *   Fahrenheit = (9/5)Celsius+32\n */\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;   // needed for formatting floating-point numbers\nusing namespace std;\n\nint main() {\n   double celsius, fahrenheit;\n\n   // Format floating-points in fixed with 2 decimal places\n   cout &lt;&lt; fixed &lt;&lt; setprecision(2);\n\n   cout &lt;&lt; \"Enter the temperature in celsius: \";\n   cin &gt;&gt; celsius;\n   fahrenheit = celsius*9/5 + 32;\n   // 9/5*celsius + 32 gives wrong answer! Why?\n   cout &lt;&lt; celsius &lt;&lt; \"C is \" &lt;&lt; fahrenheit &lt;&lt; \"F\" &lt;&lt; endl;\n\n   cout &lt;&lt; \"Enter the temperature in fahrenheit: \";\n   cin &gt;&gt; fahrenheit;\n   celsius =  (fahrenheit - 32)*5/9;\n   // 5/9*(fahrenheit - 32) gives wrong answer! Why?\n   cout &lt;&lt; fahrenheit &lt;&lt; \"F is \" &lt;&lt; celsius &lt;&lt; \"C\" &lt;&lt; endl;\n   return 0;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/01cppbasics/#static-cast","title":"static-cast <p>C++ \u5f15\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a <code>static_cast&lt;*type*&gt;</code> \u7684\u65b0\u8fd0\u7b97\u7b26\u6765\u6267\u884c\u7c7b\u578b\u8f6c\u6362\uff08\u56e0\u4e3a\u4e4b\u524d\u63d0\u5230\u7684\u5e38\u89c4\u8f6c\u6362\u8fc7\u4e8e\u5bbd\u677e\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u9884\u671f\u7ed3\u679c\uff09\u3002 <code>static_cast</code> \u5982\u679c\u8f6c\u6362\u5931\u8d25\uff0c\u5219\u4f1a\u53d1\u51fa\u9519\u8bef\u4fe1\u53f7\u3002\u4f8b\u5982\uff0c</p> <pre><code>double d = 5.5;\nint i = static_cast&lt;int&gt;(d);\nfloat f = static_cast&lt;float&gt;(i);\nlong l = static_cast&lt;logn&gt;(d);\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#147","title":"14.7\u5173\u7cfb\u548c\u903b\u8f91\u8fd0\u7b97\u7b26 <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f60\u9700\u8981\u5728\u51b3\u5b9a\u91c7\u53d6\u4f55\u79cd\u884c\u52a8\u4e4b\u524d\u6bd4\u8f83\u4e24\u4e2a\u503c\uff0c\u4f8b\u5982\uff0c\u5982\u679c mark \u5927\u4e8e\u6216\u7b49\u4e8e 50\uff0c\u5219\u6253\u5370 \"PASS\"\u3002</p> <p>C++ \u63d0\u4f9b\u4e86\u516d\u4e2a\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff08\u6216\u5173\u7cfb\u8fd0\u7b97\u7b26\uff09\uff1a</p>    Operator Description Usage Example (x=5, y=8)     == Equal to \u7b49\u4e8e expr1 == expr2 (x == y) \u2192 false   != Not Equal to \u4e0d\u7b49\u4e8e expr1 != expr2 (x != y) \u2192 true   &gt; Greater than \u5927\u4e8e expr1 &gt; expr2 (x &gt; y) \u2192 false   &gt;= Greater than or equal to \u5927\u4e8e\u6216\u7b49\u4e8e expr1 &gt;= expr2 (x &gt;= 5) \u2192 true   &lt; Less than \u5c0f\u4e8e expr1 &lt; expr2 (y &lt; 8) \u2192 false   &lt;= Less than or equal to \u5c0f\u4e8e\u6216\u7b49\u4e8e expr1 &gt;= expr2 (y &lt;= 8) \u2192 true    <p>\u5728 C++ \u4e2d\uff0c\u8fd9\u4e9b\u6bd4\u8f83\u64cd\u4f5c\u8fd4\u56de\u4e00\u4e2a\u503c\u4e3a <code>bool</code> \u7684 <code>false</code> (0) \u6216 <code>true</code> (1 \u6216\u975e\u96f6\u503c)\u3002</p> <p>\u6bcf\u6b21\u6bd4\u8f83\u64cd\u4f5c\u6d89\u53ca\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u4f8b\u5982 <code>x &lt;= 100</code> \u3002\u5728\u7f16\u7a0b\u4e2d\u5199 <code>1 &lt; x &lt; 100</code> \u662f\u65e0\u6548\u7684\u3002\u76f8\u53cd\uff0c\u4f60\u9700\u8981\u62c6\u5206\u51fa\u4e24\u4e2a\u6bd4\u8f83\u64cd\u4f5c <code>x &gt; 1</code> \uff0c <code>x &lt; 100</code> \uff0c\u5e76\u4f7f\u7528\u903b\u8f91\u4e0e\u8fd0\u7b97\u7b26\u8fde\u63a5\uff0c\u5373 <code>(x &gt; 1) &amp;&amp; (x &lt; 100)</code> \uff0c\u5176\u4e2d <code>&amp;&amp;</code> \u8868\u793a\u4e0e\u8fd0\u7b97\u7b26\u3002</p> <p>C++ \u63d0\u4f9b\u4e86\u56db\u4e2a\u903b\u8f91\u8fd0\u7b97\u7b26\uff08\u4ec5\u5bf9 <code>boolean</code> \u64cd\u4f5c\u6570\u8fdb\u884c\u64cd\u4f5c\uff09\uff1a</p>    Operator Description Usage     &amp;&amp; Logical AND \u903b\u8f91\u4e0e expr1 &amp;&amp; expr2   || Logical OR \u903b\u8f91\u6216 expr1 || expr2   ! Logical NOT \u903b\u8f91\u975e !expr   ^ Logical XOR \u903b\u8f91\u5f02\u6216 expr1 ^ expr2    <p>\u771f\u503c\u8868\u5982\u4e0b\uff1a</p>    AND (&amp;&amp;) true false     true true false   false false false   OR (||) true false   true true true   false true false   NOT (!) true false    false true   XOR (^) true false   true false true   false true false    <pre><code>// Return true if x is between 0 and 100 (inclusive)\n(x &gt;= 0) &amp;&amp; (x &lt;= 100)\n// wrong to use 0 &lt;= x &lt;= 100\n\n// Return true if x is outside 0 and 100 (inclusive)\n(x &lt; 0) || (x &gt; 100)   //or\n!((x &gt;= 0) &amp;&amp; (x &lt;= 100))\n\n// Return true if year is a leap year\n// A year is a leap year if it is divisible by 4 but not by 100, or it is divisible by 400.\n((year % 4 == 0) &amp;&amp; (year % 100 != 0)) || (year % 400 == 0)// \u5982\u679c x \u5728 0 \u5230 100 \u4e4b\u95f4\uff08\u5305\u542b\u8fb9\u754c\uff09\uff0c\u8fd4\u56de true (x &gt;= 0) &amp;&amp; (x &lt;= 100) // \u9519\u8bef\u4f7f\u7528 0 &lt;= x &lt;= 100\n// \u5982\u679c x \u5728 0 \u5230 100 \u4e4b\u5916\uff08\u5305\u542b\u8fb9\u754c\uff09\uff0c\u8fd4\u56de true (x &lt; 0) || (x &gt; 100) // \u6216 !((x &gt;= 0) &amp;&amp; (x &lt;= 100))\n// \u5982\u679c year \u662f\u95f0\u5e74\uff0c\u8fd4\u56de true\n// \u5982\u679c\u4e00\u4e2a\u5e74\u4efd\u80fd\u88ab 4 \u6574\u9664\u4f46\u4e0d\u80fd\u88ab 100 \u6574\u9664\uff0c\u6216\u8005\u80fd\u88ab 400 \u6574\u9664\uff0c\u5219\u4e3a\u95f0\u5e74\u3002((year % 4 == 0) &amp;&amp; (year % 100 != 0)) || (year % 400 == 0)\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#15-flow-control","title":"15 Flow Control <p>\u6709\u4e09\u79cd\u57fa\u672c\u7684\u6d41\u7a0b\u63a7\u5236\u7ed3\u6784 - \u987a\u5e8f\u3001\u6761\u4ef6\uff08\u6216\u51b3\u7b56\uff09\u548c\u5faa\u73af\uff08\u6216\u8fed\u4ee3\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#151","title":"15.1\u987a\u5e8f\u6d41\u7a0b\u63a7\u5236 <p>\u4e00\u4e2a\u7a0b\u5e8f\u662f\u4e00\u7cfb\u5217\u6307\u4ee4\u7684\u96c6\u5408\u3002\u987a\u5e8f\u6d41\u662f\u6700\u5e38\u89c1\u4e14\u6700\u76f4\u63a5\u7684\u65b9\u5f0f\uff0c\u5176\u4e2d\u7f16\u7a0b\u8bed\u53e5\u6309\u7167\u5b83\u4eec\u4e66\u5199\u7684\u987a\u5e8f\u6267\u884c\u2014\u2014\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u8fdb\u884c\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#152","title":"15.2  \u6761\u4ef6\uff08\u51b3\u7b56\u6d41\u7a0b\u56fe\uff09    Syntax \u8bed\u6cd5 Example \u793a\u4f8b Flowchart \u6d41\u7a0b\u56fe     <code>// if-then</code>if ( booleanExpression ) { true-block ; } if (mark &gt;= 50) {   cout &lt;&lt; \"Congratulation!\" &lt;&lt; endl;   cout &lt;&lt; \"Keep it up!\" &lt;&lt; endl; }    <code>// if-then-else</code>if ( booleanExpression ) {  true-block ; } else { false-block ; } if (mark &gt;= 50) {   cout &lt;&lt; \"Congratulation!\" &lt;&lt; endl;   cout &lt;&lt; \"Keep it up!\" &lt;&lt; endl; } else {   cout &lt;&lt; \"Try Harder!\" &lt;&lt; endl; }    <code>// nested-if</code> if ( booleanExpr-1 ) {  block-1 ; } else if ( booleanExpr-2 ) {block-2 ; } else if ( booleanExpr-3 ) { block-3 ; } else if ( booleanExpr-4 ) {  ...... } else { elseBlock ; } if (mark &gt;= 80) {   cout &lt;&lt; \"A\" &lt;&lt; endl; } else if (mark &gt;= 70) {   cout &lt;&lt; \"B\" &lt;&lt; endl; } else if (mark &gt;= 60) {   cout &lt;&lt; \"C\" &lt;&lt; endl; } else if (mark &gt;= 50) {   cout &lt;&lt; \"D\" &lt;&lt; endl; } else {   cout &lt;&lt; \"F\" &lt;&lt; endl; }    <code>// switch-case</code> switch ( selector ) {   case value-1: block-1; break;   case value-2:      block-2; break; **  case value-3:     block-3; break;   ......   case value-n:   block-n; break; default: default-block; }** char oper; int num1, num2, result; ...... switch (oper) {   case '+':      result = num1 + num2; break;   case '-':       result = num1 - num2; break;   case '*':       result = num1 * num2; break;   case '/':       result = num1 / num2; break;   default:      cout &lt;&lt; \"Unknown operator\" &lt;&lt; endl; }     <p>\u201cswitch-case\u201d \u662f\u201cnested-if\u201d\u7684\u66ff\u4ee3\u3002\u5728switch-case\u8bed\u53e5\u4e2d\uff0c<code>break</code>\u6bcf\u4e2a case \u90fd\u9700\u8981\u4e00\u4e2a\u8bed\u53e5\u3002\u5982\u679c<code>break</code>\u7f3a\u5c11\u4e00\u4e2a\uff0c\u5219\u6267\u884c\u5c06\u6d41\u5411\u4e0b\u4e00\u4e2a case\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528<code>int</code>\u6216<code>char</code>\u53d8\u91cf\u4f5c\u4e3a case\u9009\u62e9\u5668\u3002</p> <p>\u6761\u4ef6\u8fd0\u7b97\u7b26\uff1a\u6761\u4ef6\u8fd0\u7b97\u7b26\u662f\u4e00\u4e2a\u4e09\u5143\uff083 \u4e2a\u64cd\u4f5c\u6570\uff09\u8fd0\u7b97\u7b26\uff0c\u5f62\u5f0f\u4e3a <code>booleanExpr ? trueExpr : falseExpr</code> \u3002\u6839\u636e <code>booleanExpr</code> \u7684\u60c5\u51b5\uff0c\u5b83\u4f1a\u8bc4\u4f30\u5e76\u8fd4\u56de <code>trueExpr</code> \u6216 <code>falseExpr</code> \u7684\u503c\u3002</p>    Syntax \u8bed\u6cd5 Example \u793a\u4f8b     <code>booleanExpr ? trueExpr :falseExpr</code> <code>cout &lt;&lt; (mark &gt;= 50) ? \"PASS\" : \"FAIL\" &lt;&lt; endl;   // return either \"PASS\" or \"FAIL\", and put to cout max = (a &gt; b) ? a : b;   // RHS returns a or b abs = (a &gt; 0) ? a : -a;  // RHS returns a or -a</code>    <p>\u5927\u62ec\u53f7\uff1a\u5982\u679c\u5757\u5185\u53ea\u6709\u4e00\u6761\u8bed\u53e5\uff0c\u60a8\u53ef\u4ee5\u7701\u7565\u5927\u62ec\u53f7 <code>{ }</code> \u3002\u4f8b\u5982\uff0c</p> <pre><code>if (mark &gt;= 50) \n   cout &lt;&lt; \"PASS\" &lt;&lt; endl;   // Only one statement, can omit { } but not recommended\nelse {                           // more than one statements, need { }\n   cout &lt;&lt; \"FAIL\" &lt;&lt; endl;\n   cout &lt;&lt; \"Try Harder!\" &lt;&lt; endl;\n}\n</code></pre> <p>\u5efa\u8bae\u4fdd\u7559\u5927\u62ec\u53f7\uff0c\u5373\u4f7f\u5757\u4e2d\u53ea\u6709\u4e00\u6761\u8bed\u53e5\uff0c\u4ee5\u63d0\u9ad8\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#153","title":"15.3\u5faa\u73af\u6d41\u63a7\u5236 <p>\u6709\u51e0\u79cd\u7c7b\u578b\u7684\u5faa\u73af\uff1afor-loop\u3001while-do \u548c do-while\u3002</p>    Syntax \u8bed\u6cd5 Example \u793a\u4f8b Flowchart \u6d41\u7a0b\u56fe     <code>// for-loop</code>for (init;test post-proc) { body ; } <code>// Sum from 1 to 1000</code>int sum = 0; for (int number = 1; number &lt;= 1000; ++number) {  sum += number; }    <code>// while-do</code>while ( condition ) { body ; } int sum = 0, number = 1; while (number &lt;= 1000) {   sum += number;   ++number; }    <code>// do-while</code> do { body ; } while ( condition ) ; int sum = 0, number = 1; do {   sum += number;   ++number; } while (number &lt;= 1000);     <p>\u5047\u8bbe\u7a0b\u5e8f\u63d0\u793a\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u4ecb\u4e8e <code>1</code> \u5230 <code>10</code> \u4e4b\u95f4\u7684\u6570\u5b57\uff0c\u5e76\u68c0\u67e5\u8f93\u5165\u662f\u5426\u6709\u6548\uff0c\u4f7f\u7528\u5e26\u6709\u5e03\u5c14\u6807\u5fd7\u7684 do-while \u5faa\u73af\u53ef\u80fd\u66f4\u5408\u9002\u3002</p> <pre><code>// Input with validity check\nbool valid = false;\nint number;\ndo {\n  // prompt user to enter an int between 1 and 10\n  ......\n  // if the number entered is valid, set done to exit the loop\n  if (number &gt;=1 &amp;&amp; number &lt;= 10) {\n     valid = true;\n  }\n} while (!valid);   // Need a semi-colon to terminate do-while\n</code></pre> <p>\u4f7f\u7528<code>while-do</code>\u7684\u4f8b\u5b50</p> <pre><code>// Game loop\nbool gameOver = false;\nwhile (!gameOver) {\n   // play the game\n   ......\n   // Update the game state \n   // Set gameOver to true if appropriate to exit the game loop\n   ......\n}\n</code></pre> <p>\u793a\u4f8b\uff08\u8ba1\u6570\u5668\u63a7\u5236\u5faa\u73af\uff09\uff1a\u63d0\u793a\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u4e0a\u9650\u3002\u8ba1\u7b97\u4ece 1 \u5230\u7ed9\u5b9a\u4e0a\u9650\u7684\u6574\u6570\u4e4b\u548c\uff0c\u5e76\u8ba1\u7b97\u5176\u5e73\u5747\u503c\u3002</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main() {\n    int sum = 0;\n    int upperbound;\n    cout &lt;&lt; \"Enter upperbound : \";\n    cin &gt;&gt; upperbound;\n\n    for (int number = 1; number &lt;= upperbound; ++number) {\n        sum += number;\n    }\n    cout &lt;&lt; \"sum is \" &lt;&lt; sum &lt;&lt; endl;\n    cout &lt;&lt; \"Average is \" &lt;&lt; (double)sum / upperbound &lt;&lt; endl;\n\n    int count = 0;\n    sum = 0;\n    for (int number = 1; number &lt;= upperbound; number = number + 2) {\n        ++count;\n        sum += number;\n    }\n    cout &lt;&lt; \"Sum of odd number is \" &lt;&lt; sum &lt;&lt; endl;\n    cout &lt;&lt; \"Average is \" &lt;&lt; (double)sum / upperbound &lt;&lt; endl;\n\n}\n</code></pre> <pre><code>Enter upperbound : 1000\nsum is 500500\nAverage is 500.5\nSum of odd number is 250000\nAverage is 250\n</code></pre> <p>\u793a\u4f8b\uff08\u54e8\u5175\u63a7\u5236\u5faa\u73af\uff09\uff1a\u63d0\u793a\u7528\u6237\u8f93\u5165\u6b63\u6574\u6570\uff0c\u5e76\u663e\u793a\u8ba1\u6570\u3001\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u548c\u5e73\u5747\u503c\u3002\u5f53\u7528\u6237\u8f93\u5165 -1 \u65f6\u7ec8\u6b62\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;climits&gt;\n#include&lt;iomanip&gt;\n\nusing namespace std;\n\n\nint main() {\n    int numberIn;\n    int count = 0;\n    int sum = 0;\n    int max = 0;\n    int min = INT_MAX;\n    int sentinel = -1;\n\n    cout &lt;&lt; \"enter a positive integer or \" &lt;&lt; sentinel &lt;&lt; \"to exit: \";\n    while (cin &gt;&gt; numberIn &amp;&amp; numberIn != sentinel) {\n\n        if (numberIn &gt; 0) {\n            ++count;\n            sum += numberIn;\n            if (max &lt; numberIn)max = numberIn;\n            if (min &gt; numberIn)min = numberIn;\n        }else {\n            cout &lt;&lt; \"error: input must be positive! try again...\" &lt;&lt; endl;\n        }\n        cout &lt;&lt; \"Enter a positive integer or \" &lt;&lt; sentinel &lt;&lt; \" to exit: \";\n    }\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"Count is \" &lt;&lt; count &lt;&lt; endl;\n    if (count &gt; 0) {\n        cout &lt;&lt; \"Maximum is \" &lt;&lt; max &lt;&lt; endl;\n        cout &lt;&lt; \"Minimum is \" &lt;&lt; min &lt;&lt; endl;\n        cout &lt;&lt; fixed &lt;&lt; setprecision(2);\n        cout &lt;&lt; \"Average is  \" &lt;&lt; (double)sum / count &lt;&lt; endl;\n    }\n}\n</code></pre> <ul> <li>\u5728\u8ba1\u7b97\u4e2d\uff0c\u54e8\u5175\u503c\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u503c\uff0c\u7528\u4e8e\u8868\u793a\u6570\u636e\u7684\u7ed3\u675f\uff08\u4f8b\u5982\uff0c\u4f7f\u7528\u8d1f\u503c\u6765\u7ed3\u675f\u4e00\u7cfb\u5217\u6b63\u503c\u3001\u6587\u4ef6\u7ed3\u675f\u7b26\u3001null \u7ec8\u6b62\u5b57\u7b26\u4e32\u4e2d\u7684 null \u5b57\u7b26\uff09\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528-1 \u4f5c\u4e3a\u54e8\u5175\u503c\u6765\u8868\u793a\u8f93\u5165\u7684\u7ed3\u675f\uff0c\u8fd9\u662f\u4e00\u7cfb\u5217\u6b63\u6574\u6570\u3002\u4e3a\u4e86\u7075\u6d3b\u6027\u548c\u6613\u4e8e\u7ef4\u62a4\uff0c\u6211\u4eec\u6ca1\u6709\u786c\u7f16\u7801-1 \u7684\u503c\uff0c\u800c\u662f\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3a <code>sentinel</code> \u7684\u53d8\u91cf\u3002</li> <li>\u8bf7\u6ce8\u610f\u8bfb\u53d6\u8f93\u5165\u65f6\u7684 while \u5faa\u73af\u6a21\u5f0f\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u9700\u8981\u91cd\u590d\u63d0\u793a\u8bed\u53e5\u3002</li> </ul> <pre><code>cout &lt;&lt; fixed &lt;&lt; setprecision(n);\n</code></pre> <ul> <li>\u8981\u63a7\u5236\u6d6e\u70b9\u6570\u7684\u7cbe\u5ea6\uff0c\u8bf7\u4f7f\u7528\uff1a\u5176\u4e2d n \u662f\u5c0f\u6570\u70b9\u540e\u7684\u4f4d\u6570\u3002\u60a8\u9700\u8981\u5305\u542b <code>&lt;iomanip&gt;</code> \u5934\u6587\u4ef6\u3002 <code>setprecision()</code> \u662f\u7c98\u6027\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5c06\u4e00\u76f4\u6709\u6548\uff0c\u76f4\u5230\u8bbe\u7f6e\u53e6\u4e00\u4e2a\u503c\u3002</li> </ul>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#154-breakcontinue","title":"15.4 \u4e2d\u65ad\u5faa\u73af\u6d41\u7a0b- \"break\"\u548c\"continue\" <p><code>break</code> \u8bed\u53e5\u4f1a\u8df3\u51fa\u5e76\u9000\u51fa\u5f53\u524d\uff08\u6700\u5185\u5c42\uff09\u5faa\u73af</p> <p><code>continue</code> \u8bed\u53e5\u4f1a\u4e2d\u6b62\u5f53\u524d\u8fed\u4ee3\uff0c\u5e76\u7ee7\u7eed\u6267\u884c\u5f53\u524d\uff08\u6700\u5185\u5c42\uff09\u5faa\u73af\u7684\u4e0b\u4e00\u4e2a\u8fed\u4ee3\u3002</p> <p><code>break</code> \u548c <code>continue</code> \u662f\u8f83\u5dee\u7684\u7ed3\u6784\uff0c\u56e0\u4e3a\u5b83\u4eec\u96be\u4ee5\u9605\u8bfb\u548c\u7406\u89e3\u3002\u53ea\u6709\u5728\u7edd\u5bf9\u5fc5\u8981\u65f6\u624d\u4f7f\u7528\u5b83\u4eec\u3002\u4f60\u603b\u662f\u53ef\u4ee5\u7f16\u5199\u76f8\u540c\u7684\u7a0b\u5e8f\uff0c\u800c\u4e0d\u4f7f\u7528 <code>break</code> \u548c <code>continue</code> \u3002</p> <p>\u793a\u4f8b\uff08\u4e2d\u65ad\uff09\uff1a\u4ee5\u4e0b\u7a0b\u5e8f\u5217\u51fa\u4e86 2 \u5230\u4e00\u4e2a\u4e0a\u9650\u4e4b\u95f4\u7684\u975e\u8d28\u6570\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nint main() {\n   int upperbound;\n   cout &lt;&lt; \"Enter the upperbound: \";\n   cin &gt;&gt; upperbound;\n   for (int number = 2; number &lt;= upperbound; ++number) {\n      // Not a prime, if there is a factor between 2 and sqrt(number)\n      int maxFactor = (int)sqrt(number);\n      for (int factor = 2; factor &lt;= maxFactor; ++factor) {\n         if (number % factor == 0) {   // Factor?\n            cout &lt;&lt; number &lt;&lt; \" \";\n            break;   // A factor found, no need to search for more factors\n         }\n      }\n   }\n   cout &lt;&lt; endl;\n   return 0;\n}\n</code></pre> <p>\u91cd\u5199\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u4ee5\u5217\u51fa\u6240\u6709\u7684\u8d28\u6570\u3002\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3a <code>isPrime</code> \u7684 <code>boolean</code> \u6807\u5fd7\u6765\u6307\u793a\u5f53\u524d\u7684 <code>number</code> \u662f\u5426\u4e3a\u7d20\u6570\u3002\u7136\u540e\u7528\u5b83\u6765\u63a7\u5236\u6253\u5370\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nint main() {\n   int upperbound;\n   cout &lt;&lt; \"Enter the upperbound: \";\n   cin &gt;&gt; upperbound;\n   for (int number = 2; number &lt;= upperbound; ++number) {\n      // Not a prime, if there is a factor between 2 and sqrt(number)\n      int maxFactor = (int)sqrt(number);\n      bool isPrime = true;  // boolean flag to indicate whether number is a prime\n      for (int factor = 2; factor &lt;= maxFactor; ++factor) {\n         if (number % factor == 0) {   // Factor?\n            isPrime = false;   // number is not a prime\n            break;   // A factor found, no need to search for more factors\n         }\n      }\n      if (isPrime) cout &lt;&lt; number &lt;&lt; \" \";\n   }\n   cout &lt;&lt; endl;\n   return 0;\n}\n</code></pre> <p>\u91cd\u5199\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u4e0d\u4f7f\u7528 <code>break</code> \u8bed\u53e5\u3002\u4f7f\u7528 <code>while</code> \u5faa\u73af\uff08\u7531 <code>boolean</code> \u6807\u5fd7\u63a7\u5236\uff09\u6765\u4ee3\u66ff\u5e26\u6709 <code>break</code> \u7684 <code>for</code> \u5faa\u73af\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nint main() {\n   int upperbound;\n   cout &lt;&lt; \"Enter the upperbound: \";\n   cin &gt;&gt; upperbound;\n\n   for (int number = 2; number &lt;= upperbound; ++number) {\n      // Not prime, if there is a factor between 2 and sqrt of number\n      int maxFactor = (int)sqrt(number);\n      bool isPrime = true;\n      int factor = 2;\n      while (isPrime &amp;&amp; factor &lt;= maxFactor) {\n         if (number % factor == 0) {   // Factor of number?\n             isPrime = false;\n         }\n         ++factor;\n      }\n      if (isPrime) cout &lt;&lt; number &lt;&lt; \" \";\n   }\n   cout &lt;&lt; endl;\n   return 0;\n}\n</code></pre> <p>\u793a\u4f8b\uff08\u7ee7\u7eed\uff09\uff1a</p> <pre><code>// Sum 1 to upperbound, exclude 11, 22, 33,...\nint upperbound = 100;\nint sum = 0;\nfor (int number = 1; number &lt;= upperbound; ++number) {\n   if (number % 11 == 0) continue;  // Skip the rest of the loop body, continue to the next iteration\n   sum += number;\n}\n// It is better to re-write the loop as:\nfor (int number = 1; number &lt;= upperbound; ++number) {\n   if (number % 11 != 0) sum += number;\n</code></pre> <p>\u793a\u4f8b\uff08break \u548c continue\uff09\uff1a\u7814\u7a76\u4ee5\u4e0b\u7a0b\u5e8f\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   int number = 1;\n   while (true) {\n      ++number;\n      if ((number % 3) == 0) continue;\n      if (number == 133) break;\n      if ((number % 2) == 0) {\n         number += 3;\n      } else {\n         number -= 3;\n      }\n      cout &lt;&lt; number &lt;&lt; \" \";\n   }\n   cout &lt;&lt; endl;\n   return 0;\n}\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#155","title":"15.5 \u7ec8\u6b62\u7a0b\u5e8f <p>\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5728\u5230\u8fbe\u7a0b\u5e8f\u8bed\u53e5\u7ed3\u675f\u4e4b\u524d\u7ec8\u6b62\u4f60\u7684\u7a0b\u5e8f\u3002</p> <p>exit(): \u53ef\u4ee5\u8c03\u7528\u51fd\u6570 <code>exit(int exitCode)</code> \uff0c\u5728 <code>&lt;cstdlib&gt;</code> \u4e2d\uff08\u4ece C \u7684\u201c <code>stdlib.h</code> \u201d\u79fb\u690d\u800c\u6765\uff09\uff0c\u4ee5\u7ec8\u6b62\u7a0b\u5e8f\u5e76\u5c06\u63a7\u5236\u6743\u8fd4\u56de\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u3002\u6309\u7167\u60ef\u4f8b\uff0c\u8fd4\u56de\u4ee3\u7801\u4e3a\u96f6\u8868\u793a\u6b63\u5e38\u7ec8\u6b62\uff1b\u800c\u975e\u96f6\u7684 <code>exitCode</code> (-1) \u8868\u793a\u5f02\u5e38\u7ec8\u6b62\u3002\u4f8b\u5982\uff0c</p> <p>abort()\uff1a\u5934\u6587\u4ef6\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u4e3aabort()\u7684\u51fd\u6570\uff0c\u53ef\u7528\u4e8e\u5f02\u5e38\u7ec8\u6b62\u7a0b\u5e8f <pre><code>if (errorCount &gt; 10) {\n   cout &lt;&lt; \"too many errors\" &lt;&lt; endl;\n   exit(-1);  // Terminate the program\n              // OR abort();\n}\n</code></pre> <p>\"return\" \u8bed\u53e5\uff1a\u60a8\u4e5f\u53ef\u4ee5\u5728 <code>main()</code> \u51fd\u6570\u4e2d\u4f7f\u7528 \" <code>return *returnValue*</code> \" \u8bed\u53e5\u6765\u7ec8\u6b62\u7a0b\u5e8f\u5e76\u5c06\u63a7\u5236\u6743\u8fd4\u56de\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u3002\u4f8b\u5982\uff0c</p> <pre><code>int main() {\n   ...\n   if (errorCount &gt; 10) {\n      cout &lt;&lt; \"too many errors\" &lt;&lt; endl;\n      return -1;  // Terminate and return control to OS from main()\n   }\n   ...\n}\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#156","title":"15.6 \u5d4c\u5957\u5faa\u73af <p>\u4e0b\u9762\u7684\u56fe\u8868\u5c55\u793a\u4e86\u5d4c\u5957\u7684 for \u5faa\u73af\uff0c\u5373\u4e00\u4e2a\u5185\u90e8 for \u5faa\u73af\u5d4c\u5957\u5728\u4e00\u4e2a\u5916\u90e8 for \u5faa\u73af\u4e2d\u3002</p> <p></p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   int size = 8;\n   for (int row = 1; row &lt;= size; ++row) {     // Outer loop to print all the rows\n      for (int col = 1; col &lt;= size; ++col) {  // Inner loop to print all the columns of each row\n         cout &lt;&lt; \"# \";\n      }\n      cout &lt;&lt; endl;   // A row ended, bring the cursor to the next line\n   }\n\n   return 0;\n}\n</code></pre> <pre><code># # # # # # # #\n# # # # # # # #\n# # # # # # # #\n# # # # # # # #\n# # # # # # # #\n# # # # # # # #\n# # # # # # # #\n# # # # # # # #\n</code></pre> <p>\u8fd9\u4e2a\u7a0b\u5e8f\u5305\u542b\u4e24\u4e2a\u5d4c\u5957\u7684 for \u5faa\u73af\u3002\u5185\u5c42\u5faa\u73af\u7528\u4e8e\u6253\u5370\u4e00\u884c\u516b\u4e2a\u201c <code>#</code>\u201d\uff0c\u968f\u540e\u6253\u5370\u4e00\u4e2a\u6362\u884c\u7b26\u3002\u5916\u5c42\u5faa\u73af\u91cd\u590d\u5185\u5c42\u5faa\u73af\u4ee5\u6253\u5370\u6240\u6709\u884c\u3002</p> <p>\u5047\u8bbe\u4f60\u60f3\u6253\u5370\u8fd9\u4e2a\u56fe\u6848</p> <pre><code># # # # # # # #\n # # # # # # # #\n# # # # # # # #\n # # # # # # # #\n# # # # # # # #\n # # # # # # # #\n# # # # # # # #\n # # # # # # # #\n</code></pre> <p>\u4f60\u9700\u8981\u5728\u5076\u6570\u884c\u6253\u5370\u4e00\u4e2a\u989d\u5916\u7684\u7a7a\u683c\u3002\u4f60\u53ef\u4ee5\u5728\u7b2c 8 \u884c\u4e4b\u524d\u6dfb\u52a0\u4ee5\u4e0b\u8bed\u53e5\u6765\u5b9e\u73b0\u3002</p> <pre><code>if ((row % 2) == 0) {   // print a leading space for even-numbered rows\n   cout &lt;&lt; \" \";\n}\n</code></pre> <p>Print these patterns using nested loop (in a program called <code>PrintPattern1x</code>). Use a variable called <code>size</code> for the size of the pattern and try out various sizes. You should use as few printing statements as possible.</p> <pre><code> # * # * # * # *    # # # # # # # #    # # # # # # # #    1                                1\n# * # * # * # *     # # # # # # #        # # # # # # #    2 1                            1 2\n # * # * # * # *    # # # # # #            # # # # # #    3 2 1                        1 2 3\n# * # * # * # *     # # # # #                # # # # #    4 3 2 1                    1 2 3 4\n # * # * # * # *    # # # #                    # # # #    5 4 3 2 1                1 2 3 4 5\n# * # * # * # *     # # #                        # # #    6 5 4 3 2 1            1 2 3 4 5 6\n # * # * # * # *    # #                            # #    7 6 5 4 3 2 1        1 2 3 4 5 6 7\n# * # * # * # *     #                                #    8 7 6 5 4 3 2 1    1 2 3 4 5 6 7 8\n     (a)                  (b)                (c)                (d)                (e)\n</code></pre> <p>(a)</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int size = 8;\n    for (int row = 1; row &lt;= size; ++row) {\n        if ((row % 2) != 0) {\n            cout &lt;&lt; \" \";\n        }\n        for (int col = 1; col &lt;= size; ++col) {\n            if ((col % 2) != 0) {\n                cout &lt;&lt; \"# \";\n            }else {\n                cout &lt;&lt; \"* \";\n            }\n        }\n        cout &lt;&lt; endl;\n    }\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; \"(b)\" &lt;&lt; endl;\n    for (int row = 1; row &lt;= size; ++row) {\n        for (int col = 1; col &lt;= size - row + 1; ++col) {\n            cout &lt;&lt; \"# \";\n        }\n        cout &lt;&lt; endl;\n    }\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; \"(c)\" &lt;&lt; endl;\n    for (int row = 1; row &lt;= size; ++row) {\n        for (int col = 1; col &lt;= size ; ++col) {\n            if (col &gt;= row) {\n                cout &lt;&lt; \"# \";\n            }\n            else {\n                cout &lt;&lt; \"  \";\n            }\n        }\n        cout &lt;&lt; endl;\n    }\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; \"(d)\" &lt;&lt; endl;\n    for (int row = 1; row &lt;= size; ++row) {\n        for (int num = row; num &gt;=1; --num) {\n            cout &lt;&lt; num&lt;&lt;\" \";\n        }\n        cout &lt;&lt; endl;\n    }\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"(e)\" &lt;&lt; endl;\n    for (int row = 1; row &lt;= size; ++row) {\n        for (int col = 1; col &lt;= size; ++col) {\n            if (col &gt;= size - row +1) {\n                int num = col - (size - row);\n                cout &lt;&lt; num &lt;&lt; \" \";\n            }\n            else {\n                cout &lt;&lt; \"  \";\n            }\n        }\n        cout &lt;&lt; endl;\n    }\n}\n</code></pre> <p>\u4e58\u6cd5\u8868\u6253\u5370\uff08<code>if-else</code>)</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int size = 9;\n    for (int row = 1; row &lt;= size; ++row) {\n        for (int col = 1; col &lt;= size; ++col) {\n            int product = row * col;\n            if (product &lt; 10) {\n                cout &lt;&lt; \"  \" &lt;&lt; product;\n            }\n            else {\n                cout &lt;&lt; \" \" &lt;&lt; product;\n            }\n        }\n        cout &lt;&lt; endl;\n    }\n}\n</code></pre> <p>\u4f7f\u7528\u5d4c\u5957\u5faa\u73af\u6253\u5370\u8fd9\u4e9b\u56fe\u6848\u3002</p> <pre><code># # # # # # #      # # # # # # #      # # # # # # #      # # # # # # #      # # # # # # #\n#           #        #                          #          #       #        # #       # #\n#           #          #                      #              #   #          #   #   #   #\n#           #            #                  #                  #            #     #     #\n#           #              #              #                  #   #          #   #   #   #\n#           #                #          #                  #       #        # #       # #\n# # # # # # #      # # # # # # #      # # # # # # #      # # # # # # #      # # # # # # #\n     (a)                 (b)               (c)                (d)                (e)\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#157","title":"15.7\u6d41\u91cf\u63a7\u5236\u7684\u4e00\u4e9b\u95ee\u9898 <p>Dangling else: \u60ac\u6302else\u95ee\u9898\u53ef\u4ee5\u5982\u4e0b\u8bf4\u660e\uff1a</p> <pre><code>if (i == 0)\n   if (j == 0)\n      cout &lt;&lt; \"i and j are zero\" &lt;&lt; endl;\nelse cout &lt;&lt; \"i is not zero\" &lt;&lt; endl;   // intend for the outer-if\n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u7684 <code>else</code> \u5b50\u53e5\u5728\u8bed\u6cd5\u4e0a\u9002\u7528\u4e8e outer-if \u548c inner-if\u3002C++ \u7f16\u8bd1\u5668\u603b\u662f\u5c06 <code>else</code> \u5b50\u53e5\u4e0e\u6700\u5185\u5c42\u7684 if\uff08\u5373\u6700\u8fd1\u7684 if\uff09\u76f8\u5173\u8054\u3002\u60ac\u6302\u7684 else \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u660e\u786e\u7684\u62ec\u53f7\u6765\u89e3\u51b3\u3002\u4e0a\u9762\u7684\u4ee3\u7801\u5728\u903b\u8f91\u4e0a\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u9700\u8981\u5982\u4e0b\u6240\u793a\u4f7f\u7528\u660e\u786e\u7684\u62ec\u53f7\u3002</p> <pre><code>f ( i == 0) {\n   if (j == 0) cout &lt;&lt; \"i and j are zero\" &lt;&lt; endl;\n} else {\n   cout &lt;&lt; \"i is not zero\" &lt;&lt; endl;   // non-ambiguous for outer-if\n}\n</code></pre> <p>Endless Loop: The following constructs: \u65e0\u7a77\u5faa\u73af\uff1a\u4ee5\u4e0b\u7ed3\u6784\uff1a</p> <pre><code>while (true) { ...... }\n</code></pre> <p>\u5e38\u88ab\u4f7f\u7528\u3002\u5b83\u770b\u8d77\u6765\u50cf\u662f\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\uff08\u6216\u65e0\u7a77\u5faa\u73af\uff09\uff0c\u4f46\u901a\u5e38\u901a\u8fc7\u5faa\u73af\u4f53\u5185\u7684 <code>break</code> \u6216 <code>return</code> \u8bed\u53e5\u6765\u7ec8\u6b62\u3002\u8fd9\u79cd\u4ee3\u7801\u96be\u4ee5\u9605\u8bfb - \u5982\u679c\u53ef\u80fd\uff0c\u901a\u8fc7\u91cd\u5199\u6761\u4ef6\u6765\u907f\u514d\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#16","title":"16 \u7f16\u5199\u6b63\u786e\u4e14\u4f18\u79c0\u7684\u7a0b\u5e8f <p>\u7f16\u5199\u80fd\u591f\u4ea7\u751f\u6b63\u786e\u7ed3\u679c\u7a0b\u5e8f\u975e\u5e38\u91cd\u8981\u3002\u540c\u6837\u91cd\u8981\u7684\u662f\u7f16\u5199\u5176\u4ed6\u4eba\uff08\u4ee5\u53ca\u4e09\u5929\u540e\u7684\u81ea\u5df1\uff09\u80fd\u591f\u7406\u89e3\u7684\u7a0b\u5e8f\uff0c\u8fd9\u6837\u7684\u7a0b\u5e8f\u624d\u662f\u80fd\u88ab\u79f0\u4e3a\u597d\u7684\u7a0b\u5e8f\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#_5","title":"\u5efa\u8bae <ul> <li>\u9075\u5faa\u65e2\u5b9a\u7684\u60ef\u4f8b\uff0c\u4ee5\u4fbf\u6bcf\u4e2a\u4eba\u90fd\u80fd\u6709\u76f8\u540c\u7684\u7406\u89e3\u57fa\u7840\u3002</li> <li>\u6e90\u4ee3\u7801\u7684\u683c\u5f0f\u548c\u5e03\u5c40\u5e94\u4f7f\u7528\u9002\u5f53\u7684\u7f29\u8fdb\u3001\u7a7a\u683c\u548c\u7a7a\u884c\u3002\u7f29\u8fdb\u4f7f\u75283\u62164\u4e2a\u7a7a\u683c\uff0c\u5e76\u4f7f\u7528\u7a7a\u884c\u5206\u9694\u4ee3\u7801\u6bb5\u3002</li> <li>\u9009\u62e9\u5177\u6709\u81ea\u63cf\u8ff0\u6027\u548c\u610f\u4e49\u7684\u597d\u540d\u5b57\uff08\u5982<code>row</code>,<code>col</code>,<code>size</code>,<code>xMax</code>,<code>numStudents</code>.)\u4e0d\u8981\u4f7f\u7528\u6ca1\u6709\u610f\u4e49\u7684\u540d\u79f0\uff0c\u4f8b\u5982 a, b, c, d.\u907f\u514d\u4f7f\u7528\u5355\u4e2a\u5b57\u6bcd\u7684\u540d\u79f0\uff0c\u9664\u975e\u662f\u5e38\u89c1\u540d\u79f0\u5982 x, y, z,\u7528\u4e8e\u5750\u6807\uff0ci\u7528\u4e8e\u7d22\u5f15\u3002</li> <li>\u63d0\u4f9b\u6ce8\u91ca\u4ee5\u89e3\u91ca\u91cd\u8981\u4e14\u7a81\u51fa\u7684\u6982\u5ff5\u3002\u5927\u91cf\u6ce8\u91ca\u4f60\u7684\u4ee3\u7801\u3002</li> <li>\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\u540c\u65f6\u7f16\u5199\u7a0b\u5e8f\u6587\u6863\u3002</li> <li>\u907f\u514d\u4f7f\u7528\u975e\u7ed3\u6784\u5316\u7684\u6784\u9020\uff0c\u4f8b\u5982 <code>break</code> \u548c <code>continue</code> \uff0c\u8fd9\u4e9b\u6784\u9020\u96be\u4ee5\u7406\u89e3\u3002</li> <li>\u4f7f\u7528\u201c\u7b49\u5bbd\u201d\u5b57\u4f53\uff08\u5982 Consola\u3001Courier New\u3001Courier\uff09\u6765\u7f16\u5199/\u663e\u793a\u60a8\u7684\u7a0b\u5e8f\u3002</li> </ul>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#161","title":"16.1 \u7f16\u7a0b\u9519\u8bef <p>\u7f16\u7a0b\u9519\u8bef\u901a\u5e38\u5206\u4e3a\u4e09\u7c7b\uff1a</p> <ul> <li>\u7f16\u8bd1\u9519\u8bef\uff08\u6216\u8bed\u6cd5\u9519\u8bef\uff09\uff1a\u53ef\u4ee5\u8f7b\u677e\u4fee\u590d\u3002</li> <li>\u8fd0\u884c\u65f6\u9519\u8bef\uff1a\u7a0b\u5e8f\u63d0\u524d\u505c\u6b62\u800c\u672a\u4ea7\u751f\u7ed3\u679c - \u4e5f\u53ef\u4ee5\u8f7b\u677e\u4fee\u590d\u3002</li> <li>\u903b\u8f91\u9519\u8bef\uff1a\u7a0b\u5e8f\u53ef\u4ee5\u5b8c\u6210\u4f46\u4ea7\u751f\u9519\u8bef\u7684\u7ed3\u679c\u3002\u5982\u679c\u7a0b\u5e8f\u603b\u662f\u4ea7\u751f\u9519\u8bef\u7ed3\u679c\uff0c\u5f88\u5bb9\u6613\u68c0\u6d4b\u3002\u5982\u679c\u7a0b\u5e8f\u5927\u90e8\u5206\u65f6\u95f4\u4ea7\u751f\u6b63\u786e\u7ed3\u679c\uff0c\u4f46\u6709\u65f6\u4ea7\u751f\u9519\u8bef\u7ed3\u679c\uff0c\u5219\u6781\u96be\u4fee\u590d\u3002\u4f8b\u5982\uff0c</li> </ul> <pre><code>// Can compile and execute, but give wrong result \u2013 sometimes!\nif (mark &gt; 50) {\n   cout &lt;&lt; \"PASS\" &lt;&lt; endl;\n} else {\n   cout &lt;&lt; \"FAIL\" &lt;&lt; endl;\n}\n</code></pre> <p>\u5982\u679c\u5728\u751f\u4ea7\u524d\u6ca1\u6709\u53d1\u73b0\u8fd9\u7c7b\u9519\u8bef\uff0c\u540e\u679c\u4f1a\u975e\u5e38\u4e25\u91cd\u3002\u7f16\u5199\u4f18\u8d28\u7a0b\u5e8f\u6709\u52a9\u4e8e\u51cf\u5c11\u548c\u68c0\u6d4b\u8fd9\u4e9b\u9519\u8bef\u3002\u9700\u8981\u4e00\u4e2a\u597d\u7684\u6d4b\u8bd5\u7b56\u7565\u6765\u786e\u4fdd\u7a0b\u5e8f\u7684\u6b63\u786e\u6027\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#17","title":"17 \u5b57\u7b26\u4e32 <p>C++\u652f\u6301\u4fe9\u79cd\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff1a</p> <ul> <li>\u539f\u59cbC\u98ce\u683c\u5b57\u7b26\u4e32\uff1a\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a<code>char</code>\u6570\u7ec4\uff0c\u4ee5<code>NULL</code>\u5b57\u7b26<code>'\\0'</code>\uff08\u5341\u516d\u8fdb\u52360\uff09\u7ec8\u6b62\u3002\u5b83\u4e5f\u88ab\u79f0\u4e3a\u5b57\u7b26\u4e32\u6216C\u98ce\u683c\u5b57\u7b26\u4e32\u3002</li> <li>C++98\u4e2d\u5f15\u5165\u65b0\u7684<code>string</code>\u7c7b\u3002</li> </ul> <p>\u63a8\u8350\u4f7f\u7528\u201chigh-level\u201d <code>string</code> \u7c7b\uff0c\u56e0\u4e3a\u5b83\u66f4\u5bb9\u6613\u4f7f\u7528\u548c\u7406\u89e3\u3002\u7136\u800c\uff0c\u8bb8\u591a\u9057\u7559\u7a0b\u5e8f\u4f7f\u7528\u4e86 C-strings\uff1b\u8bb8\u591a\u7a0b\u5e8f\u5458\u4e5f\u4f7f\u7528\u201clow-level\u201d C-strings \u4ee5\u83b7\u5f97\u5b8c\u5168\u63a7\u5236\u548c\u6548\u7387\uff1b\u6b64\u5916\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5982\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u53ea\u652f\u6301 C-strings\u3002\u56e0\u6b64\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u4e86\u89e3\u8fd9\u4e24\u5957\u5b57\u7b26\u4e32\u3002\u7136\u800c\uff0c\u9664\u975e\u7edd\u5bf9\u5fc5\u8981\uff0c\u5426\u5219\u907f\u514d\u4f7f\u7528 C-string\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#171","title":"17.1 \u5b57\u7b26\u4e32\u58f0\u660e\u548c\u521d\u59cb\u5316 <p>\u8981\u4f7f\u7528 <code>string</code> \u7c7b\uff0c\u8bf7\u5305\u542b <code>&lt;string&gt;</code> \u5934\u6587\u4ef6\u548c \" <code>using namespace std</code> \"\u3002</p> <p>\u4f60\u53ef\u4ee5\u58f0\u660e\u5e76 (a) \u7528\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u521d\u59cb\u5316\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c(b) \u521d\u59cb\u5316\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u6216\u8005 (c) \u7528\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u5bf9\u8c61\u521d\u59cb\u5316\u3002\u4f8b\u5982\uff0c</p> <pre><code>#include &lt;string&gt;\nusing namespace std;\n\nstring str1(\"Hello\");  // Initialize with a string literal (Implicit initialization)\nstring str2 = \"world\"; // Initialize with a string literal (Explicit initialization via assignment operator)\nstring str3;           // Initialize to an empty string\nstring str4(str1);     // Initialize by copying from an existing string object\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#172","title":"17.2\u5b57\u7b26\u4e32\u8f93\u5165/\u8f93\u51fa <pre><code>/* Testing string class input and output (TestStringIO.cpp) */\n#include &lt;iostream&gt;\n#include &lt;string&gt;     // Need this header to use string class\n#include &lt;limits&gt;\nusing namespace std;  // Also needed for &lt;string&gt;\n\nint main() {\n   string message(\"Hello\");\n   cout &lt;&lt; message &lt;&lt; endl;\n\n   // Input a word (delimited by space) into a string\n   cout &lt;&lt; \"Enter a message (no space): \";\n   cin &gt;&gt; message;\n   cout &lt;&lt; message &lt;&lt; endl;\n\n   cin.ignore(numeric_limits&lt;streamsize&gt;::max(), '\\n');\n      // flush cin up to newline (need &lt;limits&gt; header)\n\n   // Input a line into a string\n   cout &lt;&lt; \"Enter a message (with spaces): \";\n   getline(cin, message);  // Read input from cin into message\n   cout &lt;&lt; message &lt;&lt; endl;\n   return 0;\n}\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#173","title":"17.3 \u5b57\u7b26\u4e32\u64cd\u4f5c <ul> <li>\u68c0\u67e5\u5b57\u7b26\u4e32\u957f\u5ea6</li> </ul> <pre><code>int length();\nint size();\n   both of them return the length of the string\n</code></pre> <pre><code>#include &lt;string&gt;\nstring str(\"Hello, world\");\ncout &lt;&lt; str.length() &lt;&lt; endl;  // 12\ncout &lt;&lt; str.size()   &lt;&lt; endl;  // 12\n</code></pre> <ul> <li>\u68c0\u67e5\u7a7a\u5b57\u7b26\u4e32\uff1a</li> </ul> <pre><code>bool empty();\n   Check if the string is empty.\n</code></pre> <pre><code>string str1(\"Hello, world\");\nstring str2;                   // Empty string\ncout &lt;&lt; str1.empty() &lt;&lt; endl;  // 0 (false)\ncout &lt;&lt; str2.empty() &lt;&lt; endl;  // 1 (true)\n</code></pre> <ul> <li>\u4ece\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u590d\u5236\uff1a\u53ea\u9700\u4f7f\u7528\u8d4b\u503c\uff08 <code>=</code> \uff09\u8fd0\u7b97\u7b26\u3002</li> </ul> <pre><code>string str1(\"Hello, world\"), str2;\nstr2 = str1;\ncout &lt;&lt; str2 &lt;&lt; endl;   // Hello, world\n</code></pre> <ul> <li>\u4e0e\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fde\u63a5\uff1a\u4f7f\u7528\u52a0\u53f7 (+) \u8fd0\u7b97\u7b26\uff0c\u6216\u590d\u5408\u52a0\u53f7 ( <code>+=</code> ) \u8fd0\u7b97\u7b26\u3002</li> </ul> <pre><code>string str1(\"Hello,\");\nstring str2(\" world\");\ncout &lt;&lt; str1 + str2 &lt;&lt; endl;  // \"Hello, world\"\ncout &lt;&lt; str1 &lt;&lt; endl;         // \"Hello,\"\ncout &lt;&lt; str2 &lt;&lt; endl;         // \" world\"\nstr1 += str2;\ncout &lt;&lt; str1 &lt;&lt; endl;  // \"Hello, world\"\ncout &lt;&lt; str2 &lt;&lt; endl;  // \" world\"\nstring str3 = str1 + str2;\ncout &lt;&lt; str3 &lt;&lt; endl;  // \"Hello, world world\"\nstr3 += \"again\";\ncout &lt;&lt; str3 &lt;&lt; endl;  // \"Hello, world worldagain\"\n</code></pre> <ul> <li>\u8bfb\u5199\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u4e2a\u5b57\u7b26\uff1a</li> </ul> <pre><code>char&amp; at(int index);\n   Return the char at index, index begin at 0. Perform index bound check.\n\n[]\n   indexing (subscript) operator, no index bound check\n</code></pre> <pre><code>string str(\"Hello, world\");\ncout &lt;&lt; str.at(0) &lt;&lt; endl;  // 'H'\ncout &lt;&lt; str[1] &lt;&lt; endl;     // 'e'\ncout &lt;&lt; str.at(str.length() - 1) &lt;&lt; endl;  // 'd'\n\nstr.at(1) = 'a';  // Write to index 1\ncout &lt;&lt; str &lt;&lt; endl;  // \"Hallo, world\"\n\nstr[0] = 'h';\ncout &lt;&lt; str &lt;&lt; endl;  // \"hallo, world\"\n</code></pre> <ul> <li>\u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\uff1a</li> </ul> <pre><code>string substr(int beginIndex, int size);\n   Return the sub-string starting at beginIndex, of size\n</code></pre> <pre><code>string str(\"Hello, world\");\ncout &lt;&lt; str.substr(2, 6) &lt;&lt; endl;  // \"llo, w\n</code></pre> <ul> <li>\u4e0e\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u6bd4\u8f83\uff1a</li> </ul> <pre><code>int compare(string another);\n   Compare the content of this string with the given another. \n   Return 0 if equals; a negative value if this string is less than another; positive value otherwise.\n\n== and != Operators\n   Compare the contents of two strings\n</code></pre> <pre><code>string str1(\"Hello\"), str2(\"Hallo\"), str3(\"hello\"), str4(\"Hello\");\ncout &lt;&lt; str1.compare(str2) &lt;&lt; endl;   // 1   'e' &gt; 'a'\ncout &lt;&lt; str1.compare(str3) &lt;&lt; endl;   // -1  'h' &lt; 'H'\ncout &lt;&lt; str1.compare(str4) &lt;&lt; endl;   // 0\n\n// You can also use the operator == or !=\nif (str1 == str2) cout &lt;&lt; \"Same\" &lt;&lt; endl;\nif (str3 != str4) cout &lt;&lt; \"Different\" &lt;&lt; endl;\ncout &lt;&lt; boolalpha;  // print bool as true/false\ncout &lt;&lt; (str1 != str2) &lt;&lt; endl;\ncout &lt;&lt; (str1 == str4) &lt;&lt; endl;\n</code></pre> <ul> <li>\u641c\u7d22/\u66ff\u6362\u5b57\u7b26\uff1a\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>&lt;algorithm&gt;</code> \u4e2d\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u4f8b\u5982 <code>replace()</code> \u3002\u4f8b\u5982\uff0c</li> </ul> <pre><code>#include &lt;algorithm&gt;\n......\nstring str(\"Hello, world\");\nreplace(str.begin(), str.end(), 'l', '_');\ncout &lt;&lt; str &lt;&lt; endl;      // \"He__o, wor_d\"\n</code></pre> <pre><code>/* Example on C++ string function (TestStringOp.cpp) */\n#include &lt;iostream&gt;\n#include &lt;string&gt;    // use string class\nusing namespace std;\n\nint main() {\n   string msg = \"hello, world!\";\n   cout &lt;&lt; msg &lt;&lt; endl;\n   cout &lt;&lt; msg.length() &lt;&lt; endl;  // length of string\n   cout &lt;&lt; msg.at(1) &lt;&lt; endl;     // char at index 1\n   cout &lt;&lt; msg[1] &lt;&lt; endl;        // same as above\n   cout &lt;&lt; msg.empty() &lt;&lt; endl;   // test for empty string\n   cout &lt;&lt; msg.substr(3, 3) &lt;&lt; endl; // sub-string begins at\n                                     // pos 3 of size 3\n   cout &lt;&lt; msg.replace(3, 3, \"why\") &lt;&lt; endl; // replace sub-string\n   cout &lt;&lt; msg.append(\"end\") &lt;&lt; endl;        // append behind\n   cout &lt;&lt; msg + \"end\" &lt;&lt; endl;              // same as above\n   cout &lt;&lt; msg.insert(3, \"insert\") &lt;&lt; endl;  // insert after pos 3\n\n   string msg1;\n   msg1 = msg;   // copy\n   cout &lt;&lt; msg1 &lt;&lt; endl;\n\n   cout &lt;&lt; \"Enter a line: \";\n   getline(cin, msg);   // read a line of input\n   cout &lt;&lt; msg &lt;&lt; endl;\n}\n</code></pre> <pre><code>hello, world!\n13\ne\ne\n0\nlo,//\u5e94\u7528\u53c2\u6570 (3, 3):\n\u6211\u4eec\u4ece\u7d22\u5f15 3 \u5f00\u59cb\u3002\u8ba9\u6211\u4eec\u5728 \"hello, world!\" \u4e2d\u627e\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u5b57\u7b26\uff1a\n\u7d22\u5f15 0: 'h'\n\u7d22\u5f15 1: 'e'\n\u7d22\u5f15 2: 'l'\n\u7d22\u5f15 3: 'l' (\u8fd9\u662f\u7b2c\u4e8c\u4e2a 'l')\n\u6211\u4eec\u9700\u8981\u63d0\u53d6\u4ece\u7d22\u5f15 3 \u5f00\u59cb\u7684 3 \u4e2a\u5b57\u7b26\u3002\n\u63d0\u53d6\u5b57\u7b26:\n\u4ece\u7d22\u5f15 3 ('l') \u5f00\u59cb\uff0c\u63d0\u53d6 3 \u4e2a\u5b57\u7b26\uff1a\n\u7d22\u5f15 3 \u5904\u7684\u5b57\u7b26: 'l'\n\u7d22\u5f15 4 \u5904\u7684\u5b57\u7b26: 'o'\n\u7d22\u5f15 5 \u5904\u7684\u5b57\u7b26: ','\n\u7ed3\u679c: \u7531\u8fd9\u4e09\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b50\u5b57\u7b26\u4e32\u5c31\u662f \"lo,\"\u3002\nhelwhy world!\nhelwhy world!end\nhelwhy world!endend\nhelinsertwhy world!end\nhelinsertwhy world!end\nEnter a line: 124\n124\n</code></pre>  <p>[!CAUTION]</p> <p>C++\u662f\u4ece0\u5f00\u59cb\u7d22\u5f15\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u662fh.</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#18-io","title":"18 \u4f7f\u7528IO\u64cd\u7eb5\u5668\u683c\u5f0f\u5316\u8f93\u5165/\u8f93\u51fa\uff08\u5934\u6587\u4ef6\uff09 <p>\u4f7f\u7528 IO \u6574\u7406\u5668\u683c\u5f0f\u5316\u8f93\u5165/\u8f93\u51fa\uff08\u5934\u6587\u4ef6\uff09  \u6807\u5934\u63d0\u4f9b\u4e86\u6240\u8c13\u7684 I/O \u64cd\u7eb5\u5668\uff0c\u7528\u4e8e\u683c\u5f0f\u5316\u8f93\u5165\u548c\u8f93\u51fa\uff1a <ul> <li><code>setw(int field-width)</code> \uff1a\u8bbe\u7f6e\u4e0b\u4e00\u6b21 IO \u64cd\u4f5c\u7684\u5b57\u6bb5\u5bbd\u5ea6\u3002 <code>setw()</code> \u662f\u975e\u7c98\u6027\u7684\uff0c\u5fc5\u987b\u5728\u6bcf\u6b21 IO \u64cd\u4f5c\u4e4b\u524d\u53d1\u51fa\u3002\u6bcf\u6b21\u64cd\u4f5c\u540e\u5b57\u6bb5\u5bbd\u5ea6\u4f1a\u91cd\u7f6e\u4e3a\u9ed8\u8ba4\u503c\uff08\u5bbd\u5ea6\u521a\u597d\u8db3\u591f\u5bb9\u7eb3\u8be5\u5b57\u6bb5\uff09\u3002</li> <li><code>setfill(char fill-char)</code> : \u8bbe\u7f6e\u586b\u5145\u5b57\u7b26\u4ee5\u9002\u5e94\u5b57\u6bb5\u5bbd\u5ea6\u3002</li> <li><code>left|right|internal</code> : \u8bbe\u7f6e\u5bf9\u9f50\u65b9\u5f0f</li> <li><code>fixed/scientific</code> \uff08\u5bf9\u4e8e\u6d6e\u70b9\u6570\uff09\uff1a\u4f7f\u7528\u5b9a\u70b9\u8868\u793a\u6cd5\uff08\u4f8b\u5982\uff0c12.34\uff09\u6216\u79d1\u5b66\u8ba1\u6570\u6cd5\uff08\u4f8b\u5982\uff0c1.23e+006\uff09\u3002</li> <li><code>setprecision(int numDecimalDigits)</code> \uff08\u5bf9\u4e8e\u6d6e\u70b9\u6570\uff09\uff1a\u6307\u5b9a\u5c0f\u6570\u70b9\u540e\u7684\u4f4d\u6570\u3002</li> <li><code>boolalpha</code> / <code>noboolalpha</code> (\u5bf9\u4e8e <code>bool</code> ): \u5c06 <code>bool</code> \u503c\u663e\u793a\u4e3a\u5b57\u6bcd\u5b57\u7b26\u4e32 (true/false) \u6216 1/0\u3002</li> </ul>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#181","title":"18.1 \u8f93\u51fa\u683c\u5f0f\u5316 <pre><code>/* Test Formatting Output (TestFormattedOutput.cpp) */\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;    // Needed to do formatted I/O\nusing namespace std;\n\nint main() {\n   // Floating point numbers\n   double pi = 3.14159265;\n   cout &lt;&lt; fixed &lt;&lt; setprecision(4); // fixed format with 4 decimal places\n   cout &lt;&lt; pi &lt;&lt; endl;\n   cout &lt;&lt; \"|\" &lt;&lt; setw(8) &lt;&lt; pi &lt;&lt; \"|\" &lt;&lt; setw(10) &lt;&lt; pi &lt;&lt; \"|\" &lt;&lt; endl;\n      // setw() is not sticky, only apply to the next operation.\n   cout &lt;&lt; setfill('-');\n   cout &lt;&lt; \"|\" &lt;&lt; setw(8) &lt;&lt; pi &lt;&lt; \"|\" &lt;&lt; setw(10) &lt;&lt; pi &lt;&lt; \"|\" &lt;&lt; endl;\n   cout &lt;&lt; scientific;  // in scientific format with exponent\n   cout &lt;&lt; pi &lt;&lt; endl;\n\n   // booleans\n   bool done = false;\n   cout &lt;&lt; done &lt;&lt; endl;  // print 0 (for false) or 1 (for true)\n   cout &lt;&lt; boolalpha;     // print true or false\n   cout &lt;&lt; done &lt;&lt; endl;\n   return 0;\n}\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#182","title":"18.2 \u8f93\u5165\u683c\u5f0f\u5316 <pre><code>/* Test Formatting Input (TestFormattedInput.cpp) */\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main() {\n   string areaCode, phoneCode;\n   string inStr;\n\n   cout &lt;&lt; \"Enter your phone number in this format (xxx)xxx-xxxx : \";\n   cin.ignore();   // skip '('\n   cin &gt;&gt; setw(3) &gt;&gt; areaCode;\n   cin.ignore();   // skip ')'\n   cin &gt;&gt; setw(3) &gt;&gt; phoneCode;\n   cin.ignore();   // skip '-'\n   cin &gt;&gt; setw(4) &gt;&gt; inStr;\n   phoneCode += inStr;\n\n   cout &lt;&lt; \"Phone number is (\" &lt;&lt; areaCode &lt;&lt; \")\"\n        &lt;&lt; phoneCode.substr(0, 3) &lt;&lt; \"-\"\n        &lt;&lt; phoneCode.substr(3, 4) &lt;&lt; endl;\n   return 0;\n}\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#19","title":"19 \u6570\u7ec4","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#191","title":"19.1 \u6570\u7ec4\u58f0\u660e\u4e0e\u4f7f\u7528 <p>\u5047\u8bbe\u4f60\u60f3\u8ba1\u7b97\u4e00\u4e2a\u6709 30 \u540d\u5b66\u751f\u7684\u73ed\u7ea7\u7684\u5e73\u5747\u5206\u6570\uff0c\u4f60\u80af\u5b9a\u4e0d\u60f3\u521b\u5efa 30 \u4e2a\u53d8\u91cf\uff1a <code>mark1</code> , <code>mark2</code> , ..., <code>mark30</code> \u3002\u76f8\u53cd\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5305\u542b 30 \u4e2a\u5143\u7d20\u7684\u5355\u4e00\u53d8\u91cf\uff0c\u79f0\u4e3a\u6570\u7ec4\u3002</p> <p>\u6570\u7ec4\u662f\u4e00\u7ec4\u76f8\u540c\u7c7b\u578b\u7684\u5143\u7d20\u5217\u8868\uff0c\u7531\u4e00\u5bf9\u65b9\u62ec\u53f7 <code>[ ]</code> \u6807\u8bc6\u3002\u8981\u4f7f\u7528\u6570\u7ec4\uff0c\u60a8\u9700\u8981\u7528\u4e09\u4ef6\u4e8b\u6765\u58f0\u660e\u6570\u7ec4\uff1a\u540d\u79f0\u3001\u7c7b\u578b\u548c\u7ef4\u5ea6\uff08\u6216\u5927\u5c0f\uff0c\u6216\u957f\u5ea6\uff09\u3002\u8bed\u6cd5\u662f\uff1a</p> <pre><code>type arrayName[arraylength];  // arraylength can be a literal or a variable\n</code></pre> <p>\u6211\u5efa\u8bae\u4e3a\u6570\u7ec4\u4f7f\u7528\u590d\u6570\u540d\u79f0\uff0c\u4f8b\u5982\uff0c <code>marks</code> \uff0c <code>rows</code> \uff0c <code>numbers</code> \u3002\u4f8b\u5982\uff0c</p> <pre><code>int marks[5];        // Declare an int array called marks with 5 elements\ndouble numbers[10];  // Declare an double array of 10 elements\nconst int SIZE = 9;\nfloat temps[SIZE];   // Use const int as array length\n\n// Some compilers support an variable as array length, e.g.,\nint size;\ncout &lt;&lt; \"Enter the length of the array: \";\ncin &gt;&gt; size;\nfloat values[size];\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5728 C++ \u4e2d\uff0c\u5143\u7d20\u5728\u58f0\u660e\u540e\u7684\u503c\u662f\u672a\u5b9a\u4e49\u7684\u3002</p> <p>C++ \u6807\u51c6\u8981\u6c42\u5185\u7f6e\u6570\u7ec4\u7684\u5927\u5c0f\u5fc5\u987b\u5728\u7f16\u8bd1\u65f6\u5c31\u80fd\u786e\u5b9a\uff08\u5373\u5fc5\u987b\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\uff09\u3002</p> <p>\u8fd8\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u7528\u9017\u53f7\u5206\u9694\u7684\u503c\u5217\u8868\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// Declare and initialize an int array of 3 elements\nint numbers[3] = {11, 33, 44};\n// If length is omitted, the compiler counts the elements\nint numbers[] = {11, 33, 44};\n// Number of elements in the initialization shall be equal to or less than length\nint numbers[5] = {11, 33, 44};  // Remaining elements are zero. Confusing! Don't do this\nint numbers[2] = {11, 33, 44};  // ERROR: too many initializers\n\n// Use {0} or {} to initialize all elements to 0\nint numbers[5] = {0};  // First element to 0, the rest also to zero\nint numbers[5] = {};   // All element to 0 too\n</code></pre> <pre><code>/* Test local array initialization (TestArrayInit.cpp) */\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   int const SIZE = 5;\n\n   int a1[SIZE];   // Uninitialized\n   for (int i = 0; i &lt; SIZE; ++i) cout &lt;&lt; a1[i] &lt;&lt; \" \";\n   cout &lt;&lt; endl;   // ? ? ? ? ?\n\n   int a2[SIZE] = {21, 22, 23, 24, 25}; // All elements initialized\n   for (int i = 0; i &lt; SIZE; ++i) cout &lt;&lt; a2[i] &lt;&lt; \" \";\n   cout &lt;&lt; endl;   // 21 22 23 24 25\n\n   int a3[] = {31, 32, 33, 34, 35};   // Size deduced from init values\n   int a3Size = sizeof(a3)/sizeof(int);\n   cout &lt;&lt; \"Size is \" &lt;&lt; a3Size &lt;&lt; endl;   // 5\n   for (int i = 0; i &lt; a3Size; ++i) cout &lt;&lt; a3[i] &lt;&lt; \" \";\n   cout &lt;&lt; endl;   // 31 32 33 34 35\n\n   int a4[SIZE] = {41, 42};  // Leading elements initialized, the rests to 0\n   for (int i = 0; i &lt; SIZE; ++i) cout &lt;&lt; a4[i] &lt;&lt; \" \";\n   cout &lt;&lt; endl;   // 41 42 0 0 0\n\n   int a5[SIZE] = {0};  // First elements to 0, the rests to 0 too\n   for (int i = 0; i &lt; SIZE; ++i) cout &lt;&lt; a5[i] &lt;&lt; \" \";\n   cout &lt;&lt; endl;   // 0 0 0 0 0\n\n   int a6[SIZE] = {};   // All elements to 0 too\n   for (int i = 0; i &lt; SIZE; ++i) cout &lt;&lt; a6[i] &lt;&lt; \" \";\n   cout &lt;&lt; endl;   // 0 0 0 0 0\n}\n</code></pre> <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u65b9\u62ec\u53f7 <code>[ ]</code> \u5185\u7684\u7d22\u5f15\uff08\u6216\u4e0b\u6807\uff09\u6765\u5f15\u7528\u6570\u7ec4\u7684\u5143\u7d20\u3002C++ \u7684\u6570\u7ec4\u7d22\u5f15\u4ece\u96f6\u5f00\u59cb\u3002\u4f8b\u5982\uff0c\u5047\u8bbe <code>marks</code> \u662f\u4e00\u4e2a\u5305\u542b 5 \u4e2a\u5143\u7d20\u7684 <code>int</code> \u6570\u7ec4\uff0c\u90a3\u4e48\u8fd9 5 \u4e2a\u5143\u7d20\u5206\u522b\u662f\uff1a <code>marks[0]</code> \u3001 <code>marks[1]</code> \u3001 <code>marks[2]</code> \u3001 <code>marks[3]</code> \u548c <code>marks[4]</code> \u3002</p> <pre><code>// Declare &amp; allocate a 5-element int array\nint marks[5];\n// Assign values to the elements\nmarks[0] = 95;\nmarks[1] = 85;\nmarks[2] = 77;\nmarks[3] = 69;\nmarks[4] = 66;\ncout &lt;&lt; marks[0] &lt;&lt; endl;\ncout &lt;&lt; marks[3] + marks[4] &lt;&lt; endl;\n</code></pre> <p></p> <p>\u8981\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u63d0\u524d\u77e5\u9053\u6570\u7ec4\u7684\u957f\u5ea6\uff08\u6216\u5927\u5c0f\uff09\uff0c\u5e76\u76f8\u5e94\u5730\u8fdb\u884c\u5206\u914d\u3002\u4e00\u65e6\u6570\u7ec4\u88ab\u521b\u5efa\uff0c\u5176\u957f\u5ea6\u5c31\u56fa\u5b9a\u4e86\uff0c\u65e0\u6cd5\u66f4\u6539\u3002\u6709\u65f6\uff0c\u5f88\u96be\u786e\u5b9a\u6570\u7ec4\u7684\u957f\u5ea6\uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u73ed\u7ea7\u6709\u591a\u5c11\u5b66\u751f\uff1f\uff09\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4f60\u9700\u8981\u4f30\u8ba1\u957f\u5ea6\u5e76\u5206\u914d\u4e00\u4e2a\u4e0a\u9650\u3002\u8fd9\u53ef\u80fd\u662f\u4f7f\u7528\u6570\u7ec4\u7684\u4e3b\u8981\u7f3a\u70b9\u3002C++ \u6709\u4e00\u4e2a <code>vector</code> \u6a21\u677f\u7c7b\uff08\u5e76\u4e14 C++11 \u589e\u52a0\u4e86\u4e00\u4e2a <code>array</code> \u6a21\u677f\u7c7b\uff09\uff0c\u5b83\u652f\u6301\u52a8\u6001\u53ef\u8c03\u6574\u5927\u5c0f\u7684\u6570\u7ec4</p> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u8868\u8fbe\u5f0f <code>sizeof(arrayName)/sizeof(arrayName[0])</code> \u627e\u5230\u6570\u7ec4\u957f\u5ea6\uff0c\u5176\u4e2d <code>sizeof(arrayName)</code> \u8fd4\u56de\u6570\u7ec4\u7684\u603b\u5b57\u8282\u6570\uff0c <code>sizeof(arrayName[0])</code> \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5b57\u8282\u6570\u3002</p> <p>C/C++ \u4e0d\u4f1a\u6267\u884c\u6570\u7ec4\u7d22\u5f15\u8fb9\u754c\u68c0\u67e5\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u7d22\u5f15\u8d85\u51fa\u4e86\u6570\u7ec4\u7684\u8fb9\u754c\uff0c\u5b83\u4e0d\u4f1a\u53d1\u51fa\u8b66\u544a/\u9519\u8bef\u3002\u4f8b\u5982\uff0c</p> <pre><code>const int size = 5;\nint numbers[size];  // array index from 0 to 4\n\n// Index out of bound!\n// Can compiled and run, but could pose very serious side effect!\nnumbers[88] = 999;\ncout &lt;&lt; numbers[77] &lt;&lt; endl;\n</code></pre> <p>\u8fd9\u662f C/C++ \u7684\u53e6\u4e00\u4e2a\u9677\u9631\u3002\u68c0\u67e5\u7d22\u5f15\u8fb9\u754c\u4f1a\u6d88\u8017\u8ba1\u7b97\u80fd\u529b\u5e76\u5f71\u54cd\u6027\u80fd\u3002\u7136\u800c\uff0c\u5b89\u5168\u6bd4\u901f\u5ea6\u66f4\u91cd\u8981\u3002\u8f83\u65b0\u7684\u7f16\u7a0b\u8bed\u8a00\u5982 Java/C# \u4f1a\u6267\u884c\u6570\u7ec4\u7d22\u5f15\u8fb9\u754c\u68c0\u67e5\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#192","title":"19.2\u6570\u7ec4\u548c\u5faa\u73af <p>Arrays \u4e0e\u5faa\u73af\u5bc6\u5207\u914d\u5408\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5faa\u73af\u5904\u7406\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u4f8b\u5982\uff0c</p> <pre><code>/*\n *  Find the mean and standard deviation of numbers kept in an array (MeanStdArray.cpp).\n */\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;cmath&gt;\n#define SIZE 7\nusing namespace std;\n\nint main() {\n   int marks[] = {74, 43, 58, 60, 90, 64, 70};\n   int sum = 0;\n   int sumSq = 0;\n   double mean, stdDev;\n   for (int i = 0; i &lt; SIZE; ++i) {\n      sum += marks[i];\n      sumSq += marks[i]*marks[i];\n   }\n   mean = (double)sum/SIZE;\n   cout &lt;&lt; fixed &lt;&lt; \"Mean is \" &lt;&lt; setprecision(2) &lt;&lt; mean &lt;&lt; endl;\n\n   stdDev = sqrt((double)sumSq/SIZE - mean*mean);\n   cout &lt;&lt; fixed &lt;&lt; \"Std dev is \" &lt;&lt; setprecision(2) &lt;&lt; stdDev &lt;&lt; endl;\n\n   return 0;\n}\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#193-for-c11","title":"19.3 \u57fa\u4e8e\u8303\u56f4\u7684for\u5faa\u73af \uff08c++11\uff09 <p>C++11\u5f15\u5165\u4e86\u57fa\u4e8e\u8303\u56f4\u7684<code>for</code>\u5faa\u73af\uff08\u6216<code>for-each</code>\u5faa\u73af\uff09\u6765\u904d\u5386\u6570\u7ec4\u3002</p> <pre><code>/* Testing For-each loop (TestForEach.cpp) */\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   int numbers[] = {11, 22, 33, 44, 55};\n\n   // For each member called number of array numbers - read only \n   for (int number : numbers) {\n      cout &lt;&lt; number &lt;&lt; endl;\n   }\n\n   // To modify members, need to use reference (&amp;)\n   for (int &amp;number : numbers) {\n      number = 99;\n   }\n\n   for (int number : numbers) {\n      cout &lt;&lt; number &lt;&lt; endl;\n   }\n   return 0;\n}\n</code></pre> <pre><code>11\n22\n33\n44\n55\n99\n99\n99\n99\n99\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#194","title":"19.4 \u591a\u7ef4\u6570\u7ec4 <pre><code>int[2][3] = { {11, 22, 33}, {44, 55, 66} };\n</code></pre>  <p>\u5bf9\u4e8e 2D \u6570\u7ec4\uff08\u8868\uff09\uff0c\u7b2c\u4e00\u4e2a\u7d22\u5f15\u662f\u884c\u53f7\uff0c\u7b2c\u4e8c\u4e2a\u7d22\u5f15\u662f\u5217\u53f7\u3002\u5143\u7d20\u4ee5\u6240\u8c13\u7684\u884c\u4f18\u5148\u65b9\u5f0f\u5b58\u50a8\uff0c\u5176\u4e2d\u5217\u7d22\u5f15\u9996\u5148\u7528\u5b8c\u3002</p> <p>\u5728 C++ \u4e2d\u58f0\u660e\u591a\u7ef4\u6570\u7ec4\u65f6\uff0c\u5982\u679c\u60a8\u63d0\u4f9b\u4e86\u521d\u59cb\u5316\u5217\u8868\uff0c\u53ef\u4ee5\u7701\u7565\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002\u7f16\u8bd1\u5668\u5c06\u6839\u636e\u521d\u59cb\u5316\u5217\u8868\u4e2d\u4e3a\u8be5\u7ef4\u5ea6\u63d0\u4f9b\u7684\u5143\u7d20\u6570\u91cf\u6765\u786e\u5b9a\u5176\u5927\u5c0f\u3002\u4f46\u662f\uff0c\u60a8\u5fc5\u987b\u6307\u5b9a\u6240\u6709\u540e\u7eed\u7ef4\u5ea6\u7684\u5927\u5c0f\uff08\u5728\u6b64\u4f8b\u4e2d\uff0c\u662f\u5217\u6570 <code>[3]</code>\uff09\u3002</p> <pre><code>/* Test Multi-dimensional Array (Test2DArray.cpp) */\n#include &lt;iostream&gt;\nusing namespace std;\nvoid printArray(const int[][3], int);\n\nint main() {\n   int myArray[][3] = {{8, 2, 4}, {7, 5, 2}}; // 2x3 initialized\n                 // Only the first index can be omitted and implied\n   printArray(myArray, 2);\n   return 0;\n}\n\n// Print the contents of rows-by-3 array (columns is fixed)\nvoid printArray(const int array[][3], int rows) {\n   for (int i = 0; i &lt; rows; ++i) {\n      for (int j = 0; j &lt; 3; ++j) {\n         cout &lt;&lt; array[i][j] &lt;&lt; \" \";\n      }\n      cout &lt;&lt; endl;\n   }\n}\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#195-c-string","title":"19.5 \u5b57\u7b26\u6570\u7ec4-C-String <p>\u5728 C \u8bed\u8a00\u4e2d\uff0c\u5b57\u7b26\u4e32\u662f\u7531 NULL \u5b57\u7b26 <code>'\\0'</code>\uff08\u5341\u516d\u8fdb\u5236 <code>0</code> \u7684 ASCII \u4ee3\u7801\uff09\u7ec8\u6b62\u7684 <code>char</code> \u6570\u7ec4\u3002C++ \u5728\u6807\u5934 <code>&lt;string&gt;</code> \u4e0b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b0\u7684<code>\u5b57\u7b26\u4e32</code>\u7c7b\u3002C \u4e2d\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u79f0\u4e3a C \u5b57\u7b26\u4e32\uff08\u6216 C \u6837\u5f0f\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\u4e32\uff09\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5206\u914d C \u5b57\u7b26\u4e32\uff1a</p> <pre><code>char message[256];     // Declare a char array \n                       // Can hold a C-String of up to 255 characters terminated by '\\0'\nchar str1[] = \"Hello\"; // Declare and initialize with a \"string literal\".\n                       // The length of array is number of characters + 1 (for '\\0').\nchar str1char[] = {'H', 'e', 'l', 'l', 'o', '\\0'};  // Same as above\nchar str2[256] = \"Hello\";  // Length of array is 256, keeping a smaller string.\n</code></pre> <p>\u5bf9\u4e8e\u65b0\u624b\uff0c\u8bf7\u907f\u514d\u4f7f\u7528 C \u5b57\u7b26\u4e32\u3002\u4f7f\u7528\u524d\u9762\u8ba8\u8bba\u7684 C++ <code>\u5b57\u7b26\u4e32</code>\uff08\u5728\u6807\u5934 <code>&lt;string&gt;</code> \u4e2d\uff09\u3002</p>  <p>[!TIP]</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>cin</code> \u548c <code>cout</code> \u6765\u5904\u7406 C \u5b57\u7b26\u4e32\u3002</p> <ul> <li><code>cin &lt;&lt;</code> \u8bfb\u53d6\u7531\u7a7a\u683c\u5206\u9694\u7684\u5b57\u7b26\u4e32;</li> <li><code>cin.getline\uff08var\uff0c size\uff09</code> \u5c06\u5b57\u7b26\u4e32\u8bfb\u53d6\u5230 var \u76f4\u5230\u957f\u5ea6\u4e0d\u8d85\u8fc7 <code>size-1</code> \u7684\u6362\u884c\u7b26\uff0c\u4e22\u5f03\u6362\u884c\u7b26\uff08\u66ff\u6362\u4e3a <code>'\\0'</code>\uff09\u3002<code>\u5927\u5c0f</code>\u901a\u5e38\u5bf9\u5e94\u4e8e C \u5b57\u7b26\u4e32\u6570\u7ec4\u7684\u957f\u5ea6\u3002</li> <li><code>cin.get\uff08var\uff0c size\uff09</code> \u8bfb\u53d6\u5b57\u7b26\u4e32\u76f4\u5230\u6362\u884c\u7b26\uff0c\u4f46\u5c06\u6362\u884c\u7b26\u4fdd\u7559\u5728\u8f93\u5165\u7f13\u51b2\u533a\u4e2d\u3002</li> <li><code>cin.get\uff08\uff09</code> \u8bfb\u53d6\u4e0b\u4e00\u4e2a\u5b57\u7b26\u3002</li> </ul>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#20","title":"20 \u51fd\u6570","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#201","title":"20.1 \u4e3a\u4ec0\u4e48\u8981\u7528\u51fd\u6570 <p>\u6709\u65f6\uff0c\u4e00\u5b9a\u90e8\u5206\u4ee3\u7801\u5fc5\u987b\u591a\u6b21\u4f7f\u7528\u3002\u4e0e\u5176\u591a\u6b21\u91cd\u5199\u4ee3\u7801\uff0c\u4e0d\u5982\u5c06\u5b83\u4eec\u653e\u5165\u4e00\u4e2a\u201c\u5b50\u4f8b\u7a0b\u201d\u4e2d\uff0c\u5e76\u591a\u6b21\u201c\u8c03\u7528\u201d\u8fd9\u4e2a\u201c\u5b50\u4f8b\u7a0b\u201d\u2014\u2014\u4ee5\u4fbf\u4e8e\u7ef4\u62a4\u548c\u7406\u89e3\u3002\u5b50\u4f8b\u7a0b\u79f0\u4e3a\u65b9\u6cd5\uff08\u5728 Java \u4e2d\uff09\u6216\u51fd\u6570\uff08\u5728 C/C++ \u4e2d\uff09\u3002</p> <p>\u4f7f\u7528\u51fd\u6570\u7684\u597d\u5904\u662f\uff1a</p> <ul> <li>\u5206\u800c\u6cbb\u4e4b \uff1a\u4ece\u7b80\u5355\u7684\u5c0f\u5757\u6216\u7ec4\u4ef6\u6784\u5efa\u7a0b\u5e8f\u3002\u5c06\u7a0b\u5e8f\u6a21\u5757\u5316\u4e3a\u81ea\u5305\u542b\u7684\u4efb\u52a1\u3002</li> <li>\u907f\u514d\u91cd\u590d\u4ee3\u7801 \uff1a\u590d\u5236\u548c\u7c98\u8d34\u5f88\u5bb9\u6613\uff0c\u4f46\u5f88\u96be\u7ef4\u62a4\u548c\u540c\u6b65\u6240\u6709\u526f\u672c\u3002</li> <li>\u8f6f\u4ef6\u91cd\u7528 \uff1a\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u51fd\u6570\u6253\u5305\u5230\u5e93\u4ee3\u7801\u4e2d\u6765\u91cd\u7528\u5176\u4ed6\u7a0b\u5e8f\u4e2d\u7684\u51fd\u6570\u3002</li> </ul> <p>\u4f7f\u7528\u51fd\u6570\u6d89\u53ca\u4e24\u65b9\uff1a\u8c03\u7528\u51fd\u6570\u7684\u8c03\u7528\u65b9\u548c\u88ab\u8c03\u7528\u7684\u51fd\u6570 \u3002\u8c03\u7528\u65b9\u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u3002\u8be5\u51fd\u6570\u63a5\u6536\u8fd9\u4e9b\u53c2\u6570\uff0c\u5728\u51fd\u6570\u4f53\u5185\u6267\u884c\u7f16\u7a0b\u4f5c\uff0c\u5e76\u5c06\u4e00\u6bb5\u7ed3\u679c\u8fd4\u56de\u7ed9\u8c03\u7528\u65b9\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#202","title":"20.2\u4f7f\u7528\u51fd\u6570 <p>\u5047\u8bbe\u6211\u4eec\u9700\u8981\u591a\u6b21\u8ba1\u7b97\u4e00\u4e2a\u5706\u7684\u9762\u79ef\uff0c\u6700\u597d\u5199\u4e00\u4e2a\u53eb <code>getArea\uff08\uff09</code> \u7684\u51fd\u6570\uff0c\u9700\u8981\u7684\u65f6\u5019\u91cd\u7528\u5b83\u3002</p> <p></p> <pre><code>/* Test Function (TestFunction.cpp) */\n#include &lt;iostream&gt;\nusing namespace std;\nconst int PI = 3.14159265;\n\n// Function Prototype (Function Declaration)\ndouble getArea(double radius);\n\nint main() {\n   double radius1 = 1.1, area1, area2;\n   // call function getArea()\n   area1 = getArea(radius1);\n   cout &lt;&lt; \"area 1 is \" &lt;&lt; area1 &lt;&lt; endl;\n   // call function getArea()\n   area2 = getArea(2.2);\n   cout &lt;&lt; \"area 2 is \" &lt;&lt; area2 &lt;&lt; endl;\n   // call function getArea()\n   cout &lt;&lt; \"area 3 is \" &lt;&lt; getArea(3.3) &lt;&lt; endl;\n}\n\n// Function Definition\n// Return the area of a circle given its radius\ndouble getArea(double radius) {\n   return radius * radius * PI;\n}\n</code></pre> <pre><code>area 1 is 3.63\narea 2 is 14.52\narea 3 is 32.67\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a <code>getArea\uff08\uff09</code> \u7684\u53ef\u91cd\u7528\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u4ece\u8c03\u7528\u8005\u63a5\u6536\u53c2\u6570\uff08<code>\u53cc\u7cbe\u5ea6</code>\uff09\uff0c\u6267\u884c\u8ba1\u7b97\uff0c\u5e76\u5c06\u7ed3\u679c\uff08<code>\u53cc\u7cbe\u5ea6</code>\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002\u5728 <code>main\uff08\uff09</code> \u4e2d\uff0c\u6211\u4eec\u8c03\u7528\u4e86\u4e09\u6b21 <code>getArea\uff08\uff09</code> \u51fd\u6570\uff0c\u6bcf\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u53c2\u6570\u3002</p> <p>\u5728 C++ \u4e2d\uff0c\u60a8\u9700\u8981\u58f0\u660e\u4e00\u4e2a\u51fd\u6570 \u539f\u578b \uff08\u5728\u4f7f\u7528\u51fd\u6570\u4e4b\u524d\uff09\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49 \uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u5305\u542b\u7f16\u7a0b\u4f5c\u7684\u4e3b\u4f53\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#function-definition","title":"Function Definition \u529f\u80fd\u5b9a\u4e49","text":"<p>\u51fd\u6570\u5b9a\u4e49\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a</p> <pre><code>returnValueType functionName ( parameterList ) {\n   functionBody ;\n}\n</code></pre> <p>parameterList \u7531\u9017\u53f7\u5206\u9694\u7684 parameter-type \u548c parameter-name \u7ec4\u6210\uff0c\u5373 <code>param-1-type param-1-name, param-2-type param-2-name,...</code></p> <p>returnValueType \u6307\u5b9a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u4f8b\u5982 <code>int</code> \u6216 <code>double</code>\u3002\u53ef\u4ee5\u4f7f\u7528\u540d\u4e3a <code>void</code> \u7684\u7279\u6b8a\u8fd4\u56de\u7c7b\u578b\u6765\u8868\u793a\u51fd\u6570\u4e0d\u8fd4\u56de\u4efb\u4f55\u503c\u3002\u5728 C++ \u4e2d\uff0c\u5141\u8bb8\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u503c\u6216\u4e0d\u8fd4\u56de\u4efb\u4f55\u503c \uff08<code>void</code>\uff09\u3002\u5b83\u4e0d\u80fd\u8fd4\u56de\u591a\u4e2a\u503c\u3002[C++ \u4e0d\u5141\u8bb8\u8fd4\u56de\u6570\u7ec4\uff01]</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#return","title":"\u201creturn\u201d \u8bed\u53e5","text":"<p>\u5728\u51fd\u6570\u4f53\u5185\u90e8\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a<code>return</code>\u8bed\u53e5\u6765\u8fd4\u56de\u4e00\u4e2a\u503c\uff08\u8be5\u503c<code>*returnValueType*</code>\u5728\u51fd\u6570\u5934\u4e2d\u58f0\u660e\uff09\uff0c\u5e76\u5c06\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u8c03\u7528\u8005\u3002\u8bed\u6cd5\u5982\u4e0b\uff1a</p> <pre><code>return expression;   // Evaluated to a value of returnValueType declared in function's signature\nreturn;              // For function with return type of void\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u8c03\u7528\u51fd\u6570\uff08\u7531\u8c03\u7528\u65b9\uff09\u4f1a\u5c06\u63a7\u5236\u6743\u8f6c\u79fb\u7ed9\u51fd\u6570\u3002\u51fd\u6570\u4e2d\u7684 <code>return</code> \u8bed\u53e5\u5c06\u63a7\u5236\u6743\u8f6c\u79fb\u56de\u8c03\u7528\u65b9\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#_6","title":"\u51fd\u6570\u547d\u540d\u7ea6\u5b9a","text":"<p>\u51fd\u6570\u7684\u540d\u79f0\u5e94\u4e3a\u52a8\u8bcd\u6216\u52a8\u8bcd\u77ed\u8bed \uff08action\uff09\uff0c\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u5355\u8bcd\u7ec4\u6210\u3002\u7b2c\u4e00\u4e2a\u5355\u8bcd\u4e3a\u5c0f\u5199\uff0c\u5176\u4f59\u5355\u8bcd\u4e3a\u9996\u5b57\u6bcd\u5927\u5199\uff08\u79f0\u4e3a\u9a7c\u5cf0\u5f0f\u5927\u5c0f\u5199 \uff09\u3002\u4f8b\u5982\uff0c<code>getArea\uff08\uff09\u3001setRadius\uff08\uff09\u3001moveDown\uff08\uff09\u3001isPrime\uff08\uff09</code> \u7b49\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#function-prototype","title":"Function Prototype \u51fd\u6570\u539f\u578b","text":"<p>\u51fd\u6570\u539f\u578b\u544a\u8bc9\u7f16\u8bd1\u5668\u51fd\u6570\u7684\u63a5\u53e3\uff0c\u5373\u8fd4\u56de\u7c7b\u578b\u3001\u51fd\u6570\u540d\u79f0\u548c\u53c2\u6570\u7c7b\u578b\u5217\u8868\uff08\u53c2\u6570\u7684\u6570\u91cf\u548c\u7c7b\u578b\uff09\u3002\u73b0\u5728\u53ef\u4ee5\u5728\u6587\u4ef6\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e\u5b9a\u4e49\u8be5\u51fd\u6570\u3002 \u4f8b\u5982</p> <pre><code>// Function prototype - placed before the function is used.\ndouble getArea(double);  // without the parameter name\nint max(int, int);\n</code></pre> <p>\u60a8\u53ef\u4ee5\u9009\u62e9\u5728\u51fd\u6570\u539f\u578b\u4e2d\u5305\u542b\u53c2\u6570\u540d\u79f0\u3002\u7f16\u8bd1\u5668\u5c06\u5ffd\u7565\u8fd9\u4e9b\u540d\u79f0\uff0c\u4f46\u7528\u4f5c\u6587\u6863\u3002 \u4f8b\u5982</p> <pre><code>// Function Prototype\ndouble getArea(double radius);  // parameter names are ignored, but serve as documentation\nint max(int number1, int number2);\n</code></pre> <p>\u51fd\u6570\u539f\u578b\u901a\u5e38\u88ab\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5e76\u653e\u7f6e\u5728\u6240\u8c13\u7684\u5934\u6587\u4ef6\u4e2d\u3002\u5934\u6587\u4ef6\u53ef\u4ee5\u88ab\u8bb8\u591a\u7a0b\u5e8f\u5305\u542b\u3002</p> <p>\u6211\u4eec\u6709\u4e00\u4e2a\u540d\u4e3a <code>max\uff08int\uff0c int\uff09</code> \u7684\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a <code>int</code> \u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6700\u5927\u503c\u3002\u6211\u4eec\u4ece <code>main\uff08\uff09</code> \u8c03\u7528 <code>max\uff08\uff09</code> \u51fd\u6570\u3002</p> <pre><code>/* Testing max function (TestMaxFunction.cpp) */\n#include &lt;iostream&gt;\nusing namespace std;\n\nint maximum(int, int); // Function prototype (declaration)\n\nint main() {\n   cout &lt;&lt; maximum(5, 8) &lt;&lt; endl; // Call maximum() with literals\n\n   int a = 6, b = 9, c;\n   c = maximum(a, b);             // Call maximum() with variables\n   cout &lt;&lt; c &lt;&lt; endl;\n\n   cout &lt;&lt; maximum(c, 99) &lt;&lt; endl; // Call maximum()\n}\n\n// Function definition\n// A function that returns the maximum of two given int\nint maximum(int num1, int num2) {\n   return (num1 &gt; num2) ? num1 : num2;\n}\n</code></pre> <p>\u8fd9\u884c\u4ee3\u7801\u4f7f\u7528\u4e86 C++ \u4e2d\u7684 \u4e09\u5143\u6761\u4ef6\u8fd0\u7b97\u7b26 (<code>? :</code>) \u6765\u8fd4\u56de\u4e24\u4e2a\u6570 <code>num1</code> \u548c <code>num2</code> \u4e2d\u8f83\u5927\u7684\u90a3\u4e00\u4e2a\u3002</p> <p>\u8be6\u7ec6\u89e3\u91ca\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u4e09\u5143\u8fd0\u7b97\u7b26 <code>? :</code></p> </li> <li> <p>\u5b83\u662f\u4e00\u79cd\u7f16\u5199\u7b80\u5355 <code>if-else</code> \u8bed\u53e5\u5e76\u4ea7\u751f\u4e00\u4e2a\u503c\u7684\u7b80\u6d01\u65b9\u5f0f\u3002</p> </li> <li> <p>\u57fa\u672c\u8bed\u6cd5\u662f\uff1a <code>\u6761\u4ef6 ? \u6761\u4ef6\u4e3a\u771f\u65f6\u7684\u503c : \u6761\u4ef6\u4e3a\u5047\u65f6\u7684\u503c</code></p> </li> <li> <p>\u5206\u6790\u60a8\u7684\u4ee3\u7801: <code>(num1 &gt; num2) ? num1 : num2</code></p> </li> <li> <p><code>\u6761\u4ef6 (condition)</code>: <code>(num1 &gt; num2)</code> - \u68c0\u67e5\u53d8\u91cf <code>num1</code> \u7684\u503c\u662f\u5426\u4e25\u683c\u5927\u4e8e\u53d8\u91cf <code>num2</code> \u7684\u503c\u3002</p> </li> <li><code>?</code>: \u5206\u9694\u7b26\u3002</li> <li><code>\u6761\u4ef6\u4e3a\u771f\u65f6\u7684\u503c (value_if_true)</code>: <code>num1</code> - \u5982\u679c\u6761\u4ef6 <code>(num1 &gt; num2)</code> \u4e3a <code>true</code>\uff0c\u5219\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u5c31\u662f <code>num1</code> \u7684\u503c\u3002</li> <li><code>:</code>: \u5206\u9694\u7b26\u3002</li> <li><code>\u6761\u4ef6\u4e3a\u5047\u65f6\u7684\u503c (value_if_false)</code>: <code>num2</code> - \u5982\u679c\u6761\u4ef6 <code>(num1 &gt; num2)</code> \u4e3a <code>false</code> \uff08\u610f\u5473\u7740 <code>num1</code> \u5c0f\u4e8e\u6216\u7b49\u4e8e <code>num2</code>\uff09\uff0c\u5219\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u5c31\u662f <code>num2</code> \u7684\u503c\u3002</li> </ol> <p>\u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u884c\u4ee3\u7801\u7684\u4f5c\u7528\u662f\uff1a</p> <ul> <li>\u6bd4\u8f83 <code>num1</code> \u548c <code>num2</code>\u3002</li> <li>\u5982\u679c <code>num1</code> \u66f4\u5927\uff0c\u5c31\u8fd4\u56de <code>num1</code>\u3002</li> <li>\u5426\u5219\uff08\u5373 <code>num2</code> \u66f4\u5927\u6216\u4e24\u8005\u76f8\u7b49\uff09\uff0c\u5c31\u8fd4\u56de <code>num2</code>\u3002</li> </ul> <p>\u6240\u4ee5\uff0c\u8fd9\u884c\u4ee3\u7801\u7684\u610f\u601d\u662f\uff1a\u201c\u8fd4\u56de <code>num1</code> \u548c <code>num2</code> \u4e2d\u7684\u6700\u5927\u503c\uff08\u8f83\u5927\u7684\u90a3\u4e2a\u503c\uff09\u3002</p> <p>\u5b83\u7b49\u540c\u4e8e\u4e0b\u9762\u7684 <code>if-else</code> \u8bed\u53e5\uff1a</p> <pre><code>if (num1 &gt; num2) {\n  return num1;\n} else {\n  return num2;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/01cppbasics/#void","title":"\u201cvoid\u201d \u8fd4\u56de\u7c7b\u578b","text":"<p>\u5047\u8bbe\u4f60\u9700\u8981\u4e00\u4e2a\u51fd\u6570\u6765\u6267\u884c\u67d0\u4e9b\u4f5c\uff08\u4f8b\u5982\uff0c\u6253\u5370\uff09\uff0c\u800c\u4e0d\u9700\u8981\u5411\u8c03\u7528\u8005\u8fd4\u56de\u503c\uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u8fd4\u56de\u503c\u7c7b\u578b\u58f0\u660e\u4e3a <code>void</code>\u3002\u5728\u51fd\u6570\u7684\u4e3b\u4f53\u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0d\u5e26\u8fd4\u56de\u503c\u7684 \u201c<code>return;\u201d</code> \u8bed\u53e5\u5c06\u63a7\u5236\u6743\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c<code>return</code> \u8bed\u53e5\u662f\u53ef\u9009\u7684\u3002\u5982\u679c\u6ca1\u6709 <code>return</code> \u8bed\u53e5\uff0c\u5219\u5c06\u6267\u884c\u6574\u4e2a\u4e3b\u4f53\uff0c\u5e76\u5728\u4e3b\u4f53\u672b\u5c3e\u5c06\u63a7\u5236\u6743\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#_7","title":"\u5b9e\u9645\u53c2\u6570\u4e0e\u5f62\u5f0f\u53c2\u6570","text":"<p>\u56de\u60f3\u4e00\u4e0b\uff0c\u51fd\u6570\u4ece\u5176\u8c03\u7528\u8005\u63a5\u6536\u53c2\u6570 \uff0c\u6267\u884c\u51fd\u6570\u4f53\u4e2d\u5b9a\u4e49\u7684\u4f5c\uff0c\u5e76\u5411\u8c03\u7528\u8005\u8fd4\u56de\u4e00\u4e2a\u503c\uff08\u6216\u4e0d\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\uff09\u3002</p> <p>\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5728 <code>getArea\uff08double radius\uff09</code> \u7684\u7b7e\u540d\u4e2d\u58f0\u660e\u7684\u53d8\u91cf <code>\uff08double radius\uff09</code> \u79f0\u4e3a\u5f62\u5f0f\u53c2\u6570 \u3002\u5176\u8303\u56f4\u5728\u51fd\u6570\u7684\u4e3b\u4f53\u5185\u3002\u5f53\u8c03\u7528\u8005\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u8c03\u7528\u8005\u5fc5\u987b\u63d0\u4f9b\u6240\u8c13\u7684\u5b9e\u9645\u53c2\u6570 s\uff08\u6216\u53c2\u6570 \uff09\uff0c\u5176\u503c\u968f\u540e\u7528\u4e8e\u5b9e\u9645\u8ba1\u7b97\u3002\u4f8b\u5982\uff0c\u5f53\u901a\u8fc7 \u201c<code>area1 = getArea\uff08radius1\uff09\u201d</code> \u8c03\u7528\u51fd\u6570\u65f6\uff0c<code>radius1</code> \u662f\u5b9e\u9645\u53c2\u6570\uff0c\u503c\u4e3a <code>1.1</code>\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#_8","title":"\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u548c\u53c2\u6570\u7684\u8303\u56f4","text":"<p>\u5728\u51fd\u6570\u5185\u58f0\u660e\u7684\u6240\u6709\u53d8\u91cf\uff08\u5305\u62ec\u51fd\u6570\u7684\u53c2\u6570\uff09\u90fd\u4ec5\u5bf9\u51fd\u6570\u53ef\u7528\u3002\u5b83\u4eec\u662f\u5728\u8c03\u7528\u51fd\u6570\u65f6\u521b\u5efa\u7684\uff0c\u5e76\u5728\u51fd\u6570\u8fd4\u56de\u540e\u91ca\u653e\uff08\u9500\u6bc1\uff09\u3002\u5b83\u4eec\u88ab\u79f0\u4e3a\u5c40\u90e8\u53d8\u91cf \uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u51fd\u6570\u7684\u672c\u5730\u53d8\u91cf\uff0c\u5728\u51fd\u6570\u5916\u90e8\u4e0d\u53ef\u7528\u3002\u5b83\u4eec\u4e5f\u88ab\u79f0\u4e3a\u81ea\u52a8\u53d8\u91cf \uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u81ea\u52a8\u521b\u5efa\u548c\u9500\u6bc1\u7684 - \u65e0\u9700\u7a0b\u5e8f\u5458\u7684\u663e\u5f0f\u4f5c\u6765\u5206\u914d\u548c\u91ca\u653e\u5b83\u4eec\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#_9","title":"\u5e03\u5c14\u51fd\u6570","text":"<p>\u5e03\u5c14\u51fd\u6570\u5411\u8c03\u7528\u65b9\u8fd4\u56de\u4e00\u4e2a<code>\u5e03\u5c14</code>\u503c\uff08<code>true</code> \u6216 <code>false</code>\uff09\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u5e0c\u671b\u7f16\u5199\u4e00\u4e2a\u540d\u4e3a <code>isOdd\uff08\uff09</code> \u7684\u51fd\u6570\u6765\u68c0\u67e5\u7ed9\u5b9a\u7684\u6570\u5b57\u662f\u5426\u4e3a\u5947\u6570\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// Function Prototype\nbool isOdd(int);\n\nint main() {\n   cout &lt;&lt; boolalpha;   // print bool as true or false\n   cout &lt;&lt; isOdd(5) &lt;&lt; endl;  // true\n   cout &lt;&lt; isOdd(6) &lt;&lt; endl;  // false\n   cout &lt;&lt; isOdd(-5) &lt;&lt; endl; // false\n}\n\nbool isOdd(int number) {\n   if (number % 2 == 1) {\n      return true;\n   } else {\n      return false;\n   }\n}\n</code></pre> <p>\u8fd9\u4e2a\u770b\u4f3c\u6b63\u786e\u7684\u4ee3\u7801\u4f1a\u4e3a <code>-5</code> \u751f\u6210 <code>false</code>\uff0c\u56e0\u4e3a <code>-5%2</code> \u662f <code>-1</code> \u800c\u4e0d\u662f <code>1</code>\u3002\u4f60\u53ef\u4ee5\u91cd\u5199\u6761\u4ef6\uff1a</p> <pre><code>bool isOdd(int number) {\n   if (number % 2 == 0) {\n      return false;\n   } else {\n      return true;\n   }\n}\n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u751f\u6210\u4e86\u6b63\u786e\u7684\u7b54\u6848\uff0c\u4f46\u5f88\u5dee\u3002\u5bf9\u4e8e\u5e03\u5c14\u51fd\u6570\uff0c\u60a8\u5e94\u8be5\u7b80\u5355\u5730\u8fd4\u56de\u6bd4\u8f83\u7684\u7ed3\u679c <code>bool</code> \u503c\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u6761\u4ef6\u8bed\u53e5\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>bool isEven(int number) {\n   return (number % 2 == 0);\n}\n\nbool isOdd(int number) {\n  return !(number % 2 == 0);  // OR return !isEven(number);\n}\n\nint main() {\n   int number = -9;\n   if (isEven(number)) {      // Don't write (isEven(number) == true)\n      cout &lt;&lt; \"Even\" &lt;&lt; endl;\n   }\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/01cppbasics/#203","title":"20.3 \u9ed8\u8ba4\u53c2\u6570 <p>C++ \u5f15\u5165\u4e86\u51fd\u6570\u7684\u6240\u8c13\u9ed8\u8ba4\u53c2\u6570 \u3002\u5982\u679c\u8c03\u7528\u8005\u5728\u8c03\u7528\u51fd\u6570\u65f6\u7701\u7565\u4e86\u76f8\u5e94\u7684\u5b9e\u9645\u53c2\u6570\uff0c\u5219\u5c06\u4f7f\u7528\u8fd9\u4e9b\u9ed8\u8ba4\u503c\u3002\u9ed8\u8ba4\u53c2\u6570\u5728\u51fd\u6570\u539f\u578b\u4e2d\u6307\u5b9a\uff0c\u4e0d\u80fd\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u91cd\u590d\u3002\u9ed8\u8ba4\u53c2\u6570\u6839\u636e\u5b83\u4eec\u7684\u4f4d\u7f6e\u8fdb\u884c\u89e3\u6790\u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u53ea\u80fd\u7528\u4e8e\u66ff\u6362\u5c3e\u968f\u53c2\u6570\u4ee5\u907f\u514d\u6b67\u4e49\u3002 \u4f8b\u5982</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// Function prototype - Specify the default arguments here\nint fun1(int = 1, int = 2, int = 3);\nint fun2(int, int, int = 3);\n\nint main() {\n   cout &lt;&lt; fun1(4, 5, 6) &lt;&lt; endl; // No default\n   cout &lt;&lt; fun1(4, 5) &lt;&lt; endl;    // 4, 5, 3(default)\n   cout &lt;&lt; fun1(4) &lt;&lt; endl;       // 4, 2(default), 3(default)\n   cout &lt;&lt; fun1() &lt;&lt; endl;        // 1(default), 2(default), 3(default)\n\n   cout &lt;&lt; fun2(4, 5, 6) &lt;&lt; endl; // No default\n   cout &lt;&lt; fun2(4, 5) &lt;&lt; endl;    // 4, 5, 3(default)\n// cout &lt;&lt; fun2(4) &lt;&lt; endl;\n      // error: too few arguments to function 'int fun2(int, int, int)'\n}\n\nint fun1(int n1, int n2, int n3) {\n      // cannot repeat default arguments in function definition\n   return n1 + n2 + n3;\n}\n\nint fun2(int n1, int n2, int n3) {\n   return n1 + n2 + n3;\n}\n</code></pre> <p>\u5e94\u8be5\u5728\u51fd\u6570\u539f\u578b\uff08\u58f0\u660e\uff09\u4e2d\u6307\u5b9a\u9ed8\u8ba4\u53c2\u6570\u3002\u5b83\u4eec\u53ea\u80fd\u5b9a\u4e49\u4e00\u6b21\uff08\u5355\u5b9a\u4e49\u89c4\u5219\uff09\uff0c\u5e76\u4e14\u4e0d\u80fd\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u91cd\u590d\u3002</p> <p>\u91cd\u8981\u89c4\u5219:</p> <ul> <li>\u9ed8\u8ba4\u53c2\u6570\u5fc5\u987b\u662f\u53c2\u6570\u5217\u8868\u4e2d\u7684\u5c3e\u968f (trailing) \u53c2\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u65e6\u4f60\u7ed9\u67d0\u4e2a\u53c2\u6570\u6307\u5b9a\u4e86\u9ed8\u8ba4\u503c\uff0c\u5b83\u4e4b\u540e\u7684\u6240\u6709\u53c2\u6570\u4e5f\u5fc5\u987b\u6709\u9ed8\u8ba4\u503c\u3002\u4f60\u4e0d\u80fd\u6709\u4e00\u4e2a\u5e26\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\u540e\u9762\u8ddf\u7740\u4e00\u4e2a\u6ca1\u6709\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\u3002</li> <li>\u9ed8\u8ba4\u503c\u4e0d\u80fd\u5728\u51fd\u6570\u5b9a\u4e49\uff08\u5b9e\u73b0\uff09\u4e2d\u91cd\u590d\u6307\u5b9a\uff08\u5982\u679c\u5df2\u7ecf\u6709\u539f\u578b\u58f0\u660e\u4e86\u9ed8\u8ba4\u503c\uff09\uff0c\u5982 <code>fun1</code> \u5b9a\u4e49\u4e2d\u7684\u6ce8\u91ca\u6240\u793a\u3002</li> </ul> <p>\u51fd\u6570\u8c03\u7528:</p> <ul> <li><code>fun1</code> \u7684\u8c03\u7528:</li> <li><code>fun1(4, 5, 6)</code>: \u63d0\u4f9b\u4e86\u6240\u6709 3 \u4e2a\u53c2\u6570\uff0c\u4e0d\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002\u8fd4\u56de <code>4+5+6 = 15</code>\u3002</li> <li><code>fun1(4, 5)</code>: \u63d0\u4f9b\u4e86\u524d 2 \u4e2a\u53c2\u6570\u3002\u7b2c 3 \u4e2a\u53c2\u6570 <code>n3</code> \u4f7f\u7528\u9ed8\u8ba4\u503c <code>3</code>\u3002\u8fd4\u56de <code>4+5+3 = 12</code>\u3002</li> <li><code>fun1(4)</code>: \u53ea\u63d0\u4f9b\u4e86\u7b2c 1 \u4e2a\u53c2\u6570\u3002\u7b2c 2 \u4e2a\u53c2\u6570 <code>n2</code> \u4f7f\u7528\u9ed8\u8ba4\u503c <code>2</code>\uff0c\u7b2c 3 \u4e2a\u53c2\u6570 <code>n3</code> \u4f7f\u7528\u9ed8\u8ba4\u503c <code>3</code>\u3002\u8fd4\u56de <code>4+2+3 = 9</code>\u3002</li> <li><code>fun1()</code>: \u6ca1\u6709\u63d0\u4f9b\u4efb\u4f55\u53c2\u6570\u3002\u6240\u6709\u53c2\u6570\u90fd\u4f7f\u7528\u9ed8\u8ba4\u503c\uff1a<code>n1=1</code>, <code>n2=2</code>, <code>n3=3</code>\u3002\u8fd4\u56de <code>1+2+3 = 6</code>\u3002</li> <li><code>fun2</code> \u7684\u8c03\u7528:</li> <li><code>fun2(4, 5, 6)</code>: \u63d0\u4f9b\u4e86\u6240\u6709 3 \u4e2a\u53c2\u6570\uff0c\u4e0d\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002\u8fd4\u56de <code>4+5+6 = 15</code>\u3002</li> <li><code>fun2(4, 5)</code>: \u63d0\u4f9b\u4e86\u524d 2 \u4e2a\u53c2\u6570\u3002\u7b2c 3 \u4e2a\u53c2\u6570 <code>n3</code> \u4f7f\u7528\u9ed8\u8ba4\u503c <code>3</code>\u3002\u8fd4\u56de <code>4+5+3 = 12</code>\u3002</li> <li><code>// cout &lt;&lt; fun2(4) &lt;&lt; endl;</code>: \u8fd9\u884c\u88ab\u6ce8\u91ca\u6389\u4e86\uff0c\u5e76\u4e14\u4e0b\u9762\u7684\u6ce8\u91ca\u89e3\u91ca\u4e86\u539f\u56e0\u3002\u4f60\u4e0d\u80fd\u53ea\u63d0\u4f9b\u7b2c\u4e00\u4e2a\u53c2\u6570 <code>4</code> \u6765\u8c03\u7528 <code>fun2</code>\u3002\u56e0\u4e3a <code>fun2</code> \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570 <code>n2</code> \u6ca1\u6709\u9ed8\u8ba4\u503c\uff0c\u6240\u4ee5\u8c03\u7528\u65f6\u5fc5\u987b\u4e3a\u5b83\u63d0\u4f9b\u4e00\u4e2a\u503c\u3002\u4f60\u4e0d\u80fd\u8df3\u8fc7\u4e00\u4e2a\u6ca1\u6709\u9ed8\u8ba4\u503c\u7684\u53c2\u6570 (<code>n2</code>) \u53bb\u4f7f\u7528\u540e\u9762\u53c2\u6570 (<code>n3</code>) \u7684\u9ed8\u8ba4\u503c\u3002\u8fd9\u8fdd\u53cd\u4e86\u9ed8\u8ba4\u53c2\u6570\u5fc5\u987b\u662f\u5c3e\u968f\u53c2\u6570\u7684\u89c4\u5219\u3002</li> </ul> <p>default \u53c2\u6570\u4e0d\u662f\u7edd\u5bf9\u5fc5\u8981\u7684\u3002\u4ee3\u7801\u53ef\u80fd\u5f88\u96be\u7ef4\u62a4\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#204","title":"20.4 \u51fd\u6570\u91cd\u8f7d <p>C++ \u5f15\u5165\u4e86\u51fd\u6570\u91cd\u8f7d \uff08\u6216\u51fd\u6570\u591a\u6001\u6027 \uff0c\u8fd9\u610f\u5473\u7740\u591a\u79cd\u5f62\u5f0f \uff09\uff0c\u5b83\u5141\u8bb8\u60a8\u62e5\u6709\u540c\u4e00\u51fd\u6570\u540d\u79f0\u7684\u591a\u4e2a\u7248\u672c\uff0c\u5e76\u901a\u8fc7\u53c2\u6570\u5217\u8868\uff08\u53c2\u6570\u7684\u6570\u91cf\u3001\u7c7b\u578b\u6216\u987a\u5e8f\uff09\u8fdb\u884c\u533a\u5206\u3002\u4e0e\u8c03\u7528\u65b9\u7684\u53c2\u6570\u5217\u8868\u5339\u914d\u7684\u7248\u672c\u5c06\u88ab\u9009\u62e9\u6267\u884c\u3002 \u4f8b\u5982</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid fun(int, int, int);  // Version 1\nvoid fun(double, int);          // Version 2\nvoid fun(int, double);          // Version 3\n\nint main() {\n   fun(1, 2, 3);   // version 1\n   fun(1.0, 2);    // version 2\n   fun(1, 2.0);    // version 3\n   fun(1.1, 2, 3); // version 1 - double 1.1 casted to int 1 (without warning)\n\n   // fun(1, 2, 3, 4);\n      // error: no matching function for call to 'fun(int, int, int, int)'\n   // fun(1, 2);\n      // error: call of overloaded 'fun(int, int)' is ambiguous\n      // note: candidates are:\n      //    void fun(double, int)\n      //    void fun(int, double)\n   // fun(1.0, 2.0);\n      // error: call of overloaded 'fun(double, double)' is ambiguous\n}\n\nvoid fun(int n1, int n2, int n3) {  // version 1\n   cout &lt;&lt; \"version 1\" &lt;&lt; endl;\n}\n\nvoid fun(double n1, int n2) { // version 2\n   cout &lt;&lt; \"version 2\" &lt;&lt; endl;\n}\n\nvoid fun(int n1, double n2) { // version 3\n   cout &lt;&lt; \"version 3\" &lt;&lt; endl;\n}\n</code></pre> <p>\u91cd\u8f7d\u51fd\u6570\u4e0d\u80fd\u901a\u8fc7\u8fd4\u56de\u7c7b\u578b\uff08\u7f16\u8bd1\u9519\u8bef\uff09\u6765\u533a\u5206\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#_10","title":"\u540d\u79f0\u4fee\u9970","text":"<p>\u4e3a\u4e86\u533a\u5206\u91cd\u8f7d\u51fd\u6570\u7684\u4e0d\u540c\u7248\u672c\uff0c\u8bb8\u591a\u7f16\u8bd1\u5668\uff08\u4f8b\u5982 GNU GCC\uff09\u91c7\u7528\u540d\u79f0\u4fee\u9970\u6216\u540d\u79f0\u4fee\u9970\u65b9\u6848\u6765\u547d\u540d\u51fd\u6570\u3002</p> <pre><code>// Compile source into object code FunctionOverloading.o\n&gt; g++ -c FunctionOverloading.cpp\n\n// List the symbol table\n&gt; nm FunctionOverloading.o\n......\n000000b5 T __Z3fundi\n000000ed T __Z3funid\n00000089 T __Z3funiii\n......\n</code></pre> <p>\u6bcf\u4e2a\u51fd\u6570\u90fd\u901a\u8fc7\u524d\u7f00 <code>__Z</code> \u6807\u8bc6\uff0c\u540e\u8ddf\u4e00\u4e2a\u5305\u542b\u51fd\u6570\u540d\u79f0\u5b57\u7b26\u6570\u7684\u6574\u6570\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a 3 \u8868\u793a\u201c<code>fun</code>\u201d\uff09\uff0c\u540e\u8ddf\u53c2\u6570\u7c7b\u578b\u5217\u8868\uff08\u5176\u4e2d <code>i</code> \u8868\u793a <code>int\uff0cd</code> \u8868\u793a <code>double</code>\uff09\u3002\u4f8b\u5982\uff0c<code>di</code> \u8868\u793a <code>double</code> \u540e\u8ddf <code>int</code>;<code>id</code> \u8868\u793a <code>int</code> \u540e\u8ddf <code>double</code>;<code>iii</code> \u8868\u793a 3 <code>\u4e2a int</code>\u3002</p> <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u5173\u952e\u5b57 <code>extern \u201cC\u201d</code> \u9644\u52a0\u5230\u51fd\u6570\u539f\u578b\u6765\u9009\u62e9\u4f7f\u7528 C \u7684\u547d\u540d\u534f\u8bae\u3002C \u4e0d\u652f\u6301\u51fd\u6570\u91cd\u8f7d\u3002\u56e0\u6b64\uff0c\u5b83\u4e0d\u9700\u8981\u540d\u79f0\u4fee\u9970\u3002\u5b83\u53ea\u662f\u5728\u51fd\u6570\u540d\u79f0\u524d\u9762\u9644\u52a0\u4e00\u4e2a\u4e0b\u5212\u7ebf\u3002 \u4f8b\u5982</p> <pre><code>extern \"C\" void fun(int, int, int, int);   // Compiled as _fun\n</code></pre>"},{"location":"DEV/Programming/Cpp/01cppbasics/#205","title":"20.5\u6570\u7ec4\u548c\u51fd\u6570 <p>\u4f60\u4e5f\u53ef\u4ee5\u5c06\u6570\u7ec4\u4f20\u9012\u7ed9 function\u3002\u4f46\u662f\uff0c\u4f60\u8fd8\u9700\u8981\u5c06\u6570\u7ec4\u7684\u5927\u5c0f\u4f20\u9012\u7ed9\u51fd\u6570\u3002\u8fd9\u662f\u56e0\u4e3a\u65e0\u6cd5\u4ece\u88ab\u8c03\u7528\u51fd\u6570\u5185\u7684 array \u53c2\u6570\u4e2d\u5224\u65ad\u6570\u7ec4\u7684\u5927\u5c0f\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#_11","title":"\u8ba1\u7b97\u6570\u7ec4\u548c\u6253\u5370\u6570\u7ec4\u5185\u5bb9\u7684\u603b\u548c","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// Function prototype\nint sum(int array[], int size);    // Need to pass the array size too\nvoid print(int array[], int size);\n\n// Test Driver\nint main() {\n   int a1[] = {8, 4, 5, 3, 2};\n   print(a1, 5);   // {8,4,5,3,2}\n   cout &lt;&lt; \"sum is \" &lt;&lt; sum(a1, 5) &lt;&lt; endl;  // sum is 22\n}\n\n// Function definition\n// Return the sum of the given array\nint sum(int array[], int size) {\n   int sum = 0;\n   for (int i = 0; i &lt; size; ++i) {\n      sum += array[i];\n   }\n   return sum;\n}\n\n// Print the contents of the given array\nvoid print(int array[], int size) {\n   cout &lt;&lt; \"{\";\n   for (int i = 0; i &lt; size; ++i) {\n      cout &lt;&lt; array[i];\n      if (i &lt; size - 1) {\n         cout &lt;&lt; \",\";\n      }\n   }\n   cout &lt;&lt; \"}\" &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/01cppbasics/#206","title":"20.6 \u6309\u503c\u4f20\u9012\u4e0e\u6309\u5f15\u7528\u4f20\u9012 <p>\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5c06\u53c2\u6570\u4f20\u9012\u5230\u51fd\u6570\u4e2d\uff1a \u6309\u503c\u4f20\u9012 vs. \u6309\u5f15\u7528\u4f20\u9012 \u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#_12","title":"\u6309\u503c\u4f20\u9012","text":"<p>\u5728\u6309\u503c\u4f20\u9012\u4e2d\uff0c\u521b\u5efa\u53c2\u6570\u7684\u201c\u526f\u672c\u201d\u5e76\u5c06\u5176\u4f20\u9012\u5230\u51fd\u6570\u4e2d\u3002\u8c03\u7528\u7684\u51fd\u6570\u9002\u7528\u4e8e\u201c\u514b\u9686\u201d\uff0c\u65e0\u6cd5\u4fee\u6539\u539f\u59cb\u526f\u672c\u3002\u5728 C/C++ \u4e2d\uff0c\u57fa\u672c\u7c7b\u578b\uff08\u5982 <code>int</code> \u548c <code>double</code>\uff09\u6309\u503c\u4f20\u9012\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u60a8\u4e0d\u80fd\u5728\u51fd\u6570\u5185\u4fee\u6539\u8c03\u7528\u65b9\u7684\u503c - \u6ca1\u6709\u526f\u4f5c\u7528 \u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// Function prototypes\nint inc(int number);\n\n// Test Driver\nint main() {\n   int n = 8;\n   cout &lt;&lt; \"Before calling function, n is \" &lt;&lt; n &lt;&lt; endl; // 8\n   int result = inc(n);\n   cout &lt;&lt; \"After calling function, n is \" &lt;&lt; n &lt;&lt; endl;  // 8\n   cout &lt;&lt; \"result is \" &lt;&lt; result &lt;&lt; endl;                // 9\n}\n\n// Function definitions\n// Return number+1\nint inc(int number) {\n   ++number;  // Modify parameter, no effect to caller\n   return number;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/01cppbasics/#_13","title":"\u6309\u5f15\u7528\u4f20\u9012","text":"<p>\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u6309\u5f15\u7528\u4f20\u9012\u4e2d\uff0c\u8c03\u7528\u8005\u53d8\u91cf\u7684\u5f15\u7528\u88ab\u4f20\u9012\u5230\u51fd\u6570\u4e2d\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u88ab\u8c03\u7528\u7684\u51fd\u6570\u5904\u7406\u76f8\u540c\u7684\u6570\u636e\u3002\u5982\u679c\u88ab\u8c03\u7528\u7684\u51fd\u6570\u4fee\u6539\u4e86\u53c2\u6570\uff0c\u5219\u540c\u4e00\u8c03\u7528\u8005\u7684\u526f\u672c\u4e5f\u5c06\u88ab\u4fee\u6539\u3002</p> <p>\u5728 C/C++ \u4e2d\uff0c\u6570\u7ec4\u662f\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u60a8\u53ef\u4ee5\u5728\u88ab\u8c03\u7528\u7684\u51fd\u6570\u4e2d\u4fee\u6539\u8c03\u7528\u65b9\u6570\u7ec4\u7684\u5185\u5bb9 - \u5c06\u6570\u7ec4\u4f20\u9012\u5230\u51fd\u6570\u4e2d\u53ef\u80fd\u4f1a\u4ea7\u751f\u526f\u4f5c\u7528 \u3002</p> <p>C/C++ \u4e0d\u5141\u8bb8\u51fd\u6570\u8fd4\u56de\u6570\u7ec4\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u5e0c\u671b\u7f16\u5199\u4e00\u4e2a\u4fee\u6539\u6570\u7ec4\u5185\u5bb9\u7684\u51fd\u6570\uff08\u4f8b\u5982\uff0c\u5bf9\u6570\u7ec4\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff09\uff0c\u5219\u9700\u8981\u4f9d\u9760\u6309\u5f15\u7528\u4f20\u9012\u6765\u5904\u7406\u51fd\u6570\u5185\u90e8\u548c\u5916\u90e8\u7684\u540c\u4e00\u526f\u672c\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u5728\u6309\u503c\u4f20\u9012\u4e2d\uff0c\u8c03\u7528\u7684\u51fd\u6570\u9002\u7528\u4e8e\u514b\u9686\u526f\u672c\uff0c\u5e76\u4e14\u65e0\u6cd5\u4fee\u6539\u539f\u59cb\u526f\u672c\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#array","title":"\u9012\u589e Array \u7684\u6bcf\u4e2a\u5143\u7d20","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// Function prototypes\nvoid inc(int array[], int size);\nvoid print(int array[], int size);\n\n// Test Driver\nint main() {\n   int a1[] = {8, 4, 5, 3, 2};\n\n   // Before increment\n   print(a1, 5);   // {8,4,5,3,2}\n   // Do increment\n   inc(a1, 5);     // Array is passed by reference (having side effect)\n   // After increment\n   print(a1, 5);   // {9,5,6,4,3}\n}\n\n// Function definitions\n\n// Increment each element of the given array\nvoid inc(int array[], int size) {  // array[] is not const\n   for (int i = 0; i &lt; size; ++i) {\n      array[i]++;  // side-effect\n   }\n}\n\n// Print the contents of the given array\nvoid print(int array[], int size) {\n   cout &lt;&lt; \"{\";\n   for (int i = 0; i &lt; size; ++i) {\n      cout &lt;&lt; array[i];\n      if (i &lt; size - 1) {\n         cout &lt;&lt; \",\";\n      }\n   }\n   cout &lt;&lt; \"}\" &lt;&lt; endl;\n}\n</code></pre> <p>Array \u901a\u8fc7\u5f15\u7528\u4f20\u9012\u5230\u51fd\u6570\u4e2d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8c03\u7528\u7684\u51fd\u6570\u4e0e\u8c03\u7528\u65b9\u5728\u6570\u7ec4\u7684\u540c\u4e00\u526f\u672c\u4e0a\u5de5\u4f5c\u3002\u56e0\u6b64\uff0c\u51fd\u6570\u5185\u90e8\u6570\u7ec4\u7684\u53d8\u5316\u4f1a\u53cd\u6620\u5728\u51fd\u6570\u5916\u90e8\uff08\u5373\u526f\u4f5c\u7528\uff09\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#_14","title":"\u4e3a\u4ec0\u4e48\u6570\u7ec4\u662f\u6309\u5f15\u7528\u4f20\u9012\u7684\uff1f","text":"<p>Array \u8bbe\u8ba1\u4e3a\u901a\u8fc7\u5f15\u7528\u4f20\u9012\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u514b\u9686\u526f\u672c\u6309\u503c\u4f20\u9012\u3002\u8fd9\u662f\u56e0\u4e3a\u6309\u503c\u4f20\u9012\u5927\u578b\u6570\u7ec4\u6548\u7387\u4f4e\u4e0b - \u9700\u8981\u514b\u9686\u5927\u578b\u6570\u7ec4\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#207-const","title":"20.7 const\u51fd\u6570\u53c2\u6570 <p>\u6309\u5f15\u7528\u4f20\u9012\u53ef\u80fd\u4f1a\u635f\u574f\u539f\u59cb\u6570\u636e\u3002\u5982\u679c\u60a8\u4e0d\u60f3\u4fee\u6539\u51fd\u6570\u5185\u7684\u6570\u7ec4\uff0c\u5219\u53ef\u4ee5\u5728 function \u53c2\u6570\u4e2d\u4f7f\u7528 <code>const</code> \u5173\u952e\u5b57\u3002\u4e0d\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4fee\u6539 <code>const</code> \u51fd\u6570\u53c2\u6570\u3002</p> <p>\u5c3d\u53ef\u80fd\u4f7f\u7528 <code>const</code> \u6765\u4f20\u9012\u5f15\u7528\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u9632\u6b62\u60a8\u65e0\u610f\u4e2d\u4fee\u6539\u53c2\u6570\u5e76\u4fdd\u62a4\u60a8\u514d\u53d7\u8bb8\u591a\u7f16\u7a0b\u9519\u8bef\u7684\u5f71\u54cd\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#linear-search","title":"\u4f7f\u7528 Linear Search \u641c\u7d22\u6570\u7ec4","text":"<p>\u5728\u7ebf\u6027\u641c\u7d22\u4e2d\uff0c\u641c\u7d22\u952e\u4e0e\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c\u7ebf\u6027\u6bd4\u8f83\u3002\u5982\u679c\u5339\u914d\uff0c\u5219\u8fd4\u56de\u6570\u7ec4\u5728 [0, size-1] \u4e4b\u95f4\u7684\u7d22\u5f15\uff1b\u5426\u5219\uff0c\u8fd4\u56de -1 \u6216\u6570\u7ec4\u7684\u5927\u5c0f\uff08\u67d0\u4e9b\u5b9e\u73b0\u4ec5\u5904\u7406\u6b63\u7d22\u5f15\uff09\u3002\u7ebf\u6027\u641c\u7d22\u7684\u590d\u6742\u5ea6\u4e3a O(n)\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint linearSearch(const int a[], int size, int key);\n\nint main() {\n   const int SIZE = 8;\n   int a1[SIZE] = {8, 4, 5, 3, 2, 9, 4, 1};\n\n   cout &lt;&lt; linearSearch(a1, SIZE, 8) &lt;&lt; endl;  // 0\n   cout &lt;&lt; linearSearch(a1, SIZE, 4) &lt;&lt; endl;  // 1\n   cout &lt;&lt; linearSearch(a1, SIZE, 99) &lt;&lt; endl; // 8 (not found)\n}\n\n// Search the array for the given key\n// If found, return array index [0, size-1]; otherwise, return size\nint linearSearch(const int a[], int size, int key) {\n   for (int i = 0; i &lt; size; ++i) {\n      if (a[i] == key) return i;\n   }\n   return size;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/01cppbasics/#bubble-sort-array","title":"\u4f7f\u7528 Bubble Sort \u5bf9 Array \u8fdb\u884c\u6392\u5e8f","text":"<p>\u8be6\u7ec6\u7b97\u6cd5\u548c\u56fe\u793a\u8bf7\u89c1Wiki \u4e0a\u7684\u201c\u5192\u6ce1\u6392\u5e8f\u201d ``\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u904d\u5386\u6574\u4e2a\u5217\u8868\uff0c\u6bd4\u8f83\u4e24\u4e2a\u76f8\u90bb\u7684\u5143\u7d20\uff0c\u5982\u679c\u5b83\u4eec\u7684\u987a\u5e8f\u9519\u8bef\uff0c\u5219\u4ea4\u6362\u5b83\u4eec\u3002\u91cd\u590d\u6b64\u8fc7\u7a0b\uff0c\u76f4\u5230\u4e0d\u9700\u8981\u4ea4\u6362\u4e3a\u6b62\u3002\u4f8b\u5982\uff1a</p> <pre><code>{8,4,5,3,2,9,4,1}\nPASS 1 ...\n{8,4,5,3,2,9,4,1} =&gt; {4,8,5,3,2,9,4,1}\n{4,8,5,3,2,9,4,1} =&gt; {4,5,8,3,2,9,4,1}\n{4,5,8,3,2,9,4,1} =&gt; {4,5,3,8,2,9,4,1}\n{4,5,3,8,2,9,4,1} =&gt; {4,5,3,2,8,9,4,1}\n{4,5,3,2,8,9,4,1} =&gt; {4,5,3,2,8,4,9,1}\n{4,5,3,2,8,4,9,1} =&gt; {4,5,3,2,8,4,1,9}\nPASS 2 ...\n{4,5,3,2,8,4,1,9} =&gt; {4,3,5,2,8,4,1,9}\n{4,3,5,2,8,4,1,9} =&gt; {4,3,2,5,8,4,1,9}\n{4,3,2,5,8,4,1,9} =&gt; {4,3,2,5,4,8,1,9}\n{4,3,2,5,4,8,1,9} =&gt; {4,3,2,5,4,1,8,9}\nPASS 3 ...\n{4,3,2,5,4,1,8,9} =&gt; {3,4,2,5,4,1,8,9}\n{3,4,2,5,4,1,8,9} =&gt; {3,2,4,5,4,1,8,9}\n{3,2,4,5,4,1,8,9} =&gt; {3,2,4,4,5,1,8,9}\n{3,2,4,4,5,1,8,9} =&gt; {3,2,4,4,1,5,8,9}\nPASS 4 ...\n{3,2,4,4,1,5,8,9} =&gt; {2,3,4,4,1,5,8,9}\n{2,3,4,4,1,5,8,9} =&gt; {2,3,4,1,4,5,8,9}\nPASS 5 ...\n{2,3,4,1,4,5,8,9} =&gt; {2,3,1,4,4,5,8,9}\nPASS 6 ...\n{2,3,1,4,4,5,8,9} =&gt; {2,1,3,4,4,5,8,9}\nPASS 7 ...\n{2,1,3,4,4,5,8,9} =&gt; {1,2,3,4,4,5,8,9}\nPASS 8 ...\n{1,2,3,4,4,5,8,9}\n</code></pre> <p>\u5192\u6ce1\u6392\u5e8f\u6548\u7387\u4e0d\u9ad8\uff0c\u590d\u6742\u5ea6\u4e3a O\uff08n2\uff09\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid insertionSort(int a[], int size);\nvoid print(const int a[], int iMin, int iMax);\n\nint main() {\n   const int SIZE = 8;\n   int a[SIZE] = {8, 4, 5, 3, 2, 9, 4, 1};\n\n   print(a, 0, SIZE - 1);\n   cout &lt;&lt; endl;\n   insertionSort(a, SIZE);\n   print(a, 0, SIZE - 1);\n   cout &lt;&lt; endl;\n}\n\n// Sort the given array of size using insertion sort\nvoid insertionSort(int a[], int size) {\n   int temp;   // for shifting elements\n   for (int i = 1; i &lt; size; ++i) {\n      // for tracing\n      print(a, 0, i - 1);    // already sorted\n      print(a, i, size - 1); // to be sorted\n      cout &lt;&lt; endl;\n\n      // For element at i, insert into proper position in [0, i-1]\n      //  which is already sorted.\n      // Shift down the other elements\n      for (int prev = 0; prev &lt; i; ++prev) {\n         if (a[i] &lt; a[prev]) {\n            // insert a[i] at prev, shift the elements down\n            temp = a[i];\n            for (int shift = i; shift &gt; prev; --shift) {\n               a[shift] = a[shift-1];\n            }\n            a[prev] = temp;\n            break;\n         }\n      }\n   }\n}\n\n// Print the contents of the array in [iMin, iMax]\nvoid print(const int a[], int iMin, int iMax) {\n   cout &lt;&lt; \"{\";\n   for (int i = iMin; i &lt;= iMax; ++i) {\n      cout &lt;&lt; a[i];\n      if (i &lt; iMax) cout &lt;&lt; \",\";\n   }\n   cout &lt;&lt; \"} \";\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/01cppbasics/#const","title":"\u201cconst\u201d \u57fa\u672c\u578b\u51fd\u6570\u53c2\u6570\uff1f","text":"<p>\u4f60\u4e5f\u53ef\u4ee5\u5bf9\u57fa\u672c\u7c7b\u578b\u51fd\u6570\u53c2\u6570\uff08\u4f8b\u5982 int\u3001double\uff09\u4f7f\u7528 const\uff0c\u4ee5\u9632\u6b62\u53c2\u6570\u5728\u51fd\u6570\u5185\u90e8\u88ab\u4fee\u6539\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u57fa\u672c\u7c7b\u578b\u53c2\u6570\u662f\u6309\u503c\u4f20\u9012\u7684\uff08\u5e26\u6709\u514b\u9686\u526f\u672c\uff09\uff0c\u56e0\u6b64\u6c38\u8fdc\u4e0d\u4f1a\u5bf9\u8c03\u7528\u8005\u4ea7\u751f\u526f\u4f5c\u7528\u3002\u6211\u4eec\u901a\u5e38\u4e0d\u5bf9\u57fa\u672c\u7c7b\u578b\u4f7f\u7528 const \u5173\u952e\u5b57\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f7f\u7528 const \u8868\u793a\u4e0d\u5e94\u4ea7\u751f\u526f\u4f5c\u7528\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#208-reference","title":"20.8  \u901a\u8fc7 \u201cReference\u201d \u53c2\u6570\u8fdb\u884c\u5f15\u7528\u4f20\u9012 <p>\u5982\u524d\u6240\u8ff0\uff0c\u57fa\u672c\u7c7b\u578b\u7684\u53c2\u6570\uff08\u4f8b\u5982 int\u3001double\uff09\u662f\u6309\u503c\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u514b\u9686\u526f\u672c\u3002\u5728\u51fd\u6570\u4e2d\u66f4\u6539\u514b\u9686\u7684\u526f\u672c\u4e0d\u4f1a\u5bf9\u8c03\u7528\u65b9\u7684\u526f\u672c\u4ea7\u751f\u526f\u4f5c\u7528\u3002</p> <p>\u5c3d\u7ba1\u5982\u6b64\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7 <code>&amp;</code> \u8868\u793a\u7684\u6240\u8c13\u5f15\u7528\u53c2\u6570\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u57fa\u672c\u7c7b\u578b\u53c2\u6570\u3002\u4f8b\u5982</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint squareByValue (int number);        // Pass-by-value\nvoid squareByReference (int &amp; number); // Pass-by-reference\n\nint main() {\n   int n1 = 8;\n   cout &lt;&lt; \"Before call, value is \" &lt;&lt; n1 &lt;&lt; endl;  // 8\n   cout &lt;&lt; squareByValue(n1) &lt;&lt; endl;  // no side-effect\n   cout &lt;&lt; \"After call, value is \" &lt;&lt; n1 &lt;&lt; endl;   // 8\n\n   int n2 = 9;\n   cout &lt;&lt; \"Before call, value is \" &lt;&lt; n2 &lt;&lt; endl;  // 9\n   squareByReference(n2);  // side-effect\n   cout &lt;&lt; \"After call, value is \" &lt;&lt; n2 &lt;&lt; endl;   // 81\n}\n\n// Pass parameter by value - no side effect\nint squareByValue (int number) {\n   return number * number;\n}\n\n// Pass parameter by reference by declaring as reference (&amp;)\n// - with side effect to the caller\nvoid squareByReference (int &amp; number) {\n   number = number * number;\n}\n</code></pre> <p>\u5728\u51fd\u6570 squareByReference() \u4e2d\uff0c\u6211\u4eec\u5c06\u53c2\u6570 number \u58f0\u660e\u4e3a int &amp;\uff08int \u7684\u5f15\u7528\uff09\uff0c\u4ece\u800c\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u3002\u8fd9\u6837\uff0c\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u7684\u662f\u8c03\u7528\u8005\u7684\u526f\u672c\uff08\u800c\u4e0d\u662f\u503c\u4f20\u9012\u4e2d\u7684\u514b\u9686\u526f\u672c\uff09\u3002\u51fd\u6570\u5185\u90e8\u7684\u66f4\u6539\u4f1a\u4ea7\u751f\u526f\u4f5c\u7528\u3002</p> <p>Pass-by-reference \u4e0d\u5e38\u7528\u4e8e\u57fa\u672c\u7c7b\u578b\uff08\u4f8b\u5982 <code>int</code>\u3001<code>double</code>\uff09\u2014\u2014\u4e0a\u9762\u7684\u4f8b\u5b50\u7eaf\u7cb9\u662f\u4e3a\u4e86\u5b66\u672f\u8bf4\u660e\u3002\u4f46\u5b83\u5e7f\u6cdb\u7528\u4e8e\u590d\u5408\u7c7b\u578b\uff08\u4f8b\u5982\u6570\u7ec4\u548c\u5bf9\u8c61\uff09\uff0c\u4ee5\u907f\u514d\u514b\u9686\u5927\u91cf\u6570\u636e\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd.</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#209","title":"20.9\u6570\u5b66\u51fd\u6570\uff08\u5934\u6587\u4ef6 \uff09 <p>C++ \u5728\u5e93 \uff08\u4ece C \u7684\u201cmath.h\u201d\u79fb\u690d\u8fc7\u6765\uff09\u4e2d\u63d0\u4f9b\u4e86\u8bb8\u591a\u5e38\u7528\u7684\u6570\u5b66\u51fd\u6570\u3002\u5176\u4e2d\u4e00\u4e9b\u51fd\u6570\u7684\u7b7e\u540d\u662f\uff1a    <code>sin(x), cos(x), tan(x), asin(x), acos(x), atan(x):   Take argument-type and return-type of float, double, long double.</code>     <code>atan2(y, x):   Return arc-tan of y/x. Better than atan(x) for handling 90 degree.</code>   <code>sinh(x), cosh(x), tanh(x):   hyper-trigonometric functions.</code>   <code>pow(x, y), sqrt(x):   power and square root.</code>   <code>ceil(x), floor(x):   returns the ceiling and floor integer of floating point number.</code>   <code>fabs(x), fmod(x, y):   floating-point absolute and modulus.</code>   <code>exp(x), log(x), log10(x):   exponent and logarithm functions.</code>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#2010","title":"20.10 \u751f\u6210\u968f\u673a\u6570 <p><code>cstdlib</code> \u5934\u6587\u4ef6\uff08\u4ece C \u7684 <code>stdlib.h</code> \u79fb\u690d\u800c\u6765\uff09\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570 <code>rand\uff08\uff09\uff0c</code> \u8be5\u51fd\u6570\u751f\u6210\u4e00\u4e2a\u4ecb\u4e8e 0 \u548c <code>RAND_MAX</code>\uff08\u542b\uff09\u4e4b\u95f4\u7684\u4f2a\u968f\u673a\u6574\u6570\u3002<code>RAND_MAX</code> \u662f <code>cstdlib</code> \u4e2d\u5b9a\u4e49\u7684\u5e38\u91cf\uff08\u901a\u5e38\u662f 16/32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u6700\u5927\u503c\uff0c\u4f8b\u5982 32767\uff09\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7 <code>rand\uff08\uff09 % n</code> \u751f\u6210 <code>[0\uff0cn\uff09</code> \u4e4b\u95f4\u7684\u968f\u673a\u6570\u3002</p> <p><code>rand\uff08\uff09</code> \u5728\u4e0d\u540c\u7684\u8c03\u7528\u4e2d\u751f\u6210\u76f8\u540c\u7684\u4f2a\u968f\u673a\u6570\u3002<code>cstblib</code> \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a <code>srand\uff08\uff09</code> \u51fd\u6570\u6765\u8bbe\u5b9a\u6216\u521d\u59cb\u5316\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u901a\u8fc7 <code>time\uff080\uff09</code> \u51fd\u6570\u83b7\u53d6\u7684\u5f53\u524d\u65f6\u95f4\uff08\u5728 <code>&lt;ctime&gt;</code> \u6807\u5934\u4e2d\uff09\u4e3a\u5176\u8bbe\u5b9a\u79cd\u5b50\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u81ea 1970 \u5e74 1 \u6708 1 \u65e5\u4ee5\u6765\u7684\u79d2\u6570\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;  // for rand(), srand()\n#include &lt;ctime&gt;    // for time()\nusing namespace std;\n\nint main() {\n   // rand() generate a random number in [0, RAND_MAX]\n   cout &lt;&lt; \"RAND_MAX is \" &lt;&lt; RAND_MAX &lt;&lt; endl;   // 32767\n\n   // Generate 10 pseudo-random numbers between 0 and 99\n   //   without seeding the generator.\n   // You will get the same sequence, every time you run this program\n   for (int i = 0; i &lt; 10; ++i) {\n      cout &lt;&lt; rand() % 100 &lt;&lt; \" \";   // need &lt;cstdlib&gt; header\n   }\n   cout &lt;&lt; endl;\n\n   // Seed the random number generator with current time\n   srand(time(0));   // need &lt;cstdlib&gt; and &lt;ctime&gt; header\n   // Generate 10 pseudo-random numbers\n   // You will get different sequence on different run,\n   //   because the current time is different\n   for (int i = 0; i &lt; 10; ++i) {\n      cout &lt;&lt; rand() % 100 &lt;&lt; \" \";   // need &lt;cstdlib&gt; header\n   }\n   cout &lt;&lt; endl;\n}\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#rand","title":"\u6d4b\u8bd5 rand\uff08\uff09 \u7684\u5206\u5e03","text":"<p>\u6211\u4eec\u5c06\u901a\u8fc7\u53cd\u590d\u63b7 6 \u9762\u9ab0\u5b50\u6765\u6d4b\u8bd5 <code>rand\uff08\uff09</code> \u7684\u5206\u5e03\u5e76\u8ba1\u7b97\u51fa\u73b0\u6b21\u6570\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;cstdlib&gt;  // for rand(), srand()\n#include &lt;ctime&gt;    // for time()\nusing namespace std;\n\nconst int TOTAL_COUNT = 2000000;  // Close to INT_MAX\nconst int NUM_FACES = 6;\nint frequencies[6] = {0}; // frequencies of 0 to 5, init to zero\n\nint main() {\n   srand(time(0)); // seed random number generator with current time\n   // Throw the die and count the frequencies\n   for (int i = 0; i &lt; TOTAL_COUNT; ++i) {\n      ++frequencies[rand() % 6];\n   }\n\n   // Print statistics\n   cout &lt;&lt; fixed &lt;&lt; setprecision(2);\n   for (int i = 0; i &lt; NUM_FACES; i++) {\n      cout &lt;&lt; i+1 &lt;&lt; \": \" &lt;&lt; frequencies[i]\n           &lt;&lt; \" (\" &lt;&lt; 100.0 * frequencies[i] / TOTAL_COUNT &lt;&lt; \"%)\" &lt;&lt; endl;\n   }\n}\n</code></pre> <pre><code>1: 333109 (16.66%)\n2: 333113 (16.66%)\n3: 333181 (16.66%)\n4: 333562 (16.68%)\n5: 333601 (16.68%)\n6: 333434 (16.67%)\n</code></pre>"},{"location":"DEV/Programming/Cpp/01cppbasics/#21_1","title":"21 \u6587\u4ef6\u8f93\u5165/\u8f93\u51fa\uff08\u5934\u6587\u4ef6) <p><code>&lt;fstream&gt;</code> \u6807\u5934\u4e3a\u6587\u4ef6\u8f93\u5165\u548c\u8f93\u51fa\u63d0\u4f9b <code>ifstream</code> \uff08\u8f93\u5165\u6587\u4ef6\u6d41\uff09 \u548c <code>ofstream</code> \uff08\u8f93\u51fa\u6587\u4ef6\u6d41\uff09\u3002\u6587\u4ef6\u8f93\u5165/\u8f93\u51fa\u7684\u6b65\u9aa4\u662f\uff1a</p> <ul> <li>\u4e3a input \u521b\u5efa <code>ifstream</code>\uff0c\u6216\u4e3a output \u521b\u5efa <code>ofstream</code>\u3002</li> <li>\u901a\u8fc7 <code>open\uff08filename\uff09</code> \u5c06\u6d41\u8fde\u63a5\u5230\u8f93\u5165\u6216\u8f93\u51fa\u6587\u4ef6\u3002</li> <li>\u901a\u8fc7\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26 <code>&lt;&lt;</code> \u6267\u884c\u683c\u5f0f\u5316\u8f93\u51fa\uff0c\u6216\u901a\u8fc7\u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26 <code>&gt;&gt;</code> \u6267\u884c\u8f93\u5165\uff0c\u7c7b\u4f3c\u4e8e <code>cout &lt;&lt;</code> \u548c <code>cin &gt;&gt;</code>\u3002</li> <li>\u5173\u95ed\u6587\u4ef6\u5e76\u91ca\u653e\u6d41\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;   // file stream\n#include &lt;cstdlib&gt;\nusing namespace std;\n\nint main() {\n   ifstream fin;   // Input stream\n   ofstream fout;  // Output stream\n\n   // Try opening the input file\n   fin.open(\"in.txt\");\n   if (!fin.is_open()) {\n      cerr &lt;&lt; \"error: open input file failed\" &lt;&lt; endl;\n      abort();  // Abnormally terminate the program (in &lt;cstdlib&gt;)\n   }\n\n   int sum = 0, number, count = 0;\n   while (!(fin.eof())) {\n      // Use &gt;&gt; to read\n      fin &gt;&gt; number;\n      sum += number;\n      ++count;\n   }\n   double average = double(sum) / count;\n   cout &lt;&lt; \"Count = \" &lt;&lt; count &lt;&lt; \" average = \" &lt;&lt; average &lt;&lt; endl;\n   fin.close();\n\n   // Try opening the output file\n   fout.open(\"out.txt\");\n   if (!fout.is_open()) {\n      cerr &lt;&lt; \"error: open output file failed\" &lt;&lt; endl;\n      abort();\n   }\n   // Write the average to the output file using &lt;&lt;\n   fout &lt;&lt; average;\n   fout.close();\n   return 0;\n}\n</code></pre>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#intxt","title":"\u8f93\u5165\u6587\u4ef6\uff1ain.txt","text":"<pre><code>12 15 35 26 68\n</code></pre>"},{"location":"DEV/Programming/Cpp/01cppbasics/#outtxt","title":"\u8f93\u51fa\u6587\u4ef6\uff1aout.txt","text":"<pre><code>31.20\n</code></pre> <p>\u8bf4\u660e</p> <ul> <li>\u6253\u5f00\u6587\u4ef6\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>&gt;&gt;</code> \u548c <code>&lt;&lt;</code> \u8fdb\u884c\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u7c7b\u4f3c\u4e8e <code>cin &gt;&gt;</code> \u548c <code>cout &lt;&lt;</code>\u3002\uff08\u9ad8\u7ea7\u8bf4\u660e\uff1a<code>ifstream</code> \u662f <code>istream</code> \u7684\u5b50\u7c7b\uff0c<code>\u5176\u4e2d cin</code> \u5c5e\u4e8e\u5176\u4e2d\u3002<code>ofstream</code> \u662f <code>ostream \u7684</code>\u5b50\u7c7b\uff0c<code>\u5176\u4e2d cout</code> \u5c5e\u4e8e\u5176\u4e2d\u3002</li> <li>\u540c\u6837\uff0cIO \u7eb5\u5668\uff08\u4f8b\u5982 <code>fixed</code>\u3001<code>setprecision\uff08\uff09</code> \u548c <code>setw\uff08\uff09</code>\uff09\u4e5f\u9002\u7528\u4e8e\u6587\u4ef6\u6d41\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/01cppbasics/#22-namespace","title":"22 Namespace <p>\u5f53\u60a8\u4f7f\u7528\u4e0d\u540c\u7684\u5e93\u6a21\u5757\u65f6\uff0c\u603b\u662f\u5b58\u5728\u540d\u79f0\u5d29\u6e83\u7684\u53ef\u80fd\u6027\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u5e93\u53ef\u80fd\u4f1a\u51fa\u4e8e\u4e0d\u540c\u7684\u76ee\u7684\u4f7f\u7528\u76f8\u540c\u7684\u540d\u79f0\u3002\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u5728 C++ \u4e2d\u4f7f\u7528 namespace \u6765\u89e3\u51b3\u3002 \u547d\u540d\u7a7a\u95f4\u662f\u540c\u4e00\u547d\u540d\u8303\u56f4\u4e0b\u7684\u6807\u8bc6\u7b26\u7684\u96c6\u5408\u3002\uff08\u5728 UML \u548c Java \u4e2d\u79f0\u4e3a package\u3002\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u5b9e\u4f53\u540d\u79f0\u7531\u547d\u540d\u7a7a\u95f4\u540d\u79f0\u9650\u5b9a \uff0c\u540e\u8ddf <code>\uff1a\uff1a\uff08</code> \u79f0\u4e3a\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26\uff09\uff0c\u683c\u5f0f\u4e3a <code>namespace\uff1a\uff1aentityName</code>\u3002</p> <p>\u8981\u5c06\u5b9e\u4f53\u653e\u7f6e\u5728 namespace \u4e0b\uff0c\u8bf7\u4f7f\u7528\u5173\u952e\u5b57 <code>namespace</code>\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>namespace myNameSpace {  \n   int foo;               // variable\n   int f() { ...... };    // function\n   class Bar { ...... };  // compound type such as class and struct\n}\n\n// To reference the entities, use\nmyNameSpace::foo\nmyNameSpace::f()\nmyNameSpace::Bar\n</code></pre> <p>\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5305\u542b\u53d8\u91cf\u3001\u51fd\u6570\u3001\u6570\u7ec4\u548c\u590d\u5408\u7c7b\u578b\uff0c\u4f8b\u5982\u7c7b\u548c\u7ed3\u6784\u3002</p> <pre><code>#include &lt;iostream&gt;\n\nnamespace a {   // contains variables\n   int i1 = 8;\n   int i2 = 9;\n}\n\nnamespace b {   // contains function\n   int max(int n1, int n2) {\n      return (n1 &gt; n2) ? n1 : n2;\n   }\n}\n\nint main() {\n   std::cout &lt;&lt; a::i1 &lt;&lt; std::endl;                // 8\n   std::cout &lt;&lt; b::max(a::i1, a::i2) &lt;&lt; std::endl; // 9\n}\n</code></pre> <p>\u547d\u540d\u7a7a\u95f4\u5df2\u6253\u5f00\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6<code>\u547d\u540d\u7a7a\u95f4</code>\u5b9a\u4e49\u5c06\u66f4\u591a\u540d\u79f0\u6dfb\u52a0\u5230\u73b0\u6709\u547d\u540d\u7a7a\u95f4\u4e2d\u3002</p>","text":""},{"location":"DEV/Programming/Cpp/01cppbasics/#using-namespace","title":"Using Namespace","text":"<p>\u4f8b\u5982\uff0cC++ \u6807\u51c6\u5e93\u4e2d\u7684\u6240\u6709\u6807\u8bc6\u7b26\uff08\u4f8b\u5982 <code>cout</code>\u3001<code>endl</code> \u548c <code>string</code>\uff09\u90fd\u653e\u7f6e\u5728\u540d\u4e3a <code>std</code> \u7684\u547d\u540d\u7a7a\u95f4\u4e0b\u3002\u8981\u5f15\u7528\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u6807\u8bc6\u7b26\uff0c\u60a8\u6709\u4e09\u4e2a\u9009\u9879\uff1a</p> <p>\u4f7f\u7528\u5b8c\u5168\u9650\u5b9a\u7684\u540d\u79f0\uff0c\u4f8b\u5982 <code>std\uff1a\uff1acout</code>\u3001<code>std\uff1a\uff1aendl</code>\u3001<code>std\uff1a\uff1asetw\uff08\uff09</code> \u548c <code>std\uff1a\uff1astring</code>\u3002\u4f8b\u5982 \u7f3a\u5c11 \u201c<code>std\uff1a\uff1a</code>\u201d \u4f1a\u5bfc\u81f4 \u201c\u9519\u8bef\uff1a\u672a\u5728\u6b64\u8303\u56f4\u5185\u58f0\u660e 'xxx'\u201d\u3002</p> <pre><code>std::cout &lt;&lt; std::setw(6) &lt;&lt; 1234 &lt;&lt; std::endl;\n</code></pre> <p>\u4f7f\u7528 using \u58f0\u660e\u6765\u58f0\u660e\u7279\u5b9a\u6807\u8bc6\u7b26\u3002\u4f8b\u5982 \u4f60\u53ef\u4ee5\u7701\u7565 <code>cout</code> \u548c <code>endl</code> \u7684 \u201c<code>std\uff1a\uff1a</code>\u201d\uff0c\u4f46\u4f60\u4ecd\u7136\u5fc5\u987b\u5bf9 <code>setw</code> \u4f7f\u7528 \u201c<code>std\uff1a\uff1a</code>\u201d\u3002</p> <pre><code>using std::cout;\nusing std::endl;\n......\ncout &lt;&lt; std::setw(6) &lt;&lt; 1234 &lt;&lt; endl;\n</code></pre> <p>\u4f7f\u7528 using namespace \u6307\u4ee4 \u3002\u4f8b\u5982 <code>using namespace</code> \u6307\u4ee4\u6709\u6548\u5730\u5c06\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u6240\u6709\u6807\u8bc6\u7b26\u5f15\u5165\u5168\u5c40\u8303\u56f4\uff0c\u5c31\u50cf\u5b83\u4eec\u5728\u5168\u5c40\u8303\u56f4\u5185\u53ef\u7528\u4e00\u6837\u3002\u60a8\u53ef\u4ee5\u5728\u6ca1\u6709\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26\u7684\u60c5\u51b5\u4e0b\u5f15\u7528\u5b83\u4eec\u3002\u8bf7\u6ce8\u610f\uff0c<code>using namespace</code> \u6307\u4ee4\u53ef\u80fd\u4f1a\u5bfc\u81f4 name \u5d29\u6e83\uff0c\u5e76\u4e14 identifier \u4f4d\u4e8e\u5168\u5c40\u8303\u56f4\u5185\u3002</p> <pre><code>using namespace std;\n......\ncout &lt;&lt; setw(6) &lt;&lt; 1234 &lt;&lt; endl;\n</code></pre> <p>\u5bf9\u4e8e\u957f\u547d\u540d\u7a7a\u95f4\u540d\u79f0\uff0c\u60a8\u53ef\u4ee5\u5b9a\u4e49\u547d\u540d\u7a7a\u95f4\u7684\u7b80\u5199\uff08\u6216\u522b\u540d\uff09\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u60a8\u73b0\u5728\u53ef\u4ee5\u5c06\u7c7b\u79f0\u4e3a <code>shorthand\uff1a\uff1aentityName</code></p> <pre><code>namespace shorthand = namespace-name;\n</code></pre> <p>\u5982\u524d\u6240\u8ff0\uff0c\u6240\u6709\u6807\u51c6 C++ \u5e93\u7ec4\u4ef6\u90fd\u6253\u5305\u5728\u4e00\u4e2a\u540d\u4e3a <code>std</code> \u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u3002\u5b83\u4eec\u5305\u62ec <code>cin</code>\u3001<code>cout</code>\u3001<code>endl</code>\u3001<code>setw\uff08\uff09\u3001setprecision``\uff08\uff09</code> \u548c <code>string</code>\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u603b\u662f\u5728\u201c<code>#include &lt;iostream&gt;</code>\u201d\u548c\u201c<code>#include &lt;string&gt;</code>\u201d\u4e4b\u540e\u5305\u542b\u4e00\u4e2a\u201c<code>using namespace std;\u201d</code> \u6307\u4ee4\u3002\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u9650\u5b9a\u540d\u79f0\uff0c\u4f8b\u5982 <code>std\uff1a\uff1acin</code>\u3001<code>std\uff1a\uff1acout</code>\u3001<code>std\uff1a\uff1aendl</code>\u3001<code>std\uff1a\uff1astring</code>\uff0c\u800c\u4e0d\u662f <code>using</code> \u6307\u4ee4\u3002\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u9009\u62e9\u6027 using\uff0c\u4f8b\u5982 \u201c<code>using std\uff1a\uff1acin;</code>\u201d\u3001\u201c<code>using std\uff1a\uff1acout;</code>\u201d\u3001\u201c<code>using std\uff1a\uff1aendl;</code>\u201d \u548c \u201c<code>using std\uff1a\uff1astring;</code>\u201d\u3002</p> <p>\u6bd4\u8f83\u4ee5\u4e0b\u4e24\u4e2a\u4ee3\u7801\u793a\u4f8b\uff1a</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;  // std namespace is available to ALL\n\nint main() { ....... }\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main() { \n   using namespace std; // std namespace is available to main() only\n   .......\n}\n</code></pre> <p>[!CAUTION]</p> <p>\u53ef\u4ee5\u4f7f\u7528 C \u98ce\u683c\u7684\u6807\u5934 \u201c<code>iostream.h</code>\u201d\uff0c\u5b83\u4e0d\u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u6765\u66ff\u6362\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\u7684\u524d\u4e24\u884c\u3002</p>"},{"location":"DEV/Programming/Cpp/01cppbasics/#global-namespace","title":"Global Namespace \u5168\u5c40\u547d\u540d\u7a7a\u95f4","text":"<p>\u5728 C++ \u4e2d\uff0c\u5982\u679c\u5b9e\u4f53\uff08\u53d8\u91cf\u3001\u51fd\u6570\u6216\u7c7b\uff09\u672a\u5305\u542b\u5728<code>\u547d\u540d\u7a7a\u95f4</code>\u58f0\u660e\u4e2d\uff0c\u5219\u5b83\u5c5e\u4e8e\u5168\u5c40\u547d\u540d\u7a7a\u95f4 \uff08\u7531 <code>\uff1a\uff1a</code> \u6807\u8bc6\uff0c\u6ca1\u6709\u547d\u540d\u7a7a\u95f4\u540d\u79f0\uff09\u3002\u4f8b\u5982\uff0c<code>main\uff08\uff09</code> \u53ef\u4ee5\u6807\u8bc6\u4e3a <code>\uff1a\uff1amain\uff08\uff09\u3002</code></p>"},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/","title":"CPP Basics-2","text":""},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#1enum","title":"1\uff08enum)\u679a\u4e3e","text":"<p>\u679a\u4e3e\u662f\u4e00\u79cd\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u7531\u4e00\u7ec4\u547d\u540d\u7684\u5e38\u91cf\u7ec4\u6210\uff0c\u79f0\u4e3a\u679a\u4e3e\u5668\u3002\u679a\u4e3e\u5b9a\u4e49\u4e86\u53ef\u4ee5\u8d4b\u503c\u7ed9\u8be5\u7c7b\u578b\u5bf9\u8c61\u7684\u5b8c\u6574\u503c\u96c6\u3002\u4f8b\u5982</p> <pre><code>enum Color {\n   RED, GREEN, BLUE\n} myColor;        // Define an enum and declare a variable of the enum\n......\nmyColor = RED;    // Assign a value to an enum\nColor yourColor;\nyourColor = GREEN;\n</code></pre> <p>\u679a\u4e3e\u5668\u5728\u5185\u90e8\u8868\u793a\u4e3a\u6574\u6570\u3002\u4f60\u5728\u8d4b\u503c\u65f6\u5fc5\u987b\u4f7f\u7528\u540d\u79f0\uff0c\u800c\u4e0d\u662f\u6570\u5b57\u3002\u7136\u800c\uff0c\u5728\u7b97\u672f\u8fd0\u7b97\u4e2d\uff0c\u5b83\u4f1a\u88ab\u63d0\u5347\u4e3a int\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u662f\u4ece\u96f6\u5f00\u59cb\u7684\u8fde\u7eed\u6570\u5b57\u3002\u4f60\u53ef\u4ee5\u5206\u914d\u4e0d\u540c\u7684\u6570\u5b57\uff0c\u4f8b\u5982\uff0c</p> <pre><code>enum Color {\n   RED = 1, GREEN = 5, BLUE\n};\n</code></pre> <p>\u8981\u6253\u5370\u679a\u4e3e\u5668\u540d\u79f0\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5e76\u4ee5\u679a\u4e3e\u5668\u7f16\u53f7\u4f5c\u4e3a\u7d22\u5f15\u3002</p>"},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#2struct","title":"2struct\u7ed3\u6784","text":"<p>\u4e00\u4e2a <code>struct</code> \uff08\u7ed3\u6784\uff09\u662f\u4e00\u4e2a\u7528\u6237\u5b9a\u4e49\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u7528\u4e8e\u5b58\u50a8\u4e00\u7ec4\u4e0d\u540c\u7c7b\u578b\u7684\u53d8\u91cf\uff08\u79f0\u4e3a\u6210\u5458\uff09\u3002\u8981\u5b9a\u4e49\u4e00\u4e2a <code>struct</code> \uff1a</p> <pre><code>struct StructName {\n   type1 var1;\n   type2 var2;\n   .......\n};  // need to terminate by a semi-colon\n</code></pre> <p><code>struct</code> \u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08OOP\uff09\u7684\u4e2d\u95f4\u6b65\u9aa4\u3002\u5728 OOP \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 <code>class</code> \uff0c\u8fd9\u662f\u4e00\u4e2a\u7528\u6237\u5b9a\u4e49\u7684\u7ed3\u6784\uff0c\u5305\u542b\u6570\u636e\u6210\u5458\u548c\u6210\u5458\u51fd\u6570\u3002</p>"},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#struct-point","title":"\u793a\u4f8b\uff1astruct Point","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Point {\n   int x;\n   int y;\n};\n\nint main() {\n   Point p1 = {3, 4};  // declare and init members\n   cout &lt;&lt; \"(\" &lt;&lt; p1.x &lt;&lt; \",\" &lt;&lt; p1.y &lt;&lt; \")\" &lt;&lt; endl;  // (3,4)\n\n   Point p2 = {};      // declare and init numbers to defaults\n   cout &lt;&lt; \"(\" &lt;&lt; p2.x &lt;&lt; \",\" &lt;&lt; p2.y &lt;&lt; \")\" &lt;&lt; endl;  // (0,0)\n   p2.x = 7;\n   p2.y = 8;\n   cout &lt;&lt; \"(\" &lt;&lt; p2.x &lt;&lt; \",\" &lt;&lt; p2.y &lt;&lt; \")\" &lt;&lt; endl;  // (7,8)\n   return 0;\n}\n</code></pre> <p>[!NOTE]</p> <ul> <li>\u4f60\u53ef\u4ee5\u50cf\u7b2c 11 \u884c\u548c\u7b2c 14 \u884c\u6240\u793a\u90a3\u6837\u58f0\u660e\u5e76\u521d\u59cb\u5316\u4e00\u4e2a <code>struct</code> \u7684\u5b9e\u4f8b\u3002</li> <li>\u8981\u8bbf\u95ee <code>struct</code> \u7684\u6210\u5458\uff0c\u8bf7\u4f7f\u7528\u70b9\u53f7\uff08 <code>.</code> \uff09\u8fd0\u7b97\u7b26\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#struct-person","title":"\u793a\u4f8b\uff1astruct Person","text":"<p>\u4e00\u4e2a <code>struct</code> \u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7c7b\u578b\u7684\u6210\u5458\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nstruct Person {\n   string name;\n   int age;\n   double height;\n   double weight;\n};\n\nint main() {\n   Person peter = {\"Peter Jone\", 18, 180.5, 70.5};\n   cout &lt;&lt; \"Name: \" &lt;&lt; peter.name &lt;&lt; endl;\n   cout &lt;&lt; \"Age: \" &lt;&lt; peter.age &lt;&lt; endl;\n   cout &lt;&lt; \"Height: \" &lt;&lt; peter.height &lt;&lt; endl;\n   cout &lt;&lt; \"weight: \" &lt;&lt; peter.weight &lt;&lt; endl;\n   return 0;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#structs-point-and-rectangle","title":"structs Point and Rectangle","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Point {\n  int x, y;\n};\n\nstruct Rectangle {\n  Point topLeft;\n  Point bottomRight;\n};\n\nint main() {\n   Point p1, p2;\n   p1.x = 0;  // p1 at (0, 3)\n   p1.y = 3;\n   p2.x = 4;  // p2 at (4, 0)\n   p2.y = 0;\n\n   cout &lt;&lt; \"p1 at (\" &lt;&lt; p1.x &lt;&lt; \",\" &lt;&lt; p1.y &lt;&lt; \")\" &lt;&lt; endl;\n   cout &lt;&lt; \"p2 at (\" &lt;&lt; p2.x &lt;&lt; \",\" &lt;&lt; p2.y &lt;&lt; \")\" &lt;&lt; endl;\n\n   Rectangle rect;\n   rect.topLeft = p1;\n   rect.bottomRight = p2;\n\n   cout &lt;&lt; \"Rectangle top-left at (\" &lt;&lt; rect.topLeft.x\n        &lt;&lt; \",\" &lt;&lt; rect.topLeft.y &lt;&lt; \")\" &lt;&lt; endl;\n   cout &lt;&lt; \"Rectangle bottom-right at (\" &lt;&lt; rect.bottomRight.x\n        &lt;&lt; \",\" &lt;&lt; rect.bottomRight.y &lt;&lt; \")\" &lt;&lt; endl;\n\n   return 0;\n}\n</code></pre> <pre><code>p1 at (0,3)\np2 at (4,0)\nRectangle top-left at (0,3)\nRectangle bottom-right at (4,0)\n</code></pre>"},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#c-structs-c","title":"C++ structs C++ \u7ed3\u6784\u4f53","text":"<p>C++ \u5c06 C \u7684 <code>struct</code> \u6f14\u53d8\u4e3a OOP \u7c7b\u3002\u9057\u7559\u7684 C \u7684 <code>struct</code> \u5305\u542b\u516c\u5171\u6570\u636e\u6210\u5458\u3002C++ \u7684 <code>struct</code> \uff0c\u5982\u540c\u7c7b\u4e00\u6837\uff0c\u53ef\u80fd\u5305\u542b\u8bbf\u95ee\u8bf4\u660e\u7b26\uff08 <code>public</code> \u3001 <code>private</code> \u3001 <code>protected</code> \uff09\u3001\u6210\u5458\u51fd\u6570\u3001\u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570\u5e76\u652f\u6301\u7ee7\u627f\u3002C++ \u7684 <code>struct</code> \u548c\u7c7b\u4e4b\u95f4\u7684\u552f\u4e00\u533a\u522b\u662f <code>struct</code> \u7684\u6210\u5458\u9ed8\u8ba4\u5177\u6709 <code>public</code> \u8bbf\u95ee\u6743\u9650\uff0c\u800c\u7c7b\u7684\u6210\u5458\u9ed8\u8ba4\u5177\u6709 <code>private</code> \u8bbf\u95ee\u6743\u9650\uff0c\u5982\u679c\u672a\u4f7f\u7528\u8bbf\u95ee\u8bf4\u660e\u7b26\u3002\u6b64\u5916\uff0cC++ \u7684 <code>struct</code> \u9ed8\u8ba4\u91c7\u7528 <code>public</code> \u7ee7\u627f\uff0c\u800c\u7c7b\u9ed8\u8ba4\u91c7\u7528 <code>private</code> \u7ee7\u627f\u3002</p>"},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#3bit-wise-operations","title":"3Bit-wise Operations\u4f4d\u8fd0\u7b97","text":""},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#31","title":"3.1 \u4f4d\u903b\u8f91\u8fd0\u7b97","text":"<p>\u4f4d\u8fd0\u7b97\u7b26\u4ee5\u9010\u4f4d\u7684\u65b9\u5f0f\u5bf9\u4e00\u4e2a\u6216\u4e24\u4e2a\u64cd\u4f5c\u6570\u6267\u884c\u64cd\u4f5c\u3002</p> Operator Description Usage &amp; Bit-wise AND \u6309\u4f4d\u4e0e expr1 &amp; expr2 | Bit-wise OR \u6309\u4f4d\u6216 expr1 | expr2 ! Bit-wise NOT \u6309\u4f4d\u53d6\u53cd !expr ^ Bit-wise XOR \u6309\u4f4d\u5f02\u6216 expr1 ^ expr2 <p>\u590d\u5408\u8fd0\u7b97\u7b26 <code>&amp;=</code> \u3001 <code>|=</code> \u548c <code>^=</code> \u4e5f\u53ef\u7528</p>"},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#32","title":"3.2\u4f4d\u79fb\u64cd\u4f5c","text":"<p>\u4f4d\u79fb\u8fd0\u7b97\u7b26\u5bf9\u64cd\u4f5c\u6570\u6267\u884c\u5de6\u79fb\u6216\u53f3\u79fb\u6307\u5b9a\u7684\u4f4d\u6570\u3002\u5de6\u79fb\u7528\u96f6\u586b\u5145\u3002\u53f3\u79fb\u53ef\u80fd\u7528\u96f6\u6216\u7b26\u53f7\u4f4d\u586b\u5145\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5b9e\u73b0</p> Operator Usage Description &lt;&lt; operand &lt;&lt; number \u64cd\u4f5c\u6570 &lt;&lt; \u6570\u5b57 Left-shift and padded with zeros \u5de6\u79fb\u5e76\u7528\u96f6\u586b\u5145 &gt;&gt; operand &gt;&gt; number \u64cd\u4f5c\u6570 &gt;&gt; \u6570\u5b57 Right-shift \u53f3\u79fb"},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#4","title":"4 \u66f4\u591a\u51fd\u6570\u5185\u5bb9","text":""},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#41","title":"4.1\u5185\u8054\u51fd\u6570","text":"<p>\u51fd\u6570\u8c03\u7528\u6709\u5176\u5f00\u9500\uff08\u5904\u7406\u53c2\u6570\u3001\u7ba1\u7406\u51fd\u6570\u5806\u6808\u3001\u5206\u652f\u548c\u8fd4\u56de\uff09\u3002\u5bf9\u4e8e\u7b80\u5355\u4e14\u77ed\u5c0f\u7684\u51fd\u6570\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>inline</code> \u51fd\u6570\u6765\u6d88\u9664\u51fd\u6570\u8c03\u7528\u5f00\u9500\u3002\u5173\u952e\u5b57 <code>inline</code> \uff08\u5728\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u4e4b\u524d\uff09\u5efa\u8bae\u7f16\u8bd1\u5668\u5728\u539f\u5730\u201c\u5c55\u5f00\u201d\u51fd\u6570\u4ee3\u7801\uff0c\u800c\u4e0d\u662f\u6267\u884c\u51fd\u6570\u8c03\u7528\u3002\u4f8b\u5982</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ninline int max(int n1, int n2) {\n   return (n1 &gt; n2) ? n1 : n2;\n}\n\nint main() {\n   int i1 = 5, i2 = 6;\n   cout &lt;&lt; max(i1, i2) &lt;&lt; endl;  // inline request to expand to (i1 &gt; i2) ? i1 : i2\n   return 0;\n}\n</code></pre> <p>\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u5c06\u7b2c 11 \u884c\u6269\u5c55\u4e3a\uff1a</p> <pre><code>cout &lt;&lt; (i1 &gt; i2) ? i1 : i2 &lt;&lt; endl;\n</code></pre> <p>\u5c55\u5f00\u7684\u8bed\u53e5\u6bd4\u8c03\u7528\u51fd\u6570\u66f4\u5feb\u3002\u4ee3\u4ef7\u662f\u4ee3\u7801\u4f53\u79ef\u66f4\u5927\u3002</p> <p>Inline \u53ea\u662f\u4e00\u4e2a\u5efa\u8bae\u3002\u7f16\u8bd1\u5668\u53ef\u80fd\u4e0d\u652f\u6301\u6216\u53ef\u80fd\u5ffd\u7565\u8be5\u5efa\u8bae\u3002</p>"},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#define","title":"\u5185\u8054\u51fd\u6570\u4e0e #define \u5b8f","text":"<p>\u5728 C \u8bed\u8a00\u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>#define</code> \u9884\u5904\u7406\u5668\u6307\u4ee4\u6765\u5b9a\u4e49\u5e26\u53c2\u6570\u7684\u5b8f\uff0c\u8fd9\u4e9b\u5b8f\u4f1a\u5728\u9884\u5904\u7406\u8fc7\u7a0b\u4e2d\u88ab\u5c55\u5f00\u3002\u4f8b\u5982\uff0c</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n#define SQUARE(x) x*x     // Macro with argument\n\ninline int square(int x) { return x*x; }  // inline function\n\nint main() {\n   cout &lt;&lt; SQUARE(5) &lt;&lt; endl;  // expand to 5*5 (25)\n   int x = 2, y = 3;\n   cout &lt;&lt; SQUARE(x) &lt;&lt; endl;  // expand to x*x (4)\n\n   // Problem with the following macro expansions\n   cout &lt;&lt; SQUARE(5+5) &lt;&lt; endl;   // expand to 5+5*5+5 - wrong answer\n   cout &lt;&lt; square(5+5) &lt;&lt; endl;   // Okay square(10)\n   cout &lt;&lt; SQUARE(x+y) &lt;&lt; endl;   // expand to x+y*x+y - wrong answer\n   cout &lt;&lt; square(x+y) &lt;&lt; endl;   // Okay\n      // can be fixed using #define SQUARE(x) (x)*(x)\n\n   cout &lt;&lt; SQUARE(++x) &lt;&lt; endl;   // expand to ++x*++x (16) - x increment twice\n   cout &lt;&lt; x &lt;&lt; endl;             // x = 4\n   cout &lt;&lt; square(++y) &lt;&lt; endl;   // Okay ++y, (y*y) (16)\n   cout &lt;&lt; y &lt;&lt; endl;             // y = 4\n}\n</code></pre> <p>\u5185\u8054\u51fd\u6570\u6bd4\u5b8f\u5c55\u5f00\u66f4\u53d7\u6b22\u8fce\uff0c\u5982\u4e0a\u4f8b\u6240\u793a\u3002</p>"},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#42","title":"4.2\u7701\u7565\u53f7(...)","text":"<p>\u7701\u7565\u53f7 ( <code>...</code> ) \u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4f7f\u7528\uff0c\u8868\u793a\u96f6\u4e2a\u6216\u591a\u4e2a\u672a\u77e5\u7c7b\u578b\u7684\u53c2\u6570\u3002\u7f16\u8bd1\u5668\u4f1a\u6682\u505c\u5bf9\u8fd9\u4e9b\u53c2\u6570\u7684\u7c7b\u578b\u68c0\u67e5\u3002\u4f8b\u5982\uff0c</p> <pre><code>#include &lt;iostream&gt; \n#include &lt;cstdarg&gt;\nusing namespace std;  \nint sum(int, ...);  \nint main() {   \n  cout &lt;&lt; sum(3, 1, 2, 3) &lt;&lt; endl;       // 6   \n  cout &lt;&lt; sum(5, 1, 2, 3, 4, 5) &lt;&lt; endl; // 15    \n  return 0; \n}  \nint sum(int count, ...) {   \n  int sum = 0;    // Ellipses are accessed thru a va_list\n  va_list lst;  // Declare a va_list\n  // Use function va_start to initialize the va_list,       // with the list name and the number of parameters.   \n  va_start(lst, count);   \n  for (int i = 0; i &lt; count; ++i) {      \n    // Use function va_arg to read each parameter from va_list,      \n    // with the type.      \n    sum += va_arg(lst, int);   }   \n  // Cleanup the va_list.   \n  va_end(lst);    \n  return sum; \n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#43","title":"4.3\u4f5c\u7528\u57df\u89e3\u6790\u8fd0\u7b97\u7b26","text":"<p>\u7b26\u53f7 <code>::</code> \u88ab\u79f0\u4e3a\u4f5c\u7528\u57df\u89e3\u6790\u8fd0\u7b97\u7b26\u3002\u5982\u679c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u88ab\u540c\u540d\u7684\u5c40\u90e8\u53d8\u91cf\u9690\u85cf\uff08\u5f53\u7136\u4e0d\u63a8\u8350\u8fd9\u6837\u505a\uff09\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4f5c\u7528\u57df\u89e3\u6790\u8fd0\u7b97\u7b26\u6765\u83b7\u53d6\u88ab\u9690\u85cf\u7684\u5168\u5c40\u53d8\u91cf\u3002\u4f8b\u5982\uff0c</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// Global variable\nint x = 5;\n\nint main() {\n   // A local variable having the Same name as a global variable,\n   // which hides the global variable\n   float x = 55.5f;\n\n   // Local\n   cout &lt;&lt; x &lt;&lt; endl;\n\n   // Use unary scope resolution operator to retrieve the global variable\n   cout &lt;&lt; ::x &lt;&lt; endl;\n\n   return 0;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#44","title":"4.4\u547d\u4ee4\u884c\u53c2\u6570","text":"<p>\u5728\u547d\u4ee4\u884c\u4e2d\u5305\u542b\u53c2\u6570\uff0c\u4f8b\u5982\u5728\u8fd0\u884c\u7a0b\u5e8f\u65f6\uff0c</p> <pre><code>$ gcc -o test test.cpp\n</code></pre> <p>\" <code>-o test test.cpp</code> \" \u88ab\u79f0\u4e3a\u547d\u4ee4\u884c\u53c2\u6570\u3002\u6bcf\u4e2a\u53c2\u6570\u90fd\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6240\u6709\u53c2\u6570\u7ec4\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5e76\u4f20\u9012\u5230\u7a0b\u5e8f\u7684 <code>main()</code> \u51fd\u6570\u4e2d\u3002</p> <p>\u8981\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\uff0c <code>main()</code> \u51fd\u6570\u5e94\u4f7f\u7528\u6b64\u5934\u6587\u4ef6\uff1a</p> <pre><code>int main(int argc, char *argv[]) { ...... }\n</code></pre> <p>\u7b2c\u4e8c\u4e2a\u53c2\u6570 <code>char *argv[]</code> \u6355\u83b7\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u800c\u7b2c\u4e00\u4e2a\u53c2\u6570\u6355\u83b7\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u6216\u53c2\u6570\u7684\u6570\u91cf\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n\n   if (argc != 4) {\n      cout &lt;&lt; \"Usage: Arithmetic num1 num2 operator\" &lt;&lt; endl;\n      exit(1);\n   }\n\n   int operand1 = atoi(argv[1]);  // Parse string to int\n   int operand2 = atoi(argv[2]);  // Parse string to int\n   char op = argv[3][0];          // Extract first character only\n\n   switch (op) {\n      case '+':\n         cout &lt;&lt; operand1 &lt;&lt; \" + \" &lt;&lt; operand2 &lt;&lt; \" = \" &lt;&lt; operand1 + operand2 &lt;&lt; endl;\n         break;\n      case '-':\n         cout &lt;&lt; operand1 &lt;&lt; \" - \" &lt;&lt; operand2 &lt;&lt; \" = \" &lt;&lt; operand1 - operand2 &lt;&lt; endl;\n         break;\n      case '*':\n         cout &lt;&lt; operand1 &lt;&lt; \" * \" &lt;&lt; operand2 &lt;&lt; \" = \" &lt;&lt; operand1 * operand2 &lt;&lt; endl;\n         break;\n      case '/':\n         cout &lt;&lt; operand1 &lt;&lt; \" / \" &lt;&lt; operand2 &lt;&lt; \" = \" &lt;&lt; operand1 / operand2 &lt;&lt; endl;\n         break;\n      default:\n         cout &lt;&lt; \"Unknown operator\" &lt;&lt; endl;\n         exit(1);\n   }\n\n   return 0;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/02More%20Basicscpp/#5","title":"5\u66f4\u591a\u5173\u4e8e\u9884\u5904\u7406\u5668\u7684\u5185\u5bb9","text":"<p>\u9884\u5904\u7406\u5668\u6307\u4ee4\u4ee5 <code>#</code> \u5f00\u5934\uff08\u4f8b\u5982\uff0c\" <code>#include &lt;stdio.h&gt;</code> \"\uff0c\" <code>#define PI 3.14256295</code> \"\uff09\u3002\u5f53\u4f60\u7f16\u8bd1\u4e00\u4e2a C/C++ \u7a0b\u5e8f\u65f6\uff0c\u8fd9\u4e9b\u547d\u4ee4\u5c06\u88ab\u9884\u5904\u7406\u4ee5\u751f\u6210\u5b9e\u9645\u7f16\u8bd1\u7684\u6e90\u6587\u4ef6\uff08\u4f8b\u5982\uff0c\u5728\u6b64\u7a0b\u5e8f\u4e2d\u5305\u542b\u7279\u5b9a\u7684\u5934\u6587\u4ef6\u6216\u5b9a\u4e49\u67d0\u4e2a\u5b8f\u66ff\u6362\uff09\u3002</p> <p>\u9884\u5904\u7406\u5668\u547d\u4ee4\u4e0d\u662f C \u8bed\u53e5\uff0c\u4e5f\u4e0d\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002</p> <p><code>#include</code> : <code>#include</code> \u6700\u5e38\u7528\u4e8e\u5c06\u5934\u6587\u4ef6\u5305\u542b\u5230\u6b64\u6e90\u6587\u4ef6\u4e2d\u4ee5\u8fdb\u884c\u540e\u7eed\u7f16\u8bd1\u3002\u8bed\u6cd5\u5982\u4e0b\uff1a</p> <pre><code>// Syntax\n#include header_file\n\n// Examples   \n#include &lt;stdio.h&gt;      // Search the compiler's include paths\n#include \"myHeader.h\"   // Search the current directory first\n</code></pre> <p><code>#define</code> , <code>#undef</code> : <code>#define</code> \u53ef\u7528\u4e8e\u5b9a\u4e49\u5b8f\u3002\u5f53\u5b8f\u6a21\u5f0f\u968f\u540e\u5728\u6e90\u4ee3\u7801\u4e2d\u51fa\u73b0\u65f6\uff0c\u5b83\u5c06\u88ab\u5b8f\u7684\u4e3b\u4f53\u66ff\u6362\u6216\u66ff\u4ee3\u3002\u5b8f\u53ef\u4ee5\u5e26\u6709\u53c2\u6570\u3002 <code>`\u4f60\u53ef\u4ee5\u4f7f\u7528</code>#undef` \u6765\u53d6\u6d88\u5b9a\u4e49\u5b8f\u3002</p> <pre><code>// Define a macro substitution\n#define marco_name macro_value\n\n// Define a macro with parameters\n#define marco_name(args) marco_definition\n\n\n\n\n// Un-define a macro name\n#undef marco_name\n\n\n\n\n\n\n// Example   \n#define PI 3.14159256\n\n// Example\n#define square(x)  (x*x)\n#define max(x,y)   ((x &gt; y) ? x : y)\n#define REP(i,n)   for (i = 0; i &lt; n; ++i)\n#define FOR(i,a,b) for (i = a; i &lt; b; ++i)\n\n// Example\n#undef PI\n</code></pre> <p>\u4f7f\u7528 <code>#define</code> \u547d\u4ee4\u8fdb\u884c\u5b8f\u66ff\u6362\u65f6\uff0c\u5e38\u89c1\u7684\u4e24\u4e2a\u9519\u8bef\u662f\uff1a</p> <pre><code>#define PI = 3.14159265   // 1\n#define PI 3.14159265;    // 2\n</code></pre> <p>\u5728\u60c5\u51b5 1 \u4e2d\uff0c\u5b8f\u540d\u79f0\u201c <code>PI</code> \u201d\u88ab\u5b9a\u4e49\u4e3a\u201c <code>= 3.14159265</code> \u201d\uff08\u5e26\u6709\u524d\u5bfc <code>'='</code> \u7b26\u53f7\uff09\u3002\u5728\u60c5\u51b5 2 \u4e2d\uff0c\u5b83\u662f\u201c <code>3.14159265;</code> \u201d\uff08\u5e26\u6709\u5c3e\u968f <code>';'</code> \uff09\u3002\u8fd9\u4e9b\u80af\u5b9a\u4f1a\u5728\u5b9e\u9645\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u5728\u60a8\u7684\u7a0b\u5e8f\u4e2d\u89e6\u53d1\u9519\u8bef\u3002</p> <p><code>#define</code> \u4e5f\u5e38\u7528\u4e8e\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u4f53\u7684\u5b8f\u540d\uff0c\u7528\u4e8e\u6761\u4ef6\u6307\u4ee4\u4e2d\uff0c\u5982 <code>#ifdef</code> \u548c <code>#ifndef</code> \u3002</p> <p><code>#ifdef</code> , <code>#ifndef</code> , <code>#if</code> , <code>#elif</code> , <code>#endif</code> : \u6761\u4ef6\u6307\u4ee4\u53ef\u7528\u4e8e\u63a7\u5236\u7a0b\u5e8f\u53d1\u9001\u5230\u7f16\u8bd1\u7684\u90e8\u5206\uff1a</p> <pre><code>// if the marco_name is defined\n#ifdef macro_name\n  ......\n#endif\n\n// if the macro_name is NOT defined\n#ifndef macro_name\n  ......\n#endif\n\n// conditional if else\n#if expression\n  ......\n#elif condition\n  ......\n#else\n  ......\n#endif\n</code></pre> <p>\u4f8b\u5982\uff0c</p> <pre><code>#ifndef SIZE\n#define SIZE 1000\n#endif\n......\n</code></pre> <p>\u4f8b\u5982\uff0c\u5728\u5934\u6587\u4ef6\u4e2d\uff08\u4f8b\u5982\uff0c <code>myHeader.h</code> \uff09\uff0c\u901a\u5e38\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u6765\u9632\u6b62\u8be5\u5934\u6587\u4ef6\u5728\u6e90\u6587\u4ef6\u4e2d\u88ab\u591a\u6b21\u5305\u542b\u3002</p> <pre><code>#ifndef __MY_HEADER\n#define __MY_HEADER\n#endif\n......\n</code></pre> <p><code>#pragma</code> \uff1a\u6307\u4ee4 <code>#pragma</code> \u53ef\u7528\u4e8e\u6307\u5bfc\u7f16\u8bd1\u5668\u5904\u7406\u7cfb\u7edf\u76f8\u5173\u4fe1\u606f\u3002\u5e38\u89c1\u7528\u6cd5\u662f\uff1a</p> <pre><code>#ifdef _MSC_VER                        // This pragma comment works on MS Visual C++ only, NOT Gcc\n#pragma comment(lib, \"opengl32.lib\")   // Direct compiler to include this library, same as -l command-line option\n#endif\n</code></pre> <p>\u5176\u4ed6\uff1a\u5176\u4ed6\u6307\u4ee4\u5305\u62ec <code>#errors</code> \u548c <code>#line</code> \uff0c\u5b83\u4eec\u4e0d\u5e38\u7528\u3002</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/","title":"\u6307\u9488\u3001\u5f15\u7528\u548c\u52a8\u6001\u5185\u5b58\u5206\u914d","text":"<p>\u6307\u9488\u3001\u5f15\u7528\u548c\u52a8\u6001\u5185\u5b58\u5206\u914d\u662f C/C++ \u8bed\u8a00\u4e2d\u6700\u5f3a\u5927\u7684\u7279\u6027\uff0c\u5b83\u4eec\u5141\u8bb8\u7a0b\u5e8f\u5458\u76f4\u63a5\u64cd\u4f5c\u5185\u5b58\u4ee5\u9ad8\u6548\u7ba1\u7406\u5185\u5b58\u2014\u2014\u8ba1\u7b97\u673a\u4e2d\u6700\u5173\u952e\u4e14\u7a00\u7f3a\u7684\u8d44\u6e90\u2014\u2014\u4ee5\u83b7\u5f97\u6700\u4f73\u6027\u80fd\u3002\u7136\u800c\uff0c\u201c\u6307\u9488\u201d\u4e5f\u662f C/C++ \u8bed\u8a00\u4e2d\u6700\u590d\u6742\u548c\u56f0\u96be\u7684\u7279\u6027\u3002</p> <p>\u6307\u9488\u975e\u5e38\u5f3a\u5927\uff0c\u56e0\u4e3a\u5b83\u4eec\u5141\u8bb8\u4f60\u8bbf\u95ee\u5730\u5740\u5e76\u64cd\u4f5c\u5176\u5185\u5bb9\u3002\u4f46\u5b83\u4eec\u5904\u7406\u8d77\u6765\u4e5f\u975e\u5e38\u590d\u6742\u3002\u6b63\u786e\u4f7f\u7528\u5b83\u4eec\uff0c\u53ef\u4ee5\u6781\u5927\u5730\u63d0\u9ad8\u6548\u7387\u548c\u6027\u80fd\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u9519\u8bef\u4f7f\u7528\u5b83\u4eec\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8bb8\u591a\u95ee\u9898\uff0c\u4ece\u96be\u4ee5\u9605\u8bfb\u548c\u7ef4\u62a4\u7684\u4ee3\u7801\uff0c\u5230\u81ed\u540d\u662d\u8457\u7684\u9519\u8bef\uff0c\u5982\u5185\u5b58\u6cc4\u6f0f\u548c\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u8fd9\u4e9b\u53ef\u80fd\u4f1a\u4f7f\u4f60\u7684\u7cfb\u7edf\u66b4\u9732\u4e8e\u9ed1\u5ba2\u653b\u51fb\u4e4b\u4e0b\u3002\u8bb8\u591a\u65b0\u8bed\u8a00\uff08\u5982 Java \u548c C#\uff09\u4ece\u5b83\u4eec\u7684\u8bed\u6cd5\u4e2d\u79fb\u9664\u4e86\u6307\u9488\uff0c\u4ee5\u907f\u514d\u6307\u9488\u7684\u9677\u9631\uff0c\u901a\u8fc7\u63d0\u4f9b\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\u3002</p> <p>\u867d\u7136\u4f60\u53ef\u4ee5\u7f16\u5199 C/C++\u7a0b\u5e8f\u800c\u4e0d\u4f7f\u7528\u6307\u9488\uff0c\u7136\u800c\uff0c\u5728\u6559\u6388 C/C++\u8bed\u8a00\u65f6\u5f88\u96be\u4e0d\u63d0\u5230\u6307\u9488\u3002\u6307\u9488\u53ef\u80fd\u5e76\u4e0d\u9002\u5408\u65b0\u624b\u548c\u521d\u5b66\u8005\u3002</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#1","title":"1 \u6307\u9488\u53d8\u91cf","text":"<p>\u8ba1\u7b97\u673a\u5185\u5b58\u4f4d\u7f6e\u6709\u4e00\u4e2a\u5730\u5740\u5e76\u5b58\u50a8\u5185\u5bb9\u3002\u5730\u5740\u662f\u4e00\u4e2a\u6570\u5b57\u7f16\u53f7\uff08\u901a\u5e38\u4ee5\u5341\u516d\u8fdb\u5236\u8868\u793a\uff09\uff0c\u7a0b\u5e8f\u5458\u76f4\u63a5\u4f7f\u7528\u8d77\u6765\u5f88\u56f0\u96be\u3002\u901a\u5e38\uff0c\u6bcf\u4e2a\u5730\u5740\u4f4d\u7f6e\u5b58\u50a8 8 \u4f4d\uff08\u5373 1 \u5b57\u8282\uff09\u7684\u6570\u636e\u3002\u6570\u636e\u7684\u542b\u4e49\uff0c\u5982\u6574\u6570\u3001\u5b9e\u6570\u3001\u5b57\u7b26\u6216\u5b57\u7b26\u4e32\uff0c\u5b8c\u5168\u7531\u7a0b\u5e8f\u5458\u6765\u89e3\u91ca\u3002</p> <p>\u4e3a\u4e86\u51cf\u8f7b\u4f7f\u7528\u6570\u5b57\u5730\u5740\u548c\u7a0b\u5e8f\u5458\u89e3\u91ca\u6570\u636e\u7684\u7f16\u7a0b\u8d1f\u62c5\uff0c\u65e9\u671f\u7f16\u7a0b\u8bed\u8a00\uff08\u5982 C\uff09\u5f15\u5165\u4e86\u53d8\u91cf\u7684\u6982\u5ff5\u3002\u53d8\u91cf\u662f\u4e00\u4e2a\u547d\u540d\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u5b58\u50a8\u7279\u5b9a\u7c7b\u578b\u7684\u503c\u3002\u4e0d\u662f\u4f7f\u7528\u6570\u5b57\u5730\u5740\uff0c\u800c\u662f\u5c06\u540d\u79f0\uff08\u6216\u6807\u8bc6\u7b26\uff09\u9644\u52a0\u5230\u7279\u5b9a\u5730\u5740\u4e0a\u3002\u6b64\u5916\uff0c\u7c7b\u578b\uff08\u5982 <code>int</code> \u3001 <code>double</code> \u3001 <code>char</code> \uff09\u4e0e\u5185\u5bb9\u76f8\u5173\u8054\uff0c\u4ee5\u4fbf\u4e8e\u6570\u636e\u7684\u89e3\u91ca\u3002</p> <p>\u6bcf\u4e2a\u5730\u5740\u4f4d\u7f6e\u901a\u5e38\u5b58\u50a8 8 \u4f4d\uff08\u5373 1 \u5b57\u8282\uff09\u7684\u6570\u636e\u3002\u4e00\u4e2a 4 \u5b57\u8282\u7684 <code>int</code> \u503c\u5360\u7528 4 \u4e2a\u5185\u5b58\u4f4d\u7f6e\u300232 \u4f4d\u7cfb\u7edf\u901a\u5e38\u4f7f\u7528 32 \u4f4d\u5730\u5740\u3002\u8981\u5b58\u50a8\u4e00\u4e2a 32 \u4f4d\u5730\u5740\uff0c\u9700\u8981 4 \u4e2a\u5185\u5b58\u4f4d\u7f6e\u3002</p> <p>\u4e0b\u56fe\u5c55\u793a\u4e86\u8ba1\u7b97\u673a\u5185\u5b58\u5730\u5740\u4e0e\u5185\u5bb9\u4e4b\u95f4\u7684\u5173\u7cfb\uff1b\u4ee5\u53ca\u7a0b\u5e8f\u5458\u4f7f\u7528\u7684\u53d8\u91cf\u540d\u79f0\u3001\u7c7b\u578b\u548c\u503c\u3002</p> <p></p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#11","title":"1.1 \u6307\u9488\u53d8\u91cf\uff08\u6216\u6307\u9488\uff09","text":"<p>\u6307\u9488\u53d8\u91cf\uff08\u7b80\u79f0\u6307\u9488\uff09\u57fa\u672c\u4e0e\u5176\u4ed6\u53d8\u91cf\u76f8\u540c\uff0c\u53ef\u4ee5\u5b58\u50a8\u4e00\u6bb5\u6570\u636e\u3002\u4e0e\u5b58\u50a8\u503c\uff08\u4f8b\u5982 <code>int</code> \u3001 <code>double</code> \u3001 <code>char</code> \uff09\u7684\u666e\u901a\u53d8\u91cf\u4e0d\u540c\uff0c\u6307\u9488\u5b58\u50a8\u7684\u662f\u5185\u5b58\u5730\u5740\u3002</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#12","title":"1.2 \u58f0\u660e\u6307\u9488","text":"<p>\u6307\u9488\u5fc5\u987b\u5728\u4f7f\u7528\u524d\u58f0\u660e\uff0c\u5c31\u50cf\u666e\u901a\u53d8\u91cf\u4e00\u6837\u3002\u58f0\u660e\u6307\u9488\u7684\u8bed\u6cd5\u662f\u5728\u540d\u79f0\u524d\u653e\u7f6e\u4e00\u4e2a <code>*</code> \u3002\u6307\u9488\u4e5f\u4e0e\u7c7b\u578b\uff08\u5982 <code>int</code> \u548c <code>double</code> \uff09\u76f8\u5173\u8054\u3002</p> <pre><code>type *ptr;   // Declare a pointer variable called ptr as a pointer of type\n// or\ntype* ptr;\n// or\ntype * ptr;  // I shall adopt this convention\n</code></pre> <p>For example, </p> <pre><code>int * iPtr;     // Declare a pointer variable called iPtr pointing to an int (an int pointer)\n                // It contains an address. That address holds an int value.\ndouble * dPtr;  // Declare a double pointer\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u60a8\u9700\u8981\u5728\u6bcf\u4e2a\u6307\u9488\u53d8\u91cf\u524d\u653e\u7f6e\u4e00\u4e2a <code>*</code> \uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c <code>*</code> \u4ec5\u9002\u7528\u4e8e\u5176\u540e\u7684\u540d\u79f0\u3002\u58f0\u660e\u8bed\u53e5\u4e2d\u7684 <code>*</code> \u4e0d\u662f\u8fd0\u7b97\u7b26\uff0c\u800c\u662f\u8868\u793a\u5176\u540e\u7684\u540d\u79f0\u662f\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u3002\u4f8b\u5982\uff0c</p> <pre><code>int *p1, *p2, i;    // p1 and p2 are int pointers. i is an int\nint* p1, p2, i;     // p1 is a int pointer, p2 and i are int\nint * p1, * p2, i;  // p1 and p2 are int pointers, i is an int\n</code></pre> <p>Naming Convention of Pointers: Include a \"<code>p</code>\" or \"<code>ptr</code>\" as prefix or suffix, e.g., <code>iPtr</code>, <code>numberPtr</code>, <code>pNumber</code>, <code>pStudent</code>. \u6307\u9488\u547d\u540d\u7ea6\u5b9a\uff1a\u5305\u542b\u201c <code>p</code> \u201d\u6216\u201c <code>ptr</code> \u201d\u4f5c\u4e3a\u524d\u7f00\u6216\u540e\u7f00\uff0c\u4f8b\u5982\uff0c <code>iPtr</code> , <code>numberPtr</code> , <code>pNumber</code> , <code>pStudent</code> \u3002</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#13","title":"1.3 \u901a\u8fc7\u5730\u5740\u8fd0\u7b97\u7b26\uff08&amp;\uff09\u521d\u59cb\u5316\u6307\u9488","text":"<p>\u5f53\u4f60\u58f0\u660e\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u662f\uff0c\u5176\u5185\u5bb9\u8fdd\u80cc\u521d\u59cb\u5316\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u5305\u542b\u4e00\u4e2a\u201c\u67d0\u5904\u201d\u7684\u5730\u5740\uff0c\u5f53\u7136\u8fd9\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5730\u5740\u3002\u8fd9\u662f\u5371\u9669\u7684\uff01\u4f60\u9700\u8981\u901a\u8fc7\u5206\u914d\u4e00\u4e2a\u6709\u6548\u7684\u5730\u5740\u6765\u521d\u59cb\u5316\u6307\u9488\u3002\u901a\u5e38\u8fd9\u662f\u901a\u8fc7\u5730\u5740\u64cd\u4f5c\u7b26 ( <code>&amp;</code> ) \u5b8c\u6210\u7684\u3002</p> <p>\u5730\u5740\u64cd\u4f5c\u7b26 ( <code>&amp;</code> ) \u5bf9\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c\uff0c\u5e76\u8fd4\u56de\u8be5\u53d8\u91cf\u7684\u5730\u5740\u3002\u4f8b\u5982\uff0c\u5982\u679c <code>number</code> \u662f\u4e00\u4e2a <code>int</code> \u53d8\u91cf\uff0c <code>&amp;number</code> \u8fd4\u56de\u53d8\u91cf <code>number</code> \u7684\u5730\u5740\u3002</p> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u53d6\u5730\u5740\u8fd0\u7b97\u7b26\u6765\u83b7\u53d6\u53d8\u91cf\u7684\u5730\u5740\uff0c\u5e76\u5c06\u8be5\u5730\u5740\u8d4b\u503c\u7ed9\u6307\u9488\u53d8\u91cf\u3002\u4f8b\u5982\uff0c</p> <pre><code>int number = 88;     // An int variable with a value\nint * pNumber;       // Declare a pointer variable called pNumber pointing to an int (or int pointer)\npNumber = &amp;number;   // Assign the address of the variable number to pointer pNumber\n\nint * pAnother = &amp;number; // Declare another int pointer and init to address of the variable number\n</code></pre> <p></p> <p>\u5982\u56fe\u6240\u793a\uff0c\u53d8\u91cf <code>int</code> <code>number</code> \uff0c\u4ece\u5730\u5740 <code>0x22ccec</code> \u5f00\u59cb\uff0c\u5305\u542b\u4e00\u4e2a <code>int</code> \u503c <code>88</code> \u3002\u8868\u8fbe\u5f0f <code>&amp;number</code> \u8fd4\u56de\u53d8\u91cf <code>number</code> \u7684\u5730\u5740\uff0c\u5373 <code>0x22ccec</code> \u3002\u6b64\u5730\u5740\u968f\u540e\u88ab\u8d4b\u503c\u7ed9\u6307\u9488\u53d8\u91cf <code>pNumber</code> \uff0c\u4f5c\u4e3a\u5176\u521d\u59cb\u503c\u3002</p> <p>\u5730\u5740\u64cd\u4f5c\u7b26 ( <code>&amp;</code> ) \u53ea\u80fd\u5728 RHS \u4e0a\u4f7f\u7528\u3002</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#14-indirection-or-dereferencing-operator","title":"1.4 Indirection or Dereferencing Operator (<code>*</code>) \u95f4\u63a5\u6216\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26 ( <code>*</code> )","text":"<p>\u95f4\u63a5\u8fd0\u7b97\u7b26\uff08\u6216\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\uff09( <code>*</code> ) \u5bf9\u6307\u9488\u8fdb\u884c\u64cd\u4f5c\uff0c\u5e76\u8fd4\u56de\u5b58\u50a8\u5728\u6307\u9488\u53d8\u91cf\u4e2d\u4fdd\u5b58\u7684\u5730\u5740\u4e2d\u7684\u503c\u3002\u4f8b\u5982\uff0c\u5982\u679c <code>pNumber</code> \u662f\u4e00\u4e2a <code>int</code> \u6307\u9488\uff0c <code>*pNumber</code> \u8fd4\u56de\u7531 <code>pNumber</code> \u201c\u6307\u5411\u201d\u7684 <code>int</code> \u503c\u3002</p> <pre><code>int number = 88;\nint * pNumber = &amp;number;  \n// Declare and assign the address of variable number to pointer pNumber (0x22ccec)\ncout &lt;&lt; pNumber&lt;&lt; endl;   \n// Print the content of the pointer variable, which contain an address (0x22ccec)\ncout &lt;&lt; *pNumber &lt;&lt; endl; \n// Print the value \"pointed to\" by the pointer, which is an int (88)\n*pNumber = 99;            \n// Assign a value to where the pointer is pointed to, NOT to the pointer variable\ncout &lt;&lt; *pNumber &lt;&lt; endl; \n// Print the new value \"pointed to\" by the pointer (99)\ncout &lt;&lt; number &lt;&lt; endl;   \n// The value of variable number changes as well (99)\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c <code>pNumber</code> \u5b58\u50a8\u7684\u662f\u5185\u5b58\u5730\u5740\u4f4d\u7f6e\uff0c\u800c <code>*pNumber</code> \u6307\u7684\u662f\u5b58\u50a8\u5728\u6307\u9488\u53d8\u91cf\u4e2d\u5730\u5740\u7684\u503c\uff0c\u6216\u8005\u6307\u9488\u6240\u6307\u5411\u7684\u503c\u3002</p> <p>\u5982\u56fe\u6240\u793a\uff0c\u53d8\u91cf\uff08\u5982 <code>number</code> \uff09\u76f4\u63a5\u5f15\u7528\u4e00\u4e2a\u503c\uff0c\u800c\u6307\u9488\u901a\u8fc7\u5176\u5b58\u50a8\u7684\u5185\u5b58\u5730\u5740\u95f4\u63a5\u5f15\u7528\u4e00\u4e2a\u503c\u3002\u901a\u8fc7\u6307\u9488\u95f4\u63a5\u5f15\u7528\u4e00\u4e2a\u503c\u79f0\u4e3a\u95f4\u63a5\u5f15\u7528\u6216\u89e3\u5f15\u7528\u3002</p> <p>\u95f4\u63a5\u8fd0\u7b97\u7b26 ( <code>*</code> ) \u53ef\u7528\u4e8e\u8d4b\u503c\u8bed\u53e5\u7684 RHS ( <code>temp = *pNumber</code> ) \u548c LHS ( <code>*pNumber = 99</code> )\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u7b26\u53f7 <code>*</code> \u5728\u58f0\u660e\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f\u4e2d\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002\u5f53\u5b83\u7528\u4e8e\u58f0\u660e\u4e2d\uff08\u4f8b\u5982\uff0c <code>int * pNumber</code> \uff09\u65f6\uff0c\u8868\u793a\u540e\u9762\u7684\u540d\u79f0\u662f\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u3002\u800c\u5f53\u5b83\u7528\u4e8e\u8868\u8fbe\u5f0f\u4e2d\uff08\u4f8b\u5982\uff0c <code>*pNumber = 99</code> <code>; temp &lt;&lt; *pNumber;</code> \uff09\u65f6\uff0c\u5219\u8868\u793a\u6307\u9488\u53d8\u91cf\u6240\u6307\u5411\u7684\u503c\u3002</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#15","title":"1.5 \u6307\u9488\u4e5f\u6709\u7c7b\u578b","text":"<p>\u6307\u9488\u4e0e\u5b83\u6240\u6307\u5411\u7684\u503c\u7684\u7c7b\u578b\u76f8\u5173\u8054\uff0c\u8be5\u7c7b\u578b\u5728\u58f0\u660e\u65f6\u6307\u5b9a\u3002\u6307\u9488\u53ea\u80fd\u4fdd\u5b58\u58f0\u660e\u7c7b\u578b\u7684\u5730\u5740\uff1b\u5b83\u4e0d\u80fd\u4fdd\u5b58\u4e0d\u540c\u7c7b\u578b\u7684\u5730\u5740\u3002</p> <pre><code>int i = 88;\ndouble d = 55.66;\nint * iPtr = &amp;i;    // int pointer pointing to an int value\ndouble * dPtr = &amp;d; // double pointer pointing to a double value\n\niPtr = &amp;d;   // ERROR, cannot hold address of different type\ndPtr = &amp;i;   // ERROR\niPtr = i;    // ERROR, pointer holds address of an int, NOT int value\n\nint j = 99;\niPtr = &amp;j;  // You can change the address stored in a pointer\n</code></pre> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   int number = 88;    // Declare an int variable and assign an initial value\n   int * pNumber;      // Declare a pointer variable pointing to an int (or int pointer)\n   pNumber = &amp;number;  // assign the address of the variable number to pointer pNumber\n\n   cout &lt;&lt; pNumber &lt;&lt; endl;  // Print content of pNumber (0x22ccf0)\n   cout &lt;&lt; &amp;number &lt;&lt; endl;  // Print address of number (0x22ccf0)\n   cout &lt;&lt; *pNumber &lt;&lt; endl; // Print value pointed to by pNumber (88)\n   cout &lt;&lt; number &lt;&lt; endl;   // Print value of number (88)\n\n   *pNumber = 99;            // Re-assign value pointed to by pNumber\n   cout &lt;&lt; pNumber &lt;&lt; endl;  // Print content of pNumber (0x22ccf0)\n   cout &lt;&lt; &amp;number &lt;&lt; endl;  // Print address of number (0x22ccf0)\n   cout &lt;&lt; *pNumber &lt;&lt; endl; // Print value pointed to by pNumber (99)\n   cout &lt;&lt; number &lt;&lt; endl;   // Print value of number (99)\n                             // The value of number changes via pointer\n\n   cout &lt;&lt; &amp;pNumber &lt;&lt; endl; // Print the address of pointer variable pNumber (0x22ccec)\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#16","title":"1.6 \u672a\u521d\u59cb\u5316\u7684\u6307\u9488","text":"<p>\u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\u5b58\u5728\u4e25\u91cd\u7684\u903b\u8f91\u9519\u8bef\uff01</p> <pre><code>int * iPtr;\n*iPtr = 55;\ncout &lt;&lt; *iPtr &lt;&lt; endl;\n</code></pre> <p>\u6307\u9488 <code>iPtr</code> \u88ab\u58f0\u660e\u65f6\u672a\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5373\u5b83\u6307\u5411 Ascendancy Assistant: \u6307\u9488 <code>iPtr</code> \u88ab\u58f0\u660e\u65f6\u672a\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5373\u5b83\u6307\u5411\u201c\u67d0\u4e2a\u5730\u65b9\u201d\uff0c\u5f53\u7136\u8fd9\u662f\u4e00\u4e2a\u65e0\u6548\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 <code>*iPtr = 55</code> \u7834\u574f\u4e86\u201c\u67d0\u4e2a\u5730\u65b9\u201d\u7684\u503c\uff01\u60a8\u9700\u8981\u901a\u8fc7\u4e3a\u5176\u5206\u914d\u4e00\u4e2a\u6709\u6548\u7684\u5730\u5740\u6765\u521d\u59cb\u5316\u6307\u9488\u3002\u5927\u591a\u6570\u7f16\u8bd1\u5668\u4e0d\u4f1a\u5bf9\u672a\u521d\u59cb\u5316\u7684\u6307\u9488\u53d1\u51fa\u9519\u8bef\u6216\u8b66\u544a\uff1f\uff01</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#17-null-pointers","title":"1.7 Null Pointers \u7a7a\u6307\u9488","text":"<p>\u4f60\u53ef\u4ee5\u5c06\u6307\u9488\u521d\u59cb\u5316\u4e3a 0 \u6216 <code>NULL</code> \uff0c\u5373\u5b83\u4e0d\u6307\u5411\u4efb\u4f55\u5185\u5bb9\u3002\u8fd9\u88ab\u79f0\u4e3a\u7a7a\u6307\u9488\u3002\u89e3\u5f15\u7528\u7a7a\u6307\u9488\uff08 <code>*p</code> \uff09\u4f1a\u5bfc\u81f4 <code>STATUS_ACCESS_VIOLATION</code> \u5f02\u5e38\u3002</p> <pre><code>int * iPtr = 0;         // Declare an int pointer, and initialize the pointer to point to nothing\ncout &lt;&lt; *iPtr &lt;&lt; endl;  // ERROR! STATUS_ACCESS_VIOLATION exception\n\nint * p = NULL;         // Also declare a NULL pointer points to nothing\n</code></pre> <p>\u5728\u58f0\u660e\u65f6\u5c06\u6307\u9488\u521d\u59cb\u5316\u4e3a null \u662f\u4e00\u79cd\u826f\u597d\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5b9e\u8df5\u3002</p> <p>C++11 \u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u5173\u952e\u5b57 <code>nullptr</code> \u6765\u8868\u793a\u7a7a\u6307\u9488\u3002</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#2","title":"2. \u5f15\u7528\u53d8\u91cf","text":"<p>C++ \u6dfb\u52a0\u4e86\u6240\u8c13\u7684\u5f15\u7528\u53d8\u91cf\uff08\u7b80\u79f0\u5f15\u7528\uff09\u3002\u5f15\u7528\u662f\u4e00\u4e2a\u522b\u540d\uff0c\u6216\u8005\u8bf4\u662f\u73b0\u6709\u53d8\u91cf\u7684\u53e6\u4e00\u4e2a\u540d\u79f0\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u5c06 <code>peter</code> \u8bbe\u4e3a <code>paul</code> \u7684\u5f15\u7528\uff08\u522b\u540d\uff09\uff0c\u4f60\u53ef\u4ee5\u79f0\u547c\u8fd9\u4e2a\u4eba\u65e2\u662f <code>peter</code> \u4e5f\u662f <code>paul</code> \u3002</p> <p>\u5f15\u7528\u7684\u4e3b\u8981\u7528\u9014\u662f\u4f5c\u4e3a\u51fd\u6570\u5f62\u5f0f\u53c2\u6570\u6765\u652f\u6301\u6309\u5f15\u7528\u4f20\u9012\u3002\u5f53\u4e00\u4e2a\u5f15\u7528\u53d8\u91cf\u88ab\u4f20\u5165\u51fd\u6570\u65f6\uff0c\u51fd\u6570\u4f1a\u76f4\u63a5\u64cd\u4f5c\u539f\u59cb\u526f\u672c\uff08\u800c\u4e0d\u662f\u6309\u503c\u4f20\u9012\u4e2d\u7684\u514b\u9686\u526f\u672c\uff09\u3002\u51fd\u6570\u5185\u90e8\u7684\u66f4\u6539\u4f1a\u5728\u51fd\u6570\u5916\u90e8\u53cd\u6620\u51fa\u6765\u3002</p> <p>\u5f15\u7528\u7c7b\u4f3c\u4e8e\u6307\u9488\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u5f15\u7528\u53ef\u4ee5\u4f5c\u4e3a\u6307\u9488\u7684\u66ff\u4ee3\u54c1\uff0c\u7279\u522b\u662f\u5728\u51fd\u6570\u53c2\u6570\u65b9\u9762\u3002</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#21","title":"2.1\u5f15\u7528\uff08\u6216\u522b\u540d\uff09\uff08&amp;\uff09","text":"<p>\u8bf7\u6ce8\u610f\uff0cC/C++ \u4f7f\u7528 <code>&amp;</code> \u6765\u8868\u793a\u8868\u8fbe\u5f0f\u4e2d\u7684\u53d6\u5730\u5740\u8fd0\u7b97\u7b26\u3002C++ \u5728\u58f0\u660e\u4e2d\u4e3a <code>&amp;</code> \u8d4b\u4e88\u4e86\u989d\u5916\u7684\u542b\u4e49\uff0c\u7528\u4e8e\u58f0\u660e\u5f15\u7528\u53d8\u91cf\u3002</p> <p>\u7b26\u53f7 <code>&amp;</code> \u5728\u8868\u8fbe\u5f0f\u548c\u58f0\u660e\u4e2d\u7684\u542b\u4e49\u4e0d\u540c\u3002\u5f53\u5b83\u7528\u4e8e\u8868\u8fbe\u5f0f\u4e2d\u65f6\uff0c <code>&amp;</code> \u8868\u793a\u53d6\u5730\u5740\u8fd0\u7b97\u7b26\uff0c\u8fd4\u56de\u53d8\u91cf\u7684\u5730\u5740\uff0c\u4f8b\u5982\uff0c\u5982\u679c <code>number</code> \u662f\u4e00\u4e2a <code>int</code> \u53d8\u91cf\uff0c <code>&amp;number</code> \u8fd4\u56de\u53d8\u91cf <code>number</code> \u7684\u5730\u5740\uff08\u8fd9\u4e00\u70b9\u5df2\u5728\u4e0a\u9762\u7ae0\u8282\u4e2d\u63cf\u8ff0\uff09\u3002</p> <p>\u7136\u800c\uff0c\u5f53 <code>&amp;</code> \u5728\u58f0\u660e\u4e2d\uff08\u5305\u62ec\u51fd\u6570\u5f62\u5f0f\u53c2\u6570\uff09\u4f7f\u7528\u65f6\uff0c\u5b83\u662f\u7c7b\u578b\u6807\u8bc6\u7b26\u7684\u4e00\u90e8\u5206\uff0c\u7528\u4e8e\u58f0\u660e\u5f15\u7528\u53d8\u91cf\uff08\u6216\u5f15\u7528\u6216\u522b\u540d\u6216\u66ff\u4ee3\u540d\u79f0\uff09\u3002\u5b83\u7528\u4e8e\u63d0\u4f9b\u53e6\u4e00\u4e2a\u540d\u79f0\uff0c\u6216\u53e6\u4e00\u4e2a\u5f15\u7528\uff0c\u6216\u522b\u540d\u7ed9\u73b0\u6709\u53d8\u91cf\u3002</p> <pre><code>type &amp;newName = existingName;\n// or\ntype&amp; newName = existingName;\n// or\ntype &amp; newName = existingName;  // I shall adopt this convention\n</code></pre> <p>\u5e94\u5c06\u5176\u7406\u89e3\u4e3a\u201c <code>newName</code> \u662f\u5bf9 <code>existingName</code> \u7684\u5f15\u7528\u201d\uff0c\u6216\u8005\u201c <code>newNew</code> \u662f <code>existingName</code> \u7684\u522b\u540d\u201d\u3002\u60a8\u73b0\u5728\u53ef\u4ee5\u5c06\u53d8\u91cf\u79f0\u4e3a <code>newName</code> \u6216 <code>existingName</code> \u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   int number = 88;          // Declare an int variable called number\n   int &amp; refNumber = number; // Declare a reference (alias) to the variable number\n                             // Both refNumber and number refer to the same value\n\n   cout &lt;&lt; number &lt;&lt; endl;    // Print value of variable number (88)\n   cout &lt;&lt; refNumber &lt;&lt; endl; // Print value of reference (88)\n\n   refNumber = 99;            // Re-assign a new value to refNumber\n   cout &lt;&lt; refNumber &lt;&lt; endl;\n   cout &lt;&lt; number &lt;&lt; endl;    // Value of number also changes (99)\n\n   number = 55;               // Re-assign a new value to number\n   cout &lt;&lt; number &lt;&lt; endl;\n   cout &lt;&lt; refNumber &lt;&lt; endl; // Value of refNumber also changes (55)\n}\n</code></pre> <p></p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#22","title":"2.2 \u5f15\u7528\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f","text":"<p>\u5f15\u7528\u4f5c\u4e3a\u4e00\u4e2a\u6307\u9488\u5de5\u4f5c\u3002\u5f15\u7528\u88ab\u58f0\u660e\u4e3a\u53d8\u91cf\u7684\u522b\u540d\u3002\u5b83\u5b58\u50a8\u53d8\u91cf\u7684\u5730\u5740\uff0c\u5982\u56fe\u6240\u793a\uff1a</p> <p></p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#23","title":"2.3 \u5f15\u7528\u4e0e\u6307\u9488","text":"<p>\u6307\u9488\u548c\u5f15\u7528\u662f\u7b49\u4ef7\u7684\uff0c\u9664\u4e86\uff1a</p> <ul> <li>\u5f15\u7528\u662f\u4e00\u4e2a\u5730\u5740\u7684\u540d\u79f0\u5e38\u91cf\u3002\u4f60\u9700\u8981\u5728\u58f0\u660e\u65f6\u521d\u59cb\u5316\u5f15\u7528</li> </ul> <pre><code>int &amp; iRef;   // Error: 'iRef' declared as reference but not initialized\n</code></pre> <p>\u4e00\u65e6\u5bf9\u4e00\u4e2a\u53d8\u91cf\u5efa\u7acb\u4e86\u5f15\u7528\uff0c\u4f60\u5c31\u65e0\u6cd5\u66f4\u6539\u8be5\u5f15\u7528\u53bb\u5f15\u7528\u53e6\u4e00\u4e2a\u53d8\u91cf\u3002</p> <ul> <li>\u8981\u83b7\u53d6\u6307\u9488\u6240\u6307\u5411\u7684\u503c\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u89e3\u5f15\u7528\u64cd\u4f5c\u7b26 <code>*</code> \uff08\u4f8b\u5982\uff0c\u5982\u679c <code>pNumber</code> \u662f\u4e00\u4e2a <code>int</code> \u6307\u9488\uff0c <code>*pNumber</code> \u4f1a\u8fd4\u56de <code>pNumber</code> \u6240\u6307\u5411\u7684\u503c\u3002\u8fd9\u88ab\u79f0\u4e3a\u89e3\u5f15\u7528\u6216\u95f4\u63a5\u5f15\u7528\uff09\u3002\u8981\u5c06\u53d8\u91cf\u7684\u5730\u5740\u8d4b\u503c\u7ed9\u6307\u9488\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u53d6\u5730\u5740\u64cd\u4f5c\u7b26 <code>&amp;</code> \uff08\u4f8b\u5982\uff0c <code>pNumber = &amp;number</code> \uff09\u3002</li> <li>\u53e6\u4e00\u65b9\u9762\uff0c\u5f15\u7528\u548c\u89e3\u5f15\u7528\u7684\u64cd\u4f5c\u5728\u5f15\u7528\u4e0a\u9690\u5f0f\u5b8c\u6210\u3002\u4f8b\u5982\uff0c\u5982\u679c <code>refNumber</code> \u662f\u4e00\u4e2a\u6307\u5411\u53e6\u4e00\u4e2a <code>int</code> \u53d8\u91cf\u7684\u5f15\u7528\uff08\u522b\u540d\uff09\uff0c <code>refNumber</code> \u4f1a\u8fd4\u56de\u8be5\u53d8\u91cf\u7684\u503c\u3002\u4e0d\u5e94\u4f7f\u7528\u663e\u5f0f\u7684\u89e3\u5f15\u7528\u64cd\u4f5c\u7b26 <code>*</code> \u3002\u6b64\u5916\uff0c\u8981\u5c06\u53d8\u91cf\u7684\u5730\u5740\u8d4b\u503c\u7ed9\u5f15\u7528\u53d8\u91cf\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u53d6\u5730\u5740\u64cd\u4f5c\u7b26 <code>&amp;</code> \u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   int number1 = 88, number2 = 22;\n\n   // Create a pointer pointing to number1\n   int * pNumber1 = &amp;number1;  // Explicit referencing\n   *pNumber1 = 99;             // Explicit dereferencing\n   cout &lt;&lt; *pNumber1 &lt;&lt; endl;  // 99\n   cout &lt;&lt; &amp;number1 &lt;&lt; endl;   // 0x22ff18\n   cout &lt;&lt; pNumber1 &lt;&lt; endl;   // 0x22ff18 (content of the pointer variable - same as above)\n   cout &lt;&lt; &amp;pNumber1 &lt;&lt; endl;  // 0x22ff10 (address of the pointer variable)\n   pNumber1 = &amp;number2;        // Pointer can be reassigned to store another address\n\n   // Create a reference (alias) to number1\n   int &amp; refNumber1 = number1;  // Implicit referencing (NOT &amp;number1)\n   refNumber1 = 11;             // Implicit dereferencing (NOT *refNumber1)\n   cout &lt;&lt; refNumber1 &lt;&lt; endl;  // 11\n   cout &lt;&lt; &amp;number1 &lt;&lt; endl;    // 0x22ff18\n   cout &lt;&lt; &amp;refNumber1 &lt;&lt; endl; // 0x22ff18\n   //refNumber1 = &amp;number2;     // Error! Reference cannot be re-assigned\n                                // error: invalid conversion from 'int*' to 'int'\n   refNumber1 = number2;        // refNumber1 is still an alias to number1.\n                                // Assign value of number2 (22) to refNumber1 (and number1).\n   number2++;   \n   cout &lt;&lt; refNumber1 &lt;&lt; endl;  // 22\n   cout &lt;&lt; number1 &lt;&lt; endl;     // 22\n   cout &lt;&lt; number2 &lt;&lt; endl;     // 23\n}\n</code></pre> <p>\u5f15\u7528\u53d8\u91cf\u4e3a\u73b0\u6709\u53d8\u91cf\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b0\u540d\u79f0\u3002\u5b83\u4f1a\u9690\u5f0f\u5730\u89e3\u9664\u5f15\u7528\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u89e3\u9664\u5f15\u7528\u64cd\u4f5c\u7b26 <code>*</code> \u6765\u83b7\u53d6\u5f15\u7528\u7684\u503c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6307\u9488\u53d8\u91cf\u5b58\u50a8\u4e00\u4e2a\u5730\u5740\u3002\u4f60\u53ef\u4ee5\u66f4\u6539\u6307\u9488\u4e2d\u5b58\u50a8\u7684\u5730\u5740\u503c\u3002\u8981\u83b7\u53d6\u6307\u9488\u6240\u6307\u5411\u7684\u503c\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u95f4\u63a5\u64cd\u4f5c\u7b26 <code>*</code> \uff0c\u8fd9\u88ab\u79f0\u4e3a\u663e\u5f0f\u89e3\u9664\u5f15\u7528\u3002\u5f15\u7528\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u4e2a <code>const</code> \u6307\u9488\u3002\u5b83\u5fc5\u987b\u5728\u58f0\u660e\u65f6\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u5176\u5185\u5bb9\u65e0\u6cd5\u66f4\u6539\u3002</p> <p>\u5f15\u7528\u4e0e\u6307\u9488\u5bc6\u5207\u76f8\u5173\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u6307\u9488\u7684\u66ff\u4ee3\u54c1\u3002\u5f15\u7528\u5141\u8bb8\u4f60\u4f7f\u7528\u6307\u9488\u6765\u64cd\u4f5c\u5bf9\u8c61\uff0c\u4f46\u4e0d\u9700\u8981\u4f7f\u7528\u6307\u9488\u7684\u5f15\u7528\u548c\u89e3\u5f15\u7528\u8bed\u6cd5\u3002</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#24","title":"2.4 \u901a\u8fc7\u5f15\u7528\u4f20\u9012\u5230\u5177\u6709\u5f15\u7528\u53c2\u6570\u4e0e\u6307\u9488\u53c2\u6570\u7684\u51fd\u6570\u4e2d","text":"<p>\u5728 C/C++ \u4e2d\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53c2\u6570\u662f\u4ee5\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u4f20\u5165\u51fd\u6570\u7684\uff08\u6570\u7ec4\u9664\u5916\uff0c\u6570\u7ec4\u88ab\u89c6\u4e3a\u6307\u9488\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u53c2\u6570\u4f1a\u88ab\u590d\u5236\u4e00\u4efd\u526f\u672c\u5e76\u4f20\u5165\u51fd\u6570\u4e2d\u3002\u5728\u51fd\u6570\u5185\u90e8\u5bf9\u526f\u672c\u7684\u4fee\u6539\u4e0d\u4f1a\u5f71\u54cd\u8c03\u7528\u8005\u4e2d\u7684\u539f\u59cb\u53c2\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u88ab\u8c03\u7528\u7684\u51fd\u6570\u65e0\u6cd5\u8bbf\u95ee\u8c03\u7528\u8005\u4e2d\u7684\u53d8\u91cf\u3002\u4f8b\u5982\uff0c</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint square(int);\n\nint main() {\n   int number = 8;\n   cout &lt;&lt;  \"In main(): \" &lt;&lt; &amp;number &lt;&lt; endl;  // 0x22ff1c\n   cout &lt;&lt; number &lt;&lt; endl;         // 8\n   cout &lt;&lt; square(number) &lt;&lt; endl; // 64\n   cout &lt;&lt; number &lt;&lt; endl;         // 8 - no change\n}\n\nint square(int n) {  // non-const\n   cout &lt;&lt;  \"In square(): \" &lt;&lt; &amp;n &lt;&lt; endl;  // 0x22ff00\n   n *= n;           // clone modified inside the function\n   return n;\n}\n</code></pre> <p>\u8f93\u51fa\u6e05\u695a\u5730\u663e\u793a\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u5730\u5740\u3002</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#pass-by-reference-with-pointer-arguments","title":"Pass-by-Reference with Pointer Arguments \u4f7f\u7528\u6307\u9488\u53c2\u6570\u7684\u6309\u5f15\u7528\u4f20\u9012","text":"<p>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u526f\u672c\uff08\u7279\u522b\u662f\u5728\u4f20\u9012\u5927\u578b\u5bf9\u8c61\u6216\u6570\u7ec4\u65f6\uff09\uff0c\u4ee5\u907f\u514d\u514b\u9686\u7684\u5f00\u9500\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5c06\u5bf9\u8c61\u7684\u6307\u9488\u4f20\u9012\u5230\u51fd\u6570\u4e2d\u6765\u5b9e\u73b0\uff0c\u79f0\u4e3a\u6309\u5f15\u7528\u4f20\u9012\u3002\u4f8b\u5982\uff0c</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid square(int *);\n\nint main() {\n   int number = 8;\n   cout &lt;&lt;  \"In main(): \" &lt;&lt; &amp;number &lt;&lt; endl;  // 0x22ff1c\n   cout &lt;&lt; number &lt;&lt; endl;   // 8\n   square(&amp;number);          // Explicit referencing to pass an address\n   cout &lt;&lt; number &lt;&lt; endl;   // 64\n}\n\nvoid square(int * pNumber) {  // Function takes an int pointer (non-const)\n   cout &lt;&lt;  \"In square(): \" &lt;&lt; pNumber &lt;&lt; endl;  // 0x22ff1c\n   *pNumber *= *pNumber;      // Explicit de-referencing to get the value pointed-to\n}\n</code></pre> <p>\u88ab\u8c03\u7528\u7684\u51fd\u6570\u5728\u76f8\u540c\u7684\u5730\u5740\u4e0a\u64cd\u4f5c\uff0c\u56e0\u6b64\u53ef\u4ee5\u4fee\u6539\u8c03\u7528\u8005\u4e2d\u7684\u53d8\u91cf\u3002</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#pass-by-reference-with-reference-arguments","title":"Pass-by-Reference with Reference Arguments \u901a\u8fc7\u5f15\u7528\u4f20\u9012\u4e0e\u5f15\u7528\u53c2\u6570","text":"<p>\u9664\u4e86\u5c06\u6307\u9488\u4f20\u5165\u51fd\u6570\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5c06\u5f15\u7528\u4f20\u5165\u51fd\u6570\uff0c\u4ee5\u907f\u514d\u5f15\u7528\u548c\u89e3\u5f15\u7528\u7684\u7e41\u7410\u8bed\u6cd5\u3002\u4f8b\u5982\uff0c</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid square(int &amp;);\n\nint main() {\n   int number = 8;\n   cout &lt;&lt;  \"In main(): \" &lt;&lt; &amp;number &lt;&lt; endl;  // 0x22ff1c\n   cout &lt;&lt; number &lt;&lt; endl;  // 8\n   square(number);          // Implicit referencing (without '&amp;')\n   cout &lt;&lt; number &lt;&lt; endl;  // 64\n}\n\nvoid square(int &amp; rNumber) {  // Function takes an int reference (non-const)\n   cout &lt;&lt;  \"In square(): \" &lt;&lt; &amp;rNumber &lt;&lt; endl;  // 0x22ff1c\n   rNumber *= rNumber;        // Implicit de-referencing (without '*')\n}\n</code></pre> <p>\u518d\u6b21\uff0c\u8f93\u51fa\u663e\u793a\u88ab\u8c03\u7528\u7684\u51fd\u6570\u5728\u540c\u4e00\u5730\u5740\u4e0a\u64cd\u4f5c\uff0c\u56e0\u6b64\u53ef\u4ee5\u4fee\u6539\u8c03\u7528\u8005\u7684\u53d8\u91cf\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5f15\u7528\uff08\u5728\u8c03\u7528\u8005\u4e2d\uff09\u548c\u89e3\u5f15\u7528\uff08\u5728\u51fd\u6570\u4e2d\uff09\u662f\u9690\u5f0f\u5b8c\u6210\u7684\u3002\u4e0e\u6309\u503c\u4f20\u9012\u7684\u552f\u4e00\u7f16\u7801\u533a\u522b\u5728\u4e8e\u51fd\u6570\u7684\u53c2\u6570\u58f0\u660e\u4e2d\u3002</p> <p>\u8bf7\u8bb0\u4f4f\uff0c\u5f15\u7528\u5fc5\u987b\u5728\u58f0\u660e\u65f6\u521d\u59cb\u5316\u3002\u5728\u51fd\u6570\u5f62\u53c2\u7684\u60c5\u51b5\u4e0b\uff0c\u5f15\u7528\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u521d\u59cb\u5316\u4e3a\u8c03\u7528\u8005\u7684\u53c2\u6570\u3002</p> <p>\u5f15\u7528\u4e3b\u8981\u7528\u4e8e\u5728\u51fd\u6570\u95f4\u4f20\u9012\u5f15\u7528\uff0c\u4ee5\u4fbf\u88ab\u8c03\u7528\u7684\u51fd\u6570\u76f4\u63a5\u8bbf\u95ee\u8c03\u7528\u8005\u7684\u53d8\u91cf\u3002</p> <p>\u5f15\u7528\u4e3b\u8981\u7528\u4e8e\u5728\u51fd\u6570\u95f4\u4f20\u9012\u5f15\u7528\uff0c\u4ee5\u4fbf\u88ab\u8c03\u7528\u7684\u51fd\u6570\u76f4\u63a5\u8bbf\u95ee\u8c03\u7528\u8005\u7684\u53d8\u91cf\u3002</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#const-function-referencepointer-parameters-const","title":"\"const\" Function Reference/Pointer Parameters \"const\" \u51fd\u6570\u5f15\u7528/\u6307\u9488\u53c2\u6570","text":"<p>\u4e00\u4e2a <code>const</code> \u51fd\u6570\u5f62\u5f0f\u53c2\u6570\u5728\u51fd\u6570\u5185\u90e8\u4e0d\u80fd\u88ab\u4fee\u6539\u3002\u5c3d\u53ef\u80fd\u4f7f\u7528 <code>const</code> \uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u9632\u6b62\u4f60\u65e0\u610f\u4e2d\u4fee\u6539\u53c2\u6570\uff0c\u5e76\u4fdd\u62a4\u4f60\u514d\u53d7\u8bb8\u591a\u7f16\u7a0b\u9519\u8bef\u7684\u5f71\u54cd\u3002</p> <p>\u4e00\u4e2a <code>const</code> \u51fd\u6570\u5f62\u5f0f\u53c2\u6570\u5728\u51fd\u6570\u5185\u90e8\u4e0d\u80fd\u88ab\u4fee\u6539\u3002\u5c3d\u53ef\u80fd\u4f7f\u7528 <code>const</code> \uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u9632\u6b62\u4f60\u65e0\u610f\u4e2d\u4fee\u6539\u53c2\u6570\uff0c\u5e76\u4fdd\u62a4\u4f60\u514d\u53d7\u8bb8\u591a\u7f16\u7a0b\u9519\u8bef\u7684\u5f71\u54cd\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint squareConst(const int);\nint squareNonConst(int);\nint squareConstRef(const int &amp;);\nint squareNonConstRef(int &amp;);\n\nint main() {\n   int number = 8;\n   const int constNumber = 9;\n   cout &lt;&lt; squareConst(number) &lt;&lt; endl;\n   cout &lt;&lt; squareConst(constNumber) &lt;&lt; endl;\n   cout &lt;&lt; squareNonConst(number) &lt;&lt; endl;\n   cout &lt;&lt; squareNonConst(constNumber) &lt;&lt; endl;\n\n   cout &lt;&lt; squareConstRef(number) &lt;&lt; endl;\n   cout &lt;&lt; squareConstRef(constNumber) &lt;&lt; endl;\n   cout &lt;&lt; squareNonConstRef(number) &lt;&lt; endl;\n   // cout &lt;&lt; squareNonConstRef(constNumber) &lt;&lt; endl;\n       // error: invalid initialization of reference of\n       //  type 'int&amp;' from expression of type 'const int'\n}\n\nint squareConst(const int number) {\n   // number *= number;  // error: assignment of read-only parameter\n   return number * number;\n}\n\nint squareNonConst(int number) {  // non-const parameter\n   number *= number;\n   return number;\n}\n\nint squareConstRef(const int &amp; number) {  // const reference\n   return number * number;\n}\n\nint squareNonConstRef(int &amp; number) {  // non-const reference\n   return number * number;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#25","title":"2.5 \u4f20\u9012\u51fd\u6570\u7684\u8fd4\u56de\u503c","text":""},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#passing-the-return-value-as-reference","title":"Passing the Return-value as Reference \u5c06\u8fd4\u56de\u503c\u4f5c\u4e3a\u5f15\u7528\u4f20\u9012","text":"<p>\u4e5f\u53ef\u4ee5\u5c06\u8fd4\u56de\u503c\u4f5c\u4e3a\u5f15\u7528\u6216\u6307\u9488\u4f20\u9012\u3002\u4f8b\u5982\uff0c</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint &amp; squareRef(int &amp;);\nint * squarePtr(int *);\n\nint main() {\n   int number1 = 8;\n   cout &lt;&lt;  \"In main() &amp;number1: \" &lt;&lt; &amp;number1 &lt;&lt; endl;  // 0x22ff14\n   int &amp; result = squareRef(number1);\n   cout &lt;&lt;  \"In main() &amp;result: \" &lt;&lt; &amp;result &lt;&lt; endl;  // 0x22ff14\n   cout &lt;&lt; result &lt;&lt; endl;   // 64\n   cout &lt;&lt; number1 &lt;&lt; endl;  // 64\n\n   int number2 = 9;\n   cout &lt;&lt;  \"In main() &amp;number2: \" &lt;&lt; &amp;number2 &lt;&lt; endl;  // 0x22ff10\n   int * pResult = squarePtr(&amp;number2);\n   cout &lt;&lt;  \"In main() pResult: \" &lt;&lt; pResult &lt;&lt; endl;  // 0x22ff10\n   cout &lt;&lt; *pResult &lt;&lt; endl;   // 81\n   cout &lt;&lt; number2 &lt;&lt; endl;    // 81\n}\n\nint &amp; squareRef(int &amp; rNumber) {\n   cout &lt;&lt;  \"In squareRef(): \" &lt;&lt; &amp;rNumber &lt;&lt; endl;  // 0x22ff14\n   rNumber *= rNumber;\n   return rNumber;\n}\n\nint * squarePtr(int * pNumber) {\n   cout &lt;&lt;  \"In squarePtr(): \" &lt;&lt; pNumber &lt;&lt; endl;  // 0x22ff10\n   *pNumber *= *pNumber;\n   return pNumber;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#_2","title":"\u4f60\u4e0d\u5e94\u8be5\u5c06\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u4f5c\u4e3a\u8fd4\u56de\u503c\u6309\u5f15\u7528\u4f20\u9012","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint * squarePtr(int);\nint &amp; squareRef(int);\n\nint main() {\n   int number = 8;\n   cout &lt;&lt; number &lt;&lt; endl;  // 8\n   cout &lt;&lt; *squarePtr(number) &lt;&lt; endl;  // ??\n   cout &lt;&lt; squareRef(number) &lt;&lt; endl;   // ??\n}\n\nint * squarePtr(int number) {\n   int localResult = number * number;\n   return &amp;localResult;\n      // warning: address of local variable 'localResult' returned\n}\n\nint &amp; squareRef(int number) {\n   int localResult = number * number;\n   return localResult;\n      // warning: reference of local variable 'localResult' returned\n}\n</code></pre> <p>\u8fd9\u4e2a\u7a0b\u5e8f\u5b58\u5728\u4e25\u91cd\u7684\u903b\u8f91\u9519\u8bef\uff0c\u56e0\u4e3a\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u88ab\u4f5c\u4e3a\u8fd4\u56de\u503c\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u56de\u53bb\u3002\u5c40\u90e8\u53d8\u91cf\u5728\u51fd\u6570\u5185\u5177\u6709\u5c40\u90e8\u4f5c\u7528\u57df\uff0c\u5176\u503c\u5728\u51fd\u6570\u9000\u51fa\u540e\u4f1a\u88ab\u9500\u6bc1\u3002GCC \u7f16\u8bd1\u5668\u5f88\u53cb\u597d\u5730\u53d1\u51fa\u4e86\u8b66\u544a\uff08\u4f46\u4e0d\u662f\u9519\u8bef).</p> <p>\u5c06\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u5f15\u7528\u8fd4\u56de\u662f\u5b89\u5168\u7684\u3002\u8bf7\u53c2\u89c1\u4e4b\u524d\u7684\u793a\u4f8b</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#26","title":"2.6 \u603b\u7ed3","text":"<p>\u6307\u9488\u548c\u5f15\u7528\u975e\u5e38\u590d\u6742\u4e14\u96be\u4ee5\u638c\u63e1\u3002\u5b83\u4eec\u53ef\u4ee5\u6781\u5927\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6548\u7387</p> <p>\u5bf9\u4e8e\u65b0\u624b\u6765\u8bf4\uff0c\u907f\u514d\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u6307\u9488\u3002\u4e0d\u5f53\u4f7f\u7528\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e25\u91cd\u7684\u903b\u8f91\u9519\u8bef\u3002\u7136\u800c\uff0c\u4f60\u9700\u8981\u7406\u89e3\u4f7f\u7528\u6307\u9488\u548c\u5f15\u7528\u7684\u4f20\u5f15\u7528\u8bed\u6cd5\u7684\u77e5\u8bc6\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u8bb8\u591a\u5e93\u51fd\u6570\u4e2d\u88ab\u4f7f\u7528\u3002</p> <ul> <li>\u5728\u6309\u503c\u4f20\u9012\u4e2d\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u526f\u672c\u5e76\u4f20\u9012\u7ed9\u51fd\u6570\u3002\u8c03\u7528\u8005\u7684\u526f\u672c\u65e0\u6cd5\u88ab\u4fee\u6539\u3002</li> <li>\u5728\u6309\u5f15\u7528\u4f20\u9012\u4e2d\uff0c\u6307\u9488\u88ab\u4f20\u9012\u5230\u51fd\u6570\u4e2d\u3002\u8c03\u7528\u8005\u7684\u526f\u672c\u53ef\u80fd\u5728\u51fd\u6570\u5185\u90e8\u88ab\u4fee\u6539\u3002</li> <li>\u5728\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u53c2\u6570\u65f6\uff0c\u4f60\u4f7f\u7528\u53d8\u91cf\u540d\u4f5c\u4e3a\u53c2\u6570\u3002</li> <li>\u5728\u4f7f\u7528\u6307\u9488\u53c2\u6570\u7684\u6309\u5f15\u7528\u4f20\u9012\u4e2d\uff0c\u4f60\u9700\u8981\u4f7f\u7528 <code>&amp;varName</code> \uff08\u4e00\u4e2a\u5730\u5740\uff09\u4f5c\u4e3a\u53c2\u6570\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#3","title":"3\u52a8\u6001\u5185\u5b58\u5206\u914d","text":""},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#31-newdelete","title":"3.1 <code>new</code>\u548c<code>delete</code>\u8fd0\u7b97\u7b26","text":"<p><code>new</code> \u64cd\u4f5c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5df2\u5206\u914d\u5185\u5b58\u7684\u6307\u9488\u3002 <code>delete</code> \u8fd0\u7b97\u7b26\u4ee5\u4e00\u4e2a\u6307\u9488\uff08\u6307\u5411\u901a\u8fc7 <code>new</code> \u5206\u914d\u7684\u5185\u5b58\uff09\u4f5c\u4e3a\u5176\u552f\u4e00\u53c2\u6570\u3002</p> <pre><code>int number = 88;\nint * p1 = &amp;number;  // Assign a \"valid\" address into pointer\n\n// Dynamic Allocation\nint * p2;            // Not initialize, points to somewhere which is invalid\ncout &lt;&lt; p2 &lt;&lt; endl; // Print address before allocation\np2 = new int;       // Dynamically allocate an int and assign its address to pointer\n                    // The pointer gets a valid address with memory allocated\n*p2 = 99;\ncout &lt;&lt; p2 &lt;&lt; endl;  // Print address after allocation\ncout &lt;&lt; *p2 &lt;&lt; endl; // Print value point-to\ndelete p2;           // Remove the dynamically allocated storage\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c <code>new</code> \u548c <code>delete</code> \u8fd0\u7b97\u7b26\u4f5c\u7528\u4e8e\u6307\u9488\u3002</p> <p>\u8981\u521d\u59cb\u5316\u5206\u914d\u7684\u5185\u5b58\uff0c\u53ef\u4ee5\u4f7f\u7528\u57fa\u672c\u7c7b\u578b\u7684\u521d\u59cb\u5316\u5668\uff0c\u6216\u8005\u4e3a\u5bf9\u8c61\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002\u4f8b\u5982\uff0c</p> <pre><code>// use an initializer to initialize a fundamental type (such as int, double)\nint * p1 = new int(88);\ndouble * p2 = new double(1.23);\n\n// C++11 brace initialization syntax\nint * p1 = new int {88};\ndouble * p2 = new double {1.23};\n\n// invoke a constructor to initialize an object (such as Date, Time)\nDate * date1 = new Date(1999, 1, 1);  \nTime * time1 = new Time(12, 34, 56);\n</code></pre> <p>\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u90e8\u4e3a\u5168\u5c40\u6307\u9488\u52a8\u6001\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u3002\u51fd\u6570\u5185\u90e8\u52a8\u6001\u5206\u914d\u7684\u5b58\u50a8\u7a7a\u95f4\u5728\u51fd\u6570\u9000\u51fa\u540e\u4ecd\u7136\u5b58\u5728\u3002\u4f8b\u5982\uff0c</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint * p1, * p2;  // Global int pointers\n\n// This function allocates storage for the int*\n// which is available outside the function\nvoid allocate() {\n   p1 = new int;     // Allocate memory, initial content unknown\n   *p1 = 88;         // Assign value into location pointed to by pointer\n   p2 = new int(99); // Allocate and initialize\n}\n\nint main() {\n   allocate();\n   cout &lt;&lt; *p1 &lt;&lt; endl;  // 88\n   cout &lt;&lt; *p2 &lt;&lt; endl;  // 99\n   delete p1;  // Deallocate\n   delete p2;\n   return 0;\n}\n</code></pre> <p>\u9759\u6001\u5206\u914d\u548c\u52a8\u6001\u5206\u914d\u4e4b\u95f4\u7684\u4e3b\u8981\u533a\u522b\u662f\uff1a</p> <ul> <li>\u5728\u9759\u6001\u5206\u914d\u4e2d\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5206\u914d\u548c\u91ca\u653e\u5b58\u50a8\u7a7a\u95f4\uff0c\u5e76\u5904\u7406\u5185\u5b58\u7ba1\u7406\u3002\u800c\u5728\u52a8\u6001\u5206\u914d\u4e2d\uff0c\u4f5c\u4e3a\u7a0b\u5e8f\u5458\u7684\u4f60\u9700\u8981\u81ea\u5df1\u5904\u7406\u5185\u5b58\u7684\u5206\u914d\u548c\u91ca\u653e\uff08\u901a\u8fc7 <code>new</code> \u548c <code>delete</code> \u64cd\u4f5c\u7b26\uff09\u3002\u4f60\u5bf9\u6307\u9488\u5730\u5740\u53ca\u5176\u5185\u5bb9\u4ee5\u53ca\u5185\u5b58\u7ba1\u7406\u6709\u5b8c\u5168\u7684\u63a7\u5236\u3002</li> <li>\u9759\u6001\u5206\u914d\u7684\u5b9e\u4f53\u901a\u8fc7\u547d\u540d\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c\u3002\u52a8\u6001\u5206\u914d\u7684\u5b9e\u4f53\u901a\u8fc7\u6307\u9488\u8fdb\u884c\u5904\u7406\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#32-new-delete","title":"3.2 new[] \u548c delete[] \u8fd0\u7b97\u7b26","text":"<p>\u52a8\u6001\u6570\u7ec4\u5728\u8fd0\u884c\u65f6\u800c\u4e0d\u662f\u7f16\u8bd1\u65f6\u5206\u914d\uff0c\u901a\u8fc7 <code>new[]</code> \u8fd0\u7b97\u7b26\u3002\u8981\u79fb\u9664\u5b58\u50a8\u7a7a\u95f4\uff0c\u4f60\u9700\u8981\u4f7f\u7528 <code>delete[]</code> \u8fd0\u7b97\u7b26\uff08\u800c\u4e0d\u662f\u7b80\u5355\u5730\u4f7f\u7528 <code>delete</code> \uff09\u3002\u4f8b\u5982\uff0c</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\nusing namespace std;\n\nint main() {\n   const int SIZE = 5;\n   int * pArray;\n\n   pArray = new int[SIZE];  // Allocate array via new[] operator\n\n   // Assign random numbers between 0 and 99\n   for (int i = 0; i &lt; SIZE; ++i) {\n      *(pArray + i) = rand() % 100;\n   }\n   // Print array\n   for (int i = 0; i &lt; SIZE; ++i) {\n      cout &lt;&lt; *(pArray + i) &lt;&lt; \" \";\n   }\n   cout &lt;&lt; endl;\n\n   delete[] pArray;  // Deallocate array via delete[] operator\n   return 0;\n}\n</code></pre> <p>C++03 \u4e0d\u5141\u8bb8\u60a8\u521d\u59cb\u5316\u52a8\u6001\u5206\u914d\u7684\u6570\u7ec4\u3002C++11 \u5141\u8bb8\u4f7f\u7528\u5927\u62ec\u53f7\u521d\u59cb\u5316\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// C++11\nint * p = new int[5] {1, 2, 3, 4, 5};\n</code></pre>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#4","title":"4.\u6307\u9488\u3001\u6570\u7ec4\u548c\u51fd\u6570","text":""},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#41","title":"4.1\u6570\u7ec4\u88ab\u89c6\u4e3a\u6307\u9488","text":"<p>\u5728 C/C++ \u4e2d\uff0c\u6570\u7ec4\u7684\u540d\u79f0\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff08\u7d22\u5f15 0\uff09\u3002\u4f8b\u5982\uff0c\u5047\u8bbe <code>numbers</code> \u662f\u4e00\u4e2a <code>int</code> \u6570\u7ec4\uff0c <code>numbers</code> \u4e5f\u662f\u4e00\u4e2a <code>int</code> \u6307\u9488\uff0c\u6307\u5411\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c <code>numbers</code> \u4e0e <code>&amp;numbers[0]</code> \u662f\u76f8\u540c\u7684\u3002\u56e0\u6b64\uff0c <code>*numbers</code> \u662f <code>number[0]</code> \uff1b <code>*(numbers+i)</code> \u662f <code>numbers[i]</code> \u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   const int SIZE = 5;\n   int numbers[SIZE] = {11, 22, 44, 21, 41};  // An int array\n\n   // The array name numbers is an int pointer, pointing at the\n   // first item of the array, i.e., numbers = &amp;numbers[0]\n   cout &lt;&lt; &amp;numbers[0] &lt;&lt; endl; // Print address of first element (0x22fef8)\n   cout &lt;&lt; numbers &lt;&lt; endl;     // Same as above (0x22fef8)\n   cout &lt;&lt; *numbers &lt;&lt; endl;         // Same as numbers[0] (11)\n   cout &lt;&lt; *(numbers + 1) &lt;&lt; endl;   // Same as numbers[1] (22)\n   cout &lt;&lt; *(numbers + 4) &lt;&lt; endl;   // Same as numbers[4] (41)\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#42","title":"4.2 \u6307\u9488\u8fd0\u7b97","text":"<p>\u5982\u524d\u4e00\u8282\u6240\u8ff0\uff0c\u5982\u679c <code>numbers</code> \u662f\u4e00\u4e2a <code>int</code> \u6570\u7ec4\uff0c\u5b83\u5c06\u88ab\u89c6\u4e3a\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684 <code>int</code> \u6307\u9488\u3002 <code>(numbers + 1)</code> \u6307\u5411\u4e0b\u4e00\u4e2a <code>int</code> \uff0c\u800c\u4e0d\u662f\u5177\u6709\u4e0b\u4e00\u4e2a\u8fde\u7eed\u5730\u5740\u3002\u8bf7\u6ce8\u610f\uff0c\u4e00\u4e2a <code>int</code> \u901a\u5e38\u6709 4 \u4e2a\u5b57\u8282\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c <code>(numbers + 1)</code> \u5c06\u5730\u5740\u589e\u52a0 4\uff0c\u6216\u8005 <code>sizeof(int)</code> \u3002\u4f8b\u5982\uff0c</p> <pre><code>int numbers[] = {11, 22, 33};\nint * iPtr = numbers;\ncout &lt;&lt; iPtr &lt;&lt; endl;        // 0x22cd30\ncout &lt;&lt; iPtr + 1 &lt;&lt; endl;    // 0x22cd34 (increase by 4 - sizeof int)\ncout &lt;&lt; *iPtr &lt;&lt; endl;       // 11\ncout &lt;&lt; *(iPtr + 1) &lt;&lt; endl; // 22 \ncout &lt;&lt; *iPtr + 1 &lt;&lt; endl;   // 12\n</code></pre>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#43-size-of","title":"4.3 <code>size of</code>\u6570\u7ec4","text":"<p>\u64cd\u4f5c <code>sizeof(arrayName)</code> \u8fd4\u56de\u6570\u7ec4\u7684\u603b\u5b57\u8282\u6570\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u5176\u9664\u4ee5\u5355\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\uff08\u4f8b\u5982\u5143\u7d20 0 \u7684\u5927\u5c0f\uff09\u6765\u63a8\u5bfc\u51fa\u6570\u7ec4\u7684\u957f\u5ea6\uff08\u5927\u5c0f\uff09\u3002\u4f8b\u5982\uff0c</p> <pre><code>int numbers[100];\ncout &lt;&lt; sizeof(numbers) &lt;&lt; endl;     \n// Size of entire array in bytes (400)\ncout &lt;&lt; sizeof(numbers[0]) &lt;&lt; endl;  \n// Size of first element of the array in bytes (4)\ncout &lt;&lt; \"Array size is \" &lt;&lt; sizeof(numbers) / sizeof(numbers[0]) &lt;&lt; endl;  // (100)\n</code></pre>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#44","title":"4.4 \u5c06\u6570\u7ec4\u4f20\u5165/\u4f20\u51fa\u51fd\u6570","text":"<p>\u4e00\u4e2a\u6570\u7ec4\u4f5c\u4e3a\u6307\u5411\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u4f20\u9012\u7ed9\u51fd\u6570\u3002\u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u58f0\u660e\u4e2d\u4f7f\u7528\u6570\u7ec4\u8868\u793a\u6cd5\uff08\u4f8b\u5982\uff0c <code>int[]</code> \uff09\u6216\u6307\u9488\u8868\u793a\u6cd5\uff08\u4f8b\u5982\uff0c <code>int*</code> \uff09\u3002\u7f16\u8bd1\u5668\u603b\u662f\u5c06\u5176\u89c6\u4e3a\u6307\u9488\uff08\u4f8b\u5982\uff0c <code>int*</code> \uff09\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u58f0\u660e\u662f\u7b49\u6548\u7684\uff1a</p> <pre><code>int max(int numbers[], int size);\nint max(int *numbers, int size);\nint max(int number[50], int size);\n</code></pre> <p>\u5b83\u4eec\u5c06\u88ab\u7f16\u8bd1\u5668\u89c6\u4e3a <code>int*</code> \uff0c\u5982\u4e0b\u6240\u793a\u3002 <code>[]</code> \u4e2d\u7ed9\u51fa\u7684\u6570\u7ec4\u5927\u5c0f\u5c06\u88ab\u5ffd\u7565\u3002</p> <pre><code>int max(int*, int);\n</code></pre> <p>\u6570\u7ec4\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u5230\u51fd\u6570\u4e2d\uff0c\u56e0\u4e3a\u4f20\u9012\u7684\u662f\u6307\u9488\u800c\u4e0d\u662f\u514b\u9686\u526f\u672c\u3002\u5982\u679c\u5728\u51fd\u6570\u5185\u90e8\u4fee\u6539\u4e86\u6570\u7ec4\uff0c\u8fd9\u4e9b\u4fee\u6539\u5c06\u5e94\u7528\u5230\u8c03\u7528\u8005\u7684\u526f\u672c\u4e0a\u3002\u4f60\u53ef\u4ee5\u5c06\u6570\u7ec4\u53c2\u6570\u58f0\u660e\u4e3a <code>const</code> \u4ee5\u9632\u6b62\u6570\u7ec4\u5728\u51fd\u6570\u5185\u90e8\u88ab\u4fee\u6539\u3002</p> <p>\u6570\u7ec4\u7684\u5927\u5c0f\u4e0d\u662f\u6570\u7ec4\u53c2\u6570\u7684\u4e00\u90e8\u5206\uff0c\u9700\u8981\u5728\u53e6\u4e00\u4e2a <code>int</code> \u53c2\u6570\u4e2d\u4f20\u9012\u3002\u7f16\u8bd1\u5668\u65e0\u6cd5\u4ece\u6570\u7ec4\u6307\u9488\u63a8\u65ad\u6570\u7ec4\u5927\u5c0f\uff0c\u4e5f\u4e0d\u4f1a\u6267\u884c\u6570\u7ec4\u8fb9\u754c\u68c0\u67e5\u3002</p> <p>\u793a\u4f8b\uff1a\u4f7f\u7528\u901a\u5e38\u7684\u6570\u7ec4\u8868\u793a\u6cd5\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// Function prototypes\nint max(const int arr[], int size);\nvoid replaceByMax(int arr[], int size);\nvoid print(const int arr[], int size);\n\nint main() {\n   const int SIZE = 4;\n   int numbers[SIZE] = {11, 22, 33, 22};\n   print(numbers, SIZE);\n   cout &lt;&lt; max(numbers, SIZE) &lt;&lt; endl;\n   replaceByMax(numbers, SIZE);\n   print(numbers, SIZE);\n}\n\n// Return the maximum value of the given array.\n// The array is declared const, and cannot be modified inside the function.\nint max(const int arr[], int size) {\n   int max = arr[0];\n   for (int i = 1; i &lt; size; ++i) {\n      if (max &lt; arr[i]) max = arr[i];\n   }\n   return max;\n}\n\n// Replace all elements of the given array by its maximum value\n// Array is passed by reference. Modify the caller's copy.\nvoid replaceByMax(int arr[], int size) {\n   int maxValue = max(arr, size);\n   for (int i = 0; i &lt; size; ++i) {\n      arr[i] = maxValue;\n   }\n}\n\n// Print the array's content\nvoid print(const int arr[], int size) {\n   cout &lt;&lt; \"{\";\n   for (int i = 0; i &lt; size; ++i) {\n      cout &lt;&lt; arr[i];\n      if (i &lt; size - 1) cout &lt;&lt; \",\";\n   }\n   cout &lt;&lt; \"}\" &lt;&lt; endl;\n}\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u60a8\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u90e8\u4fee\u6539\u8c03\u7528\u8005\u7684\u6570\u7ec4\u5185\u5bb9\uff0c\u56e0\u4e3a\u6570\u7ec4\u662f\u6309\u5f15\u7528\u4f20\u9012\u7684\u3002\u4e3a\u4e86\u9632\u6b62\u610f\u5916\u4fee\u6539\uff0c\u60a8\u53ef\u4ee5\u5bf9\u51fd\u6570\u53c2\u6570\u5e94\u7528 <code>const</code> \u9650\u5b9a\u7b26\u3002\u8bf7\u8bb0\u4f4f\uff0c <code>const</code> \u4f1a\u544a\u77e5\u7f16\u8bd1\u5668\u8be5\u503c\u4e0d\u5e94\u88ab\u66f4\u6539\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u51fd\u6570 <code>print()</code> \u6253\u5370\u7ed9\u5b9a\u6570\u7ec4\u7684\u5185\u5bb9\u4e14\u4e0d\u4fee\u6539\u6570\u7ec4\uff0c\u60a8\u53ef\u4ee5\u5bf9\u6570\u7ec4\u540d\u79f0\u53ca\u5176\u5927\u5c0f\u90fd\u5e94\u7528 <code>const</code> \uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u51fd\u6570\u5185\u90e8\u4e0d\u5e94\u88ab\u66f4\u6539\u3002</p> <pre><code>void print(const int arr[], int size);\n</code></pre> <p>\u7f16\u8bd1\u5668\u4f1a\u6807\u8bb0\u4e00\u4e2a\u9519\u8bef\u201c\u8d4b\u503c\u53ea\u8bfb\u4f4d\u7f6e\u201d\uff0c\u5982\u679c\u5b83\u68c0\u6d4b\u5230 <code>const</code> \u503c\u5c06\u88ab\u66f4\u6539\u3002</p> <p>\u4f7f\u7528\u6307\u9488\u8868\u793a\u6cd5\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// Function prototype\nint max(const int *arr, int size);\n\nint main() {\n   const int SIZE = 5;\n   int numbers[SIZE] = {10, 20, 90, 76, 22};\n   cout &lt;&lt; max(numbers, SIZE) &lt;&lt; endl;\n}\n\n// Return the maximum value of the given array\nint max(const int *arr, int size) {\n   int max = *arr;\n   for (int i = 1; i &lt; size; ++i) {\n      if (max &lt; *(arr+i)) max = *(arr+i);\n   }\n   return max;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#45-size-of","title":"4.5 \u6309\u5f15\u7528\u4f20\u9012\u548c<code>size of</code>","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// Function prototypes\nvoid fun(const int *arr, int size);\n\n// Test Driver\nint main() {\n   const int SIZE = 5;\n   int a[SIZE] = {8, 4, 5, 3, 2};\n   cout &lt;&lt; \"sizeof in main() is \" &lt;&lt; sizeof(a) &lt;&lt; endl;\n   cout &lt;&lt; \"address in main() is \" &lt;&lt; a &lt;&lt; endl;\n   fun(a, SIZE);\n}\n\n// Function definitions\nvoid fun(const int *arr, int size) {\n   cout &lt;&lt; \"sizeof in function is \" &lt;&lt; sizeof(arr) &lt;&lt; endl;\n   cout &lt;&lt; \"address in function is \" &lt;&lt; arr &lt;&lt; endl;\n}\n</code></pre> <pre><code>sizeof in main() is 20\naddress in main() is 0x22fefc\nsizeof in function is 4\naddress in function is 0x22fefc\n</code></pre> <p>\u6570\u7ec4\u5728 <code>main()</code> \u4e2d\u7684\u5730\u5740\u548c\u51fd\u6570\u4e2d\u7684\u5730\u5740\u76f8\u540c\uff0c\u6b63\u5982\u9884\u671f\u7684\u90a3\u6837\uff0c\u56e0\u4e3a\u6570\u7ec4\u662f\u6309\u5f15\u7528\u4f20\u9012\u7684\u3002</p> <p>\u5728 <code>main()</code> \u4e2d\uff0c <code>sizeof</code> \u6570\u7ec4\u662f 20\uff08\u6bcf\u4e2a <code>int</code> 4 \u5b57\u8282\uff0c\u957f\u5ea6\u4e3a 5\uff09\u3002\u5728\u51fd\u6570\u5185\u90e8\uff0c <code>sizeof</code> \u662f 4\uff0c\u8fd9\u662f <code>sizeof</code> <code>int</code> \u6307\u9488\uff084 \u5b57\u8282\u5730\u5740\uff09\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f60\u9700\u8981\u5c06\u5927\u5c0f\u4f20\u9012\u5230\u51fd\u6570\u4e2d\u3002</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#46","title":"4.6 \u5728\u6570\u7ec4\u7684\u8303\u56f4\u5185\u8fdb\u884c\u64cd\u4f5c","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// Function prototype\nint sum(const int *begin, const int *end);\n\n// Test Driver\nint main() {\n   int a[] = {8, 4, 5, 3, 2, 1, 4, 8};\n   cout &lt;&lt; sum(a, a+8) &lt;&lt; endl;        // a[0] to a[7]\n   cout &lt;&lt; sum(a+2, a+5) &lt;&lt; endl;      // a[2] to a[4]\n   cout &lt;&lt; sum(&amp;a[2], &amp;a[5]) &lt;&lt; endl;  // a[2] to a[4]\n}\n\n// Function definition\n// Return the sum of the given array of the range from\n// begin to end, exclude end.\nint sum(const int *begin, const int *end) {\n   int sum = 0;\n   for (const int *p = begin; p != end; ++p) {\n      sum += *p;\n   }\n   return sum;\n}\n</code></pre> <ul> <li> <p>\u8981\u7f16\u5199\u4e00\u4e2a\u5bf9\u7ed9\u5b9a\u6570\u7ec4\u7684\u67d0\u4e2a\u8303\u56f4\u8fdb\u884c\u64cd\u4f5c\u7684\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u5c06\u5f00\u59cb\u6307\u9488\u548c\u7ed3\u675f\u6307\u9488\u4f20\u9012\u7ed9\u8be5\u51fd\u6570\u3002\u6309\u7167\u60ef\u4f8b\uff0c\u64cd\u4f5c\u5e94\u4ece\u5f00\u59cb\u6307\u9488\u5f00\u59cb\uff0c\u76f4\u5230\u7ed3\u675f\u6307\u9488\uff0c\u4f46\u4e0d\u5305\u62ec\u7ed3\u675f\u6307\u9488\u3002</p> </li> <li> <p>\u5728\u201c <code>const int *p</code> \u201d\u4e2d\uff0c <code>*p</code> \uff08\u6307\u5411\u7684\u5185\u5bb9\uff09\u662f\u6052\u5b9a\u7684\uff0c\u4f46 <code>p</code> \u4e0d\u662f\u6052\u5b9a\u7684\u3002</p> </li> </ul>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#47-c-string","title":"4.7 C-String \u548c\u6307\u9488","text":"<p>C-string\uff08C \u8bed\u8a00\u4e2d\u7684\uff09\u662f\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\uff0c\u4ee5\u7a7a\u5b57\u7b26 <code>'\\0'</code> \u4f5c\u4e3a\u7ed3\u675f\u6807\u5fd7\u3002\u4f8b\u5982\uff0c</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n\nint main() {\n   char msg1[] = \"Hello\";\n   char *msg2 = \"Hello\";\n      // warning: deprecated conversion from string constant to 'char*'\n\n   cout &lt;&lt; strlen(msg1) &lt;&lt; endl;    // 5\n   cout &lt;&lt; strlen(msg2) &lt;&lt; endl;\n   cout &lt;&lt; strlen(\"Hello\") &lt;&lt; endl;\n\n   int size = sizeof(msg1)/sizeof(char);\n   cout &lt;&lt; size &lt;&lt; endl;  // 6 - including the terminating '\\0'\n   for (int i = 0; msg1[i] != '\\0'; ++i) {\n      cout &lt;&lt; msg1[i];\n   }\n   cout &lt;&lt; endl;\n\n   for (char *p = msg1; *p != '\\0'; ++p) {\n          // *p != '\\0' is the same as *p != 0, is the same as *p\n      cout &lt;&lt; *p;\n   }\n   cout &lt;&lt; endl;\n}\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e C-String \u51fd\u6570\uff0c\u4f8b\u5982 <code>strlen()</code> \uff08\u5728\u5934\u6587\u4ef6 <code>cstring</code> \u4e2d\uff0c\u4ece C \u7684 <code>string.h</code> \u79fb\u690d\u8fc7\u6765\uff09\uff0c\u65e0\u9700\u5c06\u6570\u7ec4\u957f\u5ea6\u4f20\u9012\u7ed9\u51fd\u6570\u3002\u8fd9\u662f\u56e0\u4e3a C-Strings \u4ee5 <code>'\\0'</code> \u7ed3\u5c3e\u3002\u51fd\u6570\u53ef\u4ee5\u904d\u5386\u6570\u7ec4\u4e2d\u7684\u5b57\u7b26\uff0c\u76f4\u5230 <code>'\\0'</code> \u3002\u4f8b\u5982\uff0c</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n\nint count(const char *str, const char c);  // No need to pass the array size\n\nint main() {\n   char msg1[] = \"Hello, world\";\n   char *msg2 = \"Hello, world\";\n\n   cout &lt;&lt; count(msg1, 'l') &lt;&lt; endl;\n   cout &lt;&lt; count(msg2, 'l') &lt;&lt; endl;\n   cout &lt;&lt; count(\"Hello, world\", 'l') &lt;&lt; endl;\n}\n\n// Count the occurrence of c in str\n// No need to pass the size of char[] as C-string is terminated with '\\0'\nint count(const char *str, const char c) {\n   int count = 0;\n   while (*str) {   // same as (*str != '\\0')\n      if (*str == c) ++count;\n      ++str;\n   }\n   return count;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#5","title":"5\u66f4\u591a\u5173\u4e8e\u6307\u9488\u7684\u5185\u5bb9","text":""},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#51","title":"5.1 \u51fd\u6570\u6307\u9488","text":"<p>\u5728 C/C++ \u4e2d\uff0c\u51fd\u6570\u50cf\u6240\u6709\u6570\u636e\u9879\u4e00\u6837\uff0c\u90fd\u6709\u4e00\u4e2a\u5730\u5740\u3002\u51fd\u6570\u7684\u540d\u79f0\u662f\u51fd\u6570\u5728\u5185\u5b58\u4e2d\u7684\u8d77\u59cb\u5730\u5740\uff0c\u56e0\u6b64\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u4e2a\u6307\u9488\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u51fd\u6570\u6307\u9488\u4f20\u9012\u7ed9\u51fd\u6570\u3002\u58f0\u660e\u51fd\u6570\u6307\u9488\u7684\u8bed\u6cd5\u662f\uff1a</p> <pre><code>// Function-pointer declaration\nreturn-type (* function-ptr-name) (parameter-list)\n\n// Examples\ndouble (*fp)(int, int)  // fp points to a function that takes two ints and returns a double (function-pointer)\ndouble *dp;             // dp points to a double (double-pointer)\ndouble *fun(int, int)   // fun is a function that takes two ints and returns a double-pointer\n\ndouble f(int, int);      // f is a function that takes two ints and returns a double\nfp = f;                 \n</code></pre> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint arithmetic(int, int, int (*)(int, int));\n    // Take 3 arguments, 2 int's and a function pointer\n    //   int (*)(int, int), which takes two int's and return an int\nint add(int, int);\nint sub(int, int);\n\nint add(int n1, int n2) { return n1 + n2; }\nint sub(int n1, int n2) { return n1 - n2; }\n\nint arithmetic(int n1, int n2, int (*operation) (int, int)) {\n   return (*operation)(n1, n2);\n}\n\nint main() {\n   int number1 = 5, number2 = 6;\n\n   // add\n   cout &lt;&lt; arithmetic(number1, number2, add) &lt;&lt; endl;\n   // subtract\n   cout &lt;&lt; arithmetic(number1, number2, sub) &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#52-void","title":"5.2 \u901a\u7528\u6307\u9488\u6216\u7a7a\u6307\u9488 (void *)","text":"<p>\u4e00\u4e2a <code>void</code> \u6307\u9488\u53ef\u4ee5\u6301\u6709\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u7684\u5730\u5740\uff08\u51fd\u6570\u6307\u9488\u9664\u5916\uff09\u3002\u6211\u4eec\u65e0\u6cd5\u5bf9 <code>void</code> \u6307\u9488\u6240\u6307\u5411\u7684\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff0c\u56e0\u4e3a\u7c7b\u578b\u672a\u77e5\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>void</code> \u6307\u9488\u4e0e\u5176\u4ed6\u5730\u5740\u8fdb\u884c\u6bd4\u8f83\u3002</p>"},{"location":"DEV/Programming/Cpp/03%E6%8C%87%E9%92%88%E3%80%81%E5%BC%95%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#53","title":"5.3 \u5e38\u91cf\u6307\u9488\u4e0e\u5e38\u91cf\u6307\u5411\u6570\u636e","text":"<ol> <li>\u975e\u6052\u5b9a\u6307\u9488\u6307\u5411\u6052\u5b9a\u6570\u636e\uff1a\u6307\u5411\u7684\u6570\u636e\u4e0d\u80fd\u88ab\u66f4\u6539\uff1b\u4f46\u6307\u9488\u53ef\u4ee5\u88ab\u66f4\u6539\u4ee5\u6307\u5411\u5176\u4ed6\u6570\u636e\u3002\u4f8b\u5982\uff0c</li> </ol> <pre><code>int i1 = 8, i2 = 9;\nconst int * iptr = &amp;i1;  // non-constant pointer pointing to constant data\n// *iptr = 9;   // error: assignment of read-only location\niptr = &amp;i2;  // okay\n</code></pre> <ol> <li>\u6307\u5411\u975e\u5e38\u91cf\u6570\u636e\u7684\u5e38\u91cf\u6307\u9488\uff1a\u6307\u5411\u7684\u6570\u636e\u53ef\u4ee5\u88ab\u66f4\u6539\uff1b\u4f46\u6307\u9488\u4e0d\u80fd\u88ab\u66f4\u6539\u4ee5\u6307\u5411\u5176\u4ed6\u6570\u636e\u3002\u4f8b\u5982\uff0c</li> </ol> <pre><code>int i1 = 8, i2 = 9;\nint * const iptr = &amp;i1;  // constant pointer pointing to non-constant data\n                         // constant pointer must be initialized during declaration\n*iptr = 9;   // okay\n// iptr = &amp;i2;  // error: assignment of read-only variable\n</code></pre> <ol> <li>\u6307\u5411\u5e38\u91cf\u6570\u636e\u7684\u5e38\u91cf\u6307\u9488\uff1a\u6307\u5411\u7684\u6570\u636e\u4e0d\u80fd\u88ab\u66f4\u6539\uff1b\u6307\u9488\u4e5f\u4e0d\u80fd\u88ab\u66f4\u6539\u4ee5\u6307\u5411\u5176\u4ed6\u6570\u636e\u3002\u4f8b\u5982\uff0c</li> </ol> <pre><code>int i1 = 8, i2 = 9;\nconst int * const iptr = &amp;i1;  // constant pointer pointing to constant data\n// *iptr = 9;   // error: assignment of read-only variable\n// iptr = &amp;i2;  // error: assignment of read-only variable\n</code></pre> <ol> <li>\u975e\u6052\u5b9a\u6307\u9488\u6307\u5411\u975e\u6052\u5b9a\u6570\u636e\uff1a\u6307\u5411\u7684\u6570\u636e\u53ef\u4ee5\u88ab\u66f4\u6539\uff1b\u6307\u9488\u4e5f\u53ef\u4ee5\u88ab\u66f4\u6539\u4ee5\u6307\u5411\u5176\u4ed6\u6570\u636e\u3002\u4f8b\u5982\uff0c</li> </ol> <pre><code>int i1 = 8, i2 = 9;\nint * iptr = &amp;i1;  // non-constant pointer pointing to non-constant data\n*iptr = 9;   // okay\niptr = &amp;i2;  // okay\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/","title":"\u4e3a\u4ec0\u4e48\u8981\u9009\u62e9\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08OOP\uff09","text":"<p>\u5047\u8bbe\u4f60\u60f3\u7ec4\u88c5\u81ea\u5df1\u7684 PC\uff0c\u4f60\u53bb\u4e00\u5bb6\u786c\u4ef6\u5546\u5e97\uff0c\u6311\u9009\u4e86\u4e00\u5757\u4e3b\u677f\u3001\u4e00\u4e2a\u5904\u7406\u5668\u3001\u4e00\u4e9b RAM\u3001\u4e00\u4e2a\u786c\u76d8\u3001\u4e00\u4e2a\u673a\u7bb1\u3001\u4e00\u4e2a\u7535\u6e90\uff0c\u7136\u540e\u628a\u5b83\u4eec\u7ec4\u88c5\u5728\u4e00\u8d77\u3002\u4f60\u6253\u5f00\u7535\u6e90\uff0cPC \u5c31\u8fd0\u884c\u4e86\u3002\u4f60\u4e0d\u9700\u8981\u62c5\u5fc3\u4e3b\u677f\u662f 4 \u5c42\u8fd8\u662f 6 \u5c42\u677f\uff0c\u786c\u76d8\u6709 4 \u4e2a\u8fd8\u662f 6 \u4e2a\u76d8\u7247\uff1b\u76f4\u5f84\u662f 3 \u82f1\u5bf8\u8fd8\u662f 5 \u82f1\u5bf8\uff0cRAM \u662f\u65e5\u672c\u5236\u9020\u8fd8\u662f\u97e9\u56fd\u5236\u9020\uff0c\u7b49\u7b49\u3002\u4f60\u53ea\u9700\u5c06\u786c\u4ef6\u7ec4\u4ef6\u7ec4\u88c5\u5728\u4e00\u8d77\uff0c\u5e76\u671f\u671b\u673a\u5668\u80fd\u8fd0\u884c\u3002\u5f53\u7136\uff0c\u4f60\u5fc5\u987b\u786e\u4fdd\u63a5\u53e3\u6b63\u786e\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684\u4e3b\u677f\u53ea\u652f\u6301 IDE\uff0c\u4f60\u5c31\u5f97\u9009\u62e9 IDE \u786c\u76d8\u800c\u4e0d\u662f SCSI \u786c\u76d8\uff1b\u4f60\u5fc5\u987b\u9009\u62e9\u5177\u6709\u6b63\u786e\u901f\u5ea6\u7b49\u7ea7\u7684 RAM\uff0c\u7b49\u7b49\u3002\u7136\u800c\uff0c\u4ece\u786c\u4ef6\u7ec4\u4ef6\u8bbe\u7f6e\u4e00\u53f0\u673a\u5668\u5e76\u4e0d\u96be\u3002</p> <p>\u540c\u6837\uff0c\u6c7d\u8f66\u662f\u7531\u96f6\u4ef6\u548c\u7ec4\u4ef6\u7ec4\u88c5\u800c\u6210\u7684\uff0c\u4f8b\u5982\u5e95\u76d8\u3001\u8f66\u95e8\u3001\u53d1\u52a8\u673a\u3001\u8f66\u8f6e\u3001\u5239\u8f66\u548c\u53d8\u901f\u5668\u3002\u8fd9\u4e9b\u7ec4\u4ef6\u662f\u53ef\u91cd\u590d\u4f7f\u7528\u7684\uff0c\u4f8b\u5982\uff0c\u4e00\u4e2a\u8f66\u8f6e\u53ef\u4ee5\u7528\u4e8e\u591a\u8f86\u6c7d\u8f66\uff08\u5177\u6709\u76f8\u540c\u89c4\u683c\uff09\u3002</p> <p>\u8f6f\u4ef6\u600e\u4e48\u6837\uff1f\u4f60\u80fd\u901a\u8fc7\u8fd9\u91cc\u9009\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u90a3\u91cc\u9009\u4e00\u4e2a\u7a0b\u5e8f\u6765\u201c\u7ec4\u88c5\u201d\u4e00\u4e2a\u8f6f\u4ef6\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u671f\u671b\u7a0b\u5e8f\u80fd\u8fd0\u884c\u5417\uff1f\u7b54\u6848\u663e\u7136\u662f\u5426\u5b9a\u7684\uff01\u4e0e\u786c\u4ef6\u4e0d\u540c\uff0c\u4ece\u8f6f\u4ef6\u7ec4\u4ef6\u4e2d\u201c\u7ec4\u88c5\u201d\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u662f\u975e\u5e38\u56f0\u96be\u7684\u3002\u81ea\u4ece 60 \u5e74\u524d\u8ba1\u7b97\u673a\u51fa\u73b0\u4ee5\u6765\uff0c\u6211\u4eec\u5df2\u7ecf\u7f16\u5199\u4e86\u65e0\u6570\u7684\u7a0b\u5e8f\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u90fd\u4e0d\u5f97\u4e0d\u91cd\u65b0\u53d1\u660e\u8f6e\u5b50\uff0c\u4ece\u5934\u5f00\u59cb\u7f16\u5199\u7a0b\u5e8f\u3002</p> <p>\u4e3a\u4ec0\u4e48\u8981\u91cd\u65b0\u53d1\u660e\u8f6e\u5b50\uff1f</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#1","title":"1\u5173\u4e8e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b","text":""},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#11","title":"1.1 \u4f20\u7edf\u7684\u9762\u5411\u8fc7\u7a0b\u8bed\u8a00","text":"<p>\u6211\u4eec\u80fd\u5426\u5728\u4f20\u7edf\u7684\u9762\u5411\u8fc7\u7a0b\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u5982C\u3001Fortran\u3001Cobol\u6216Pascal\u4e2d\u505a\u8fd9\u4ef6\u4e8b\uff1f</p> <p></p> <p>\u4f20\u7edf\u7684\u9762\u5411\u8fc7\u7a0b\u7684\u8bed\u8a00\uff08\u5982 C \u548c Pascal\uff09\u5728\u521b\u5efa\u53ef\u91cd\u7528\u7684\u8f6f\u4ef6\u7ec4\u4ef6\u65b9\u9762\u5b58\u5728\u4e00\u4e9b\u663e\u8457\u7684\u7f3a\u70b9\uff1a</p> <ul> <li>\u7a0b\u5e8f\u7531\u51fd\u6570\u7ec4\u6210\u3002\u51fd\u6570\u5f80\u5f80\u4e0d\u53ef\u91cd\u7528\u3002\u4ece\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u590d\u5236\u4e00\u4e2a\u51fd\u6570\u5e76\u5728\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u91cd\u7528\u975e\u5e38\u56f0\u96be\uff0c\u56e0\u4e3a\u8be5\u51fd\u6570\u5f88\u53ef\u80fd\u4f1a\u5f15\u7528\u5934\u6587\u4ef6\u3001\u5168\u5c40\u53d8\u91cf\u548c\u5176\u4ed6\u51fd\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u51fd\u6570\u5e76\u6ca1\u6709\u5f88\u597d\u5730\u5c01\u88c5\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u53ef\u91cd\u7528\u5355\u5143\u3002</li> <li>\u7a0b\u5e8f\u8bed\u8a00\u4e0d\u9002\u5408\u7528\u4e8e\u89e3\u51b3\u73b0\u5b9e\u751f\u6d3b\u95ee\u9898\u7684\u9ad8\u5c42\u6b21\u62bd\u8c61\u3002\u4f8b\u5982\uff0cC \u7a0b\u5e8f\u4f7f\u7528\u8bf8\u5982 if-else\u3001for-loop\u3001array\u3001function\u3001pointer \u7b49\u6784\u9020\uff0c\u8fd9\u4e9b\u90fd\u662f\u4f4e\u5c42\u6b21\u7684\uff0c\u5f88\u96be\u62bd\u8c61\u51fa\u771f\u5b9e\u95ee\u9898\uff0c\u5982\u5ba2\u6237\u5173\u7cfb\u7ba1\u7406\uff08CRM\uff09\u7cfb\u7edf\u6216\u7535\u8111\u8db3\u7403\u6e38\u620f\u3002\uff08\u60f3\u8c61\u4e00\u4e0b\u4f7f\u7528\u6c47\u7f16\u4ee3\u7801\uff0c\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u4f4e\u5c42\u6b21\u7684\u4ee3\u7801\uff0c\u6765\u7f16\u5199\u4e00\u4e2a\u7535\u8111\u8db3\u7403\u6e38\u620f\u3002C \u8bed\u8a00\u8981\u597d\u4e00\u4e9b\uff0c\u4f46\u4e5f\u597d\u4e0d\u4e86\u591a\u5c11\u3002\uff09</li> </ul> <p>\u7b80\u800c\u8a00\u4e4b\uff0c\u4f20\u7edf\u7684\u7a0b\u5e8f\u8bed\u8a00\u5c06\u8f6f\u4ef6\u5b9e\u4f53\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u5206\u5f00\u3002</p> <p>\u5728 1970 \u5e74\u4ee3\u65e9\u671f\uff0c\u7f8e\u56fd\u56fd\u9632\u90e8\uff08DoD\uff09\u59d4\u6258\u4e00\u4e2a\u7279\u522b\u5de5\u4f5c\u7ec4\u8c03\u67e5\u5176 IT \u9884\u7b97\u4e3a\u4f55\u603b\u662f\u5931\u63a7\uff0c\u4f46\u5374\u6ca1\u6709\u592a\u591a\u6210\u679c\u3002\u8c03\u67e5\u7ed3\u679c\u5982\u4e0b\uff1a</p> <ul> <li>80%\u7684\u9884\u7b97\u7528\u4e8e\u8f6f\u4ef6\uff08\u5269\u4f59\u7684 20%\u7528\u4e8e\u786c\u4ef6\uff09\u3002</li> <li>\u8d85\u8fc7 80%\u7684\u8f6f\u4ef6\u9884\u7b97\u7528\u4e8e\u7ef4\u62a4\uff08\u4ec5\u5269 20%\u7528\u4e8e\u65b0\u8f6f\u4ef6\u5f00\u53d1\uff09\u3002</li> <li>\u786c\u4ef6\u7ec4\u4ef6\u53ef\u4ee5\u5e94\u7528\u4e8e\u5404\u79cd\u4ea7\u54c1\uff0c\u5176\u5b8c\u6574\u6027\u901a\u5e38\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u4ea7\u54c1\u3002\uff08\u786c\u4ef6\u53ef\u4ee5\u5171\u4eab\u548c\u91cd\u590d\u4f7f\u7528\uff01\u786c\u4ef6\u6545\u969c\u662f\u9694\u79bb\u7684\uff01\uff09</li> <li>\u8f6f\u4ef6\u7a0b\u5e8f\u5f80\u5f80\u4e0d\u53ef\u5171\u4eab\u4e14\u4e0d\u53ef\u91cd\u7528\u3002\u8f6f\u4ef6\u6545\u969c\u53ef\u80fd\u4f1a\u5f71\u54cd\u8ba1\u7b97\u673a\u4e2d\u8fd0\u884c\u7684\u5176\u4ed6\u7a0b\u5e8f\u3002</li> </ul> <p>\u4efb\u52a1\u5c0f\u7ec4\u63d0\u8bae\u8ba9\u8f6f\u4ef6\u8868\u73b0\u5f97\u50cf\u786c\u4ef6 OBJECT\u3002\u968f\u540e\uff0c\u56fd\u9632\u90e8\uff08DoD\uff09\u7528\u4e00\u79cd\u540d\u4e3a Ada \u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u66ff\u6362\u4e86\u8d85\u8fc7 450 \u79cd\u8ba1\u7b97\u673a\u8bed\u8a00\uff0c\u8fd9\u4e9b\u8bed\u8a00\u5f53\u65f6\u7528\u4e8e\u6784\u5efa DoD \u7cfb\u7edf\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#12","title":"1.2\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00","text":"<p>\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08OOP\uff09\u8bed\u8a00\u65e8\u5728\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002</p> <ul> <li>\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u57fa\u672c\u5355\u4f4d\u662f\u7c7b\uff0c\u5b83\u5c06\u9759\u6001\u5c5e\u6027\u548c\u52a8\u6001\u884c\u4e3a\u5c01\u88c5\u5728\u4e00\u4e2a\u201c\u76d2\u5b50\u201d\u4e2d\uff0c\u5e76\u6307\u5b9a\u4e86\u4f7f\u7528\u8fd9\u4e9b\u76d2\u5b50\u7684\u516c\u5171\u63a5\u53e3\u3002\u7531\u4e8e\u7c7b\u662f\u826f\u597d\u5c01\u88c5\u7684\uff08\u4e0e\u51fd\u6570\u76f8\u6bd4\uff09\uff0c\u56e0\u6b64\u66f4\u5bb9\u6613\u91cd\u7528\u8fd9\u4e9b\u7c7b\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u5c06\u8f6f\u4ef6\u5b9e\u4f53\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7ec4\u5408\u5728\u540c\u4e00\u4e2a\u76d2\u5b50\u4e2d\u3002</li> <li>OOP \u8bed\u8a00\u5141\u8bb8\u66f4\u9ad8\u5c42\u6b21\u7684\u62bd\u8c61\u6765\u89e3\u51b3\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u95ee\u9898\u3002\u4f20\u7edf\u7684\u8fc7\u7a0b\u5f0f\u8bed\u8a00\uff08\u5982 C \u548c Pascal\uff09\u8feb\u4f7f\u4f60\u4ece\u8ba1\u7b97\u673a\u7ed3\u6784\u7684\u89d2\u5ea6\u601d\u8003\uff08\u4f8b\u5982\u5185\u5b58\u4f4d\u548c\u5b57\u8282\u3001\u6570\u7ec4\u3001\u51b3\u7b56\u3001\u5faa\u73af\uff09\uff0c\u800c\u4e0d\u662f\u4ece\u4f60\u8bd5\u56fe\u89e3\u51b3\u7684\u95ee\u9898\u7684\u89d2\u5ea6\u601d\u8003\u3002OOP \u8bed\u8a00\uff08\u5982 Java\u3001C++\u3001C#\uff09\u8ba9\u4f60\u5728\u95ee\u9898\u7a7a\u95f4\u4e2d\u601d\u8003\uff0c\u5e76\u4f7f\u7528\u8f6f\u4ef6\u5bf9\u8c61\u6765\u8868\u793a\u548c\u62bd\u8c61\u95ee\u9898\u7a7a\u95f4\u4e2d\u7684\u5b9e\u4f53\u6765\u89e3\u51b3\u95ee\u9898\u3002</li> </ul> <p></p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u4f60\u60f3\u7f16\u5199\u4e00\u4e2a\u7535\u8111\u8db3\u7403\u6e38\u620f\uff08\u6211\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\uff09\u3002\u5728\u9762\u5411\u8fc7\u7a0b\u7684\u8bed\u8a00\u4e2d\u5efa\u6a21\u8fd9\u4e2a\u6e38\u620f\u662f\u76f8\u5f53\u56f0\u96be\u7684\u3002\u4f46\u4f7f\u7528 OOP \u8bed\u8a00\uff0c\u4f60\u53ef\u4ee5\u8f7b\u677e\u5730\u6839\u636e\u8db3\u7403\u6e38\u620f\u4e2d\u51fa\u73b0\u7684\u201c\u771f\u5b9e\u4e8b\u7269\u201d\u6765\u76f8\u5e94\u5730\u5efa\u6a21\u7a0b\u5e8f\u3002</p> <ul> <li>\u73a9\u5bb6\uff1a\u5c5e\u6027\u5305\u62ec\u59d3\u540d\u3001\u53f7\u7801\u3001\u573a\u4e0a\u4f4d\u7f6e\u7b49\uff1b\u64cd\u4f5c\u5305\u62ec\u8dd1\u3001\u8df3\u3001\u8e22\u7403\u7b49\u3002</li> <li>Ball\uff1a\u7403\uff1a</li> <li>Reference: \u53c2\u8003\uff1a</li> <li>Field: \u5b57\u6bb5\uff1a</li> <li>Audience: \u53d7\u4f17\uff1a</li> <li>Weather: \u5929\u6c14\uff1a</li> </ul> <p>\u6700\u91cd\u8981\u7684\u662f\uff0c\u5176\u4e2d\u4e00\u4e9b\u7c7b\uff08\u4f8b\u5982 <code>Ball</code> \u548c <code>Audience</code> \uff09\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u91cd\u590d\u4f7f\u7528\uff0c\u4f8b\u5982\u7535\u8111\u7bee\u7403\u6e38\u620f\uff0c\u51e0\u4e4e\u4e0d\u9700\u8981\u6216\u5b8c\u5168\u4e0d\u9700\u8981\u4fee\u6539\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#13-opp","title":"1.3 OPP\u7684\u4f18\u52bf","text":"<p>\u9762\u5411\u8fc7\u7a0b\u7684\u8bed\u8a00\u4ee5\u8fc7\u7a0b\u4e3a\u4e2d\u5fc3\uff0c\u4ee5\u51fd\u6570\u4e3a\u57fa\u672c\u5355\u4f4d\u3002\u4f60\u9700\u8981\u5148\u5f04\u6e05\u695a\u6240\u6709\u7684\u51fd\u6570\uff0c\u7136\u540e\u518d\u8003\u8651\u5982\u4f55\u8868\u793a\u6570\u636e\u3002</p> <p>\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u5173\u6ce8\u7528\u6237\u611f\u77e5\u7684\u7ec4\u4ef6\uff0c\u4ee5\u5bf9\u8c61\u4f5c\u4e3a\u57fa\u672c\u5355\u4f4d\u3002\u4f60\u901a\u8fc7\u5c06\u6240\u6709\u63cf\u8ff0\u7528\u6237\u4e0e\u6570\u636e\u4ea4\u4e92\u7684\u6570\u636e\u548c\u64cd\u4f5c\u6574\u5408\u5728\u4e00\u8d77\uff0c\u6765\u786e\u5b9a\u6240\u6709\u5bf9\u8c61\u3002</p> <p>\u9762\u5411\u5bf9\u8c61\u6280\u672f\u6709\u5f88\u591a\u597d\u5904\uff1a</p> <ul> <li>\u5728\u8f6f\u4ef6\u8bbe\u8ba1\u4e2d\u66f4\u52a0\u8f7b\u677e\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u4ece\u95ee\u9898\u7684\u89d2\u5ea6\u601d\u8003\uff0c\u800c\u4e0d\u5fc5\u8003\u8651\u673a\u5668\u7684\u4f4d\u548c\u5b57\u8282\u3002\u4f60\u5904\u7406\u7684\u662f\u9ad8\u5c42\u6b21\u7684\u6982\u5ff5\u548c\u62bd\u8c61\u3002\u8bbe\u8ba1\u7684\u8f7b\u677e\u5bfc\u81f4\u66f4\u9ad8\u6548\u7684\u8f6f\u4ef6\u5f00\u53d1\u3002</li> <li>\u8f6f\u4ef6\u7ef4\u62a4\u7684\u4fbf\u5229\u6027\uff1a\u9762\u5411\u5bf9\u8c61\u7684\u8f6f\u4ef6\u66f4\u5bb9\u6613\u7406\u89e3\uff0c\u56e0\u6b64\u66f4\u5bb9\u6613\u6d4b\u8bd5\u3001\u8c03\u8bd5\u548c\u7ef4\u62a4\u3002</li> <li>\u53ef\u91cd\u7528\u8f6f\u4ef6\uff1a\u60a8\u4e0d\u9700\u8981\u53cd\u590d\u91cd\u65b0\u53d1\u660e\u8f6e\u5b50\uff0c\u4e5f\u4e0d\u9700\u8981\u4e3a\u4e0d\u540c\u60c5\u51b5\u91cd\u5199\u76f8\u540c\u7684\u529f\u80fd\u3002\u5f00\u53d1\u65b0\u5e94\u7528\u7a0b\u5e8f\u6700\u5feb\u3001\u6700\u5b89\u5168\u7684\u65b9\u6cd5\u662f\u91cd\u7528\u73b0\u6709\u4ee3\u7801\u2014\u2014\u7ecf\u8fc7\u5145\u5206\u6d4b\u8bd5\u548c\u9a8c\u8bc1\u7684\u4ee3\u7801\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#2-opp","title":"2 OPP\u57fa\u7840","text":""},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#21-classes-instances","title":"2.1 \u7c7b\u4e0e\u5b9e\u4f8b Classes &amp; Instances","text":"<p>Class: \u7c7b\u662f\u540c\u7c7b\u5bf9\u8c61\u7684\u5b9a\u4e49\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u7c7b\u662f\u4e00\u4e2a\u84dd\u56fe\u3001\u6a21\u677f\u6216\u539f\u578b\uff0c\u5b83\u5b9a\u4e49\u5e76\u63cf\u8ff0\u4e86\u540c\u7c7b\u6240\u6709\u5bf9\u8c61\u5171\u6709\u7684\u9759\u6001\u5c5e\u6027\u548c\u52a8\u6001\u884c\u4e3a\u3002</p> <p>Instance :\u5b9e\u4f8b\u662f\u7c7b\u4e2d\u7279\u5b9a\u9879\u76ee\u7684\u5b9e\u73b0\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b9e\u4f8b\u662f\u7c7b\u7684\u5b9e\u4f8b\u5316\u3002\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u90fd\u5177\u6709\u76f8\u4f3c\u7684\u5c5e\u6027\uff0c\u5982\u7c7b\u5b9a\u4e49\u4e2d\u6240\u63cf\u8ff0\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a\u201c <code>Student</code> \u201d\u7684\u7c7b\uff0c\u5e76\u4e3a\u201c <code>Peter</code> \u201d\u3001\u201c <code>Paul</code> \u201d\u548c\u201c <code>Pauline</code> \u201d\u521b\u5efa\u7c7b\u201c <code>Student</code> \u201d\u7684\u4e09\u4e2a\u5b9e\u4f8b\u3002</p> <p>\u201cobject\u201d\u8fd9\u4e2a\u672f\u8bed\u901a\u5e38\u6307\u7684\u662f\u5b9e\u4f8b\u3002\u4f46\u5b83\u5e38\u5e38\u88ab\u7528\u5f97\u6bd4\u8f83\u5bbd\u6cdb\uff0c\u53ef\u80fd\u6307\u4ee3\u4e00\u4e2a\u7c7b\u6216\u4e00\u4e2a\u5b9e\u4f8b\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#22","title":"2.2 \u4e00\u4e2a\u7c7b\u662f\u4e00\u4e2a\u5c01\u88c5\u6570\u636e\u548c\u51fd\u6570\u7684\u4e09\u683c\u76d2\u5b50","text":"<ol> <li>Classname (or identifier): identifies the class.    Classname (\u6216\u6807\u8bc6\u7b26)\uff1a\u6807\u8bc6\u7c7b\u3002</li> <li>Data Members or Variables (or attributes, states, fields): contains the static attributes of the class.    \u6570\u636e\u6210\u5458\u6216\u53d8\u91cf\uff08\u6216\u5c5e\u6027\u3001\u72b6\u6001\u3001\u5b57\u6bb5\uff09\uff1a\u5305\u542b\u7c7b\u7684\u9759\u6001\u5c5e\u6027\u3002</li> <li>Member Functions (or methods, behaviors, operations): contains the dynamic operations of the class.    \u6210\u5458\u51fd\u6570\uff08\u6216\u65b9\u6cd5\u3001\u884c\u4e3a\u3001\u64cd\u4f5c\uff09\uff1a\u5305\u542b\u7c7b\u7684\u52a8\u6001\u64cd\u4f5c\u3002</li> </ol> <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a\u7c7b\u5c06\u9759\u6001\u5c5e\u6027\uff08\u6570\u636e\uff09\u548c\u52a8\u6001\u884c\u4e3a\uff08\u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u7684\u64cd\u4f5c\uff09\u5c01\u88c5\u5728\u4e00\u4e2a\u76d2\u5b50\u91cc\u3002</p> <p>Class Members: The data members and member functions are collectively called class members. \u7c7b\u6210\u5458\uff1a\u6570\u636e\u6210\u5458\u548c\u6210\u5458\u51fd\u6570\u7edf\u79f0\u4e3a\u7c7b\u6210\u5458\u3002</p> <p>\u4e0b\u56fe\u5c55\u793a\u4e86\u4e00\u4e9b\u7c7b\u7684\u793a\u4f8b\uff1a</p> <p></p> <p>\u4e0b\u56fe\u663e\u793a\u4e86\u7c7b <code>Student</code> \u7684\u4e24\u4e2a\u5b9e\u4f8b\uff0c\u5206\u522b\u6807\u8bc6\u4e3a\u201c <code>paul</code> \u201d\u548c\u201c <code>peter</code> \u201d\u3002</p> <p></p> <p>\u7edf\u4e00\u5efa\u6a21\u8bed\u8a00\uff08UML\uff09\u7c7b\u56fe\u548c\u5b9e\u4f8b\u56fe\uff1a\u4e0a\u8ff0\u7c7b\u56fe\u662f\u6839\u636e UML \u7b26\u53f7\u7ed8\u5236\u7684\u3002\u4e00\u4e2a\u7c7b\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u90e8\u5206\u7684\u6846\uff0c\u5206\u522b\u5305\u542b\u540d\u79f0\u3001\u6570\u636e\u6210\u5458\uff08\u53d8\u91cf\uff09\u548c\u6210\u5458\u51fd\u6570\u3002\u7c7b\u540d\u4ee5\u7c97\u4f53\u663e\u793a\u5e76\u5c45\u4e2d\u3002\u4e00\u4e2a\u5b9e\u4f8b\uff08\u5bf9\u8c61\uff09\u4e5f\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u90e8\u5206\u7684\u6846\uff0c\u5b9e\u4f8b\u540d\u79f0\u663e\u793a\u4e3a <code>instanceName:Classname</code> \u5e76\u5e26\u6709\u4e0b\u5212\u7ebf\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#_1","title":"\u7b80\u8981\u6982\u8ff0","text":"<ul> <li>\u4e00\u4e2a\u7c7b\u662f\u7531\u7a0b\u5e8f\u5458\u5b9a\u4e49\u7684\u3001\u62bd\u8c61\u7684\u3001\u81ea\u5305\u542b\u7684\u3001\u53ef\u91cd\u7528\u7684\u8f6f\u4ef6\u5b9e\u4f53\uff0c\u5b83\u6a21\u4eff\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u4e8b\u7269\u3002</li> <li>\u4e00\u4e2a\u7c7b\u662f\u4e00\u4e2a\u5305\u542b\u540d\u79f0\u3001\u6570\u636e\u6210\u5458\uff08\u53d8\u91cf\uff09\u548c\u6210\u5458\u51fd\u6570\u7684 3 \u4e2a\u5206\u533a\u7684\u76d2\u5b50\u3002</li> <li> <p>\u4e00\u4e2a\u7c7b\u5c01\u88c5\u4e86\u6570\u636e\u7ed3\u6784\uff08\u5728\u6570\u636e\u6210\u5458\u4e2d\uff09\u548c\u7b97\u6cd5\uff08\u6210\u5458\u51fd\u6570\uff09\u3002\u6570\u636e\u6210\u5458\u7684\u503c\u6784\u6210\u4e86\u5b83\u7684\u72b6\u6001\u3002\u6210\u5458\u51fd\u6570\u6784\u6210\u4e86\u5b83\u7684\u884c\u4e3a\u3002</p> </li> <li> <p>\u4e00\u4e2a\u5b9e\u4f8b\u662f\u4e00\u4e2a\u7c7b\u7684\u7279\u5b9a\u9879\u76ee\u7684\u5b9e\u4f8b\u5316\uff08\u6216\u5b9e\u73b0\uff09\u3002</p> </li> </ul>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#23-class-definition","title":"2.3 Class Definition \u7c7b\u5b9a\u4e49","text":"<p>\u5728 C++ \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5173\u952e\u5b57 <code>class</code> \u6765\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u3002\u7c7b\u58f0\u660e\u4e2d\u6709\u4e24\u4e2a\u90e8\u5206\uff1a <code>private</code> \u548c <code>public</code> \uff0c\u7a0d\u540e\u4f1a\u8fdb\u884c\u89e3\u91ca\u3002\u4f8b\u5982\uff0c</p> <pre><code>class Circle {         // classname\nprivate:\n   double radius;      // Data members (variables)\n   string color;\npublic:   \n   double getRadius(); // Member functions\n   double getArea();\n}\n</code></pre> <pre><code>class SoccerPlayer {   // classname\nprivate:\n   int number;         // Data members (variables)\n   string name;\n   int x, y;\npublic:   \n   void run();         // Member functions\n   void kickBall();\n}\n</code></pre> <p>\u7c7b\u547d\u540d\u89c4\u8303\uff1a\u7c7b\u540d\u5e94\u4e3a\u540d\u8bcd\u6216\u7531\u591a\u4e2a\u8bcd\u7ec4\u6210\u7684\u540d\u8bcd\u77ed\u8bed\u3002\u6240\u6709\u8bcd\u7684\u9996\u5b57\u6bcd\u5e94\u5927\u5199\uff08\u9a7c\u5cf0\u5f0f\uff09\u3002\u7c7b\u540d\u4f7f\u7528\u5355\u6570\u540d\u8bcd\u3002\u9009\u62e9\u6709\u610f\u4e49\u4e14\u81ea\u63cf\u8ff0\u7684\u7c7b\u540d\u3002\u4f8b\u5982\uff0c <code>SoccerPlayer</code> \uff0c <code>HttpProxyServer</code> \uff0c <code>FileInputStream</code> \uff0c <code>PrintStream</code> \u548c <code>SocketFactory</code> \u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#24","title":"2.4 \u521b\u5efa\u7c7b\u7684\u5b9e\u4f8b","text":"<p>\u8981\u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5fc5\u987b\u8981\u6ee1\u8db3\uff1a</p> <ul> <li>\u58f0\u660e\u7279\u5b9a\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u6807\u8bc6\u7b26\uff08\u540d\u79f0\uff09</li> <li>\u8c03\u7528\u6784\u9020\u51fd\u6570\u6765\u6784\u5efa\u5b9e\u4f8b\uff08\u5373\u4e3a\u5b9e\u4f8b\u5206\u914d\u50a8\u5b58\u7a7a\u95f4\u5e76\u521d\u59cb\u5316\u53d8\u91cf\uff09</li> </ul> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u540d\u4e3a <code>Circle</code> \u7684\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u5982\u4e0b\u521b\u5efa <code>Circle</code> \u7684\u5b9e\u4f8b\uff1a</p> <pre><code>// Construct 3 instances of the class Circle: c1, c2, and c3\nCircle c1(1.2, \"red\");  // radius, color\nCircle c2(3.4);         // radius, default color\nCircle c3;              // default radius and color\n</code></pre> <p>\u6216\u8005\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u8bed\u6cd5\u663e\u5f0f\u8c03\u7528\u6784\u9020\u51fd\u6570\uff1a</p> <pre><code>Circle c1 = Circle(1.2, \"red\");  // radius, color\nCircle c2 = Circle(3.4);         // radius, default color\nCircle c3 = Circle();            // default radius and color\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#25dot-operator","title":"2.5Dot (.) Operator \u70b9\u53f7 (.) \u8fd0\u7b97\u7b26","text":"<p>\u8981\u5f15\u7528\u5bf9\u8c61\u7684\u6210\u5458\uff08\u6570\u636e\u6210\u5458\u6216\u6210\u5458\u51fd\u6570\uff09\uff0c\u5fc5\u987b\uff1a</p> <ul> <li>\u9996\u5148\u786e\u5b9a\u611f\u5174\u8da3\u7684\u5b9e\u4f8b\u3002\u7136\u540e</li> <li>\u4f7f\u7528\u70b9\u8fd0\u7b97\u7b26\uff08<code>.</code>\uff09\u6765\u5f15\u7528\u6210\u5458\uff0c\u4f7f\u7528\u4e3a<code>instanceName.memberName</code> </li> </ul> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u540d\u4e3a <code>Circle</code> \u7684\u7c7b\uff0c\u5305\u542b\u4e24\u4e2a\u6570\u636e\u6210\u5458\uff08 <code>radius</code> \u548c <code>color</code> \uff09\u4ee5\u53ca\u4e24\u4e2a\u51fd\u6570\uff08 <code>getRadius()</code> \u548c <code>getArea()</code> \uff09\u3002\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u7c7b <code>Circle</code> \u7684\u4e09\u4e2a\u5b9e\u4f8b\uff0c\u5206\u522b\u662f <code>c1</code> \u3001 <code>c2</code> \u548c <code>c3</code> \u3002\u8981\u8c03\u7528\u51fd\u6570 <code>getArea()</code> \uff0c\u4f60\u5fc5\u987b\u9996\u5148\u786e\u5b9a\u611f\u5174\u8da3\u7684\u5b9e\u4f8b\uff0c\u6bd4\u5982 <code>c2</code> \uff0c\u7136\u540e\u4f7f\u7528\u70b9\u8fd0\u7b97\u7b26\uff0c\u4ee5 <code>c2.getArea()</code> \u7684\u5f62\u5f0f\u8c03\u7528\u5b9e\u4f8b <code>c2</code> \u7684 <code>getArea()</code> \u51fd\u6570\u3002</p> <p>For example, \u4f8b\u5982\uff0c</p> <pre><code>// Declare and construct instances c1 and c2 of the class Circle\nCircle c1(1.2, \"blue\");\nCircle c2(3.4, \"green\");\n// Invoke member function via dot operator\ncout &lt;&lt; c1.getArea() &lt;&lt; endl;\ncout &lt;&lt; c2.getArea() &lt;&lt; endl;\n// Reference data members via dot operator\nc1.radius = 5.5;\nc2.radius = 6.6;\n</code></pre> <p>\u8c03\u7528 <code>getArea()</code> \u800c\u4e0d\u6307\u5b9a\u5b9e\u4f8b\u662f\u6beb\u65e0\u610f\u4e49\u7684\uff0c\u56e0\u4e3a\u534a\u5f84\u662f\u672a\u77e5\u7684\uff08\u53ef\u80fd\u6709\u591a\u4e2a <code>Circle</code> \u5b9e\u4f8b - \u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u7ef4\u62a4\u81ea\u5df1\u7684\u534a\u5f84\uff09\u3002</p> <p>\u4e00\u822c\u6765\u8bf4\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u540d\u4e3a <code>AClass</code> \u7684\u7c7b\uff0c\u5305\u542b\u4e00\u4e2a\u540d\u4e3a <code>aData</code> \u7684\u6570\u636e\u6210\u5458\u548c\u4e00\u4e2a\u540d\u4e3a <code>aFunction()</code> \u7684\u6210\u5458\u51fd\u6570\u3002\u4e3a <code>AClass</code> \u6784\u9020\u4e86\u4e00\u4e2a\u540d\u4e3a <code>anInstance</code> \u7684\u5b9e\u4f8b\u3002\u4f60\u4f7f\u7528\u4e86 <code>anInstance.aData</code> \u548c <code>anInstance.aFunction()</code> \u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#26data-members-variables","title":"2.6\u6570\u636e\u6210\u5458\uff08\u53d8\u91cf\uff09Data Members (Variables)","text":"<p>\u6570\u636e\u6210\u5458\uff08\u53d8\u91cf\uff09\u6709\u4e00\u4e2a\u540d\u79f0\uff08\u6216\u6807\u8bc6\u7b26\uff09\u548c\u4e00\u4e2a\u7c7b\u578b\uff1b\u5e76\u4e14\u6301\u6709\u8be5\u7279\u5b9a\u7c7b\u578b\u7684\u503c\uff08\u5982\u524d\u4e00\u7ae0\u6240\u8ff0\uff09\u3002\u6570\u636e\u6210\u5458\u4e5f\u53ef\u4ee5\u662f\u67d0\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff08\u5c06\u5728\u540e\u9762\u8ba8\u8bba\uff09\u3002</p> <p>\u6570\u636e\u6210\u5458\u547d\u540d\u7ea6\u5b9a\uff1a\u6570\u636e\u6210\u5458\u540d\u79f0\u5e94\u4e3a\u540d\u8bcd\u6216\u7531\u591a\u4e2a\u8bcd\u7ec4\u6210\u7684\u540d\u8bcd\u77ed\u8bed\u3002\u7b2c\u4e00\u4e2a\u8bcd\u5c0f\u5199\uff0c\u5176\u4f59\u8bcd\u7684\u9996\u5b57\u6bcd\u5927\u5199\uff08\u9a7c\u5cf0\u5f0f\uff09\uff0c\u4f8b\u5982\uff1a <code>fontSize</code> \uff0c <code>roomNumber</code> \uff0c <code>xMax</code> \uff0c <code>yMin</code> \u548c <code>xTopLeft</code> \u3002\u8bf7\u6ce8\u610f\uff0c\u53d8\u91cf\u540d\u4ee5\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u800c\u7c7b\u540d\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#27","title":"2.7 \u6210\u5458\u51fd\u6570","text":"<p>\u6210\u5458\u51fd\u6570\uff08\u5982\u524d\u4e00\u7ae0\u6240\u8ff0\uff09\uff1a</p> <ul> <li>\u4ece\u8c03\u7528\u8005\u63a5\u53d7\u53c2\u6570</li> <li>\u6267\u884c\u51fd\u6570\u4f53\u4e2d\u5b9a\u4e49\u7684\u64cd\u4f5c\uff0c\u5e76\u4e14</li> <li>\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u7247\u6bb5\uff08<code>\u6216void</code>)\u7ed9\u8c03\u7528\u8005</li> </ul> <p>\u6210\u5458\u51fd\u6570\u547d\u540d\u89c4\u8303\uff1a\u51fd\u6570\u540d\u5e94\u4e3a\u52a8\u8bcd\uff0c\u6216\u7531\u591a\u4e2a\u8bcd\u7ec4\u6210\u7684\u52a8\u8bcd\u77ed\u8bed\u3002\u7b2c\u4e00\u4e2a\u8bcd\u5c0f\u5199\uff0c\u5176\u4f59\u8bcd\u7684\u9996\u5b57\u6bcd\u5927\u5199\uff08\u9a7c\u5cf0\u5f0f\uff09\u3002\u4f8b\u5982\uff0c <code>getRadius()</code> \uff0c <code>getParameterValues()</code> \u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u6570\u636e\u6210\u5458\u540d\u79f0\u662f\u540d\u8bcd\uff08\u8868\u793a\u9759\u6001\u5c5e\u6027\uff09\uff0c\u800c\u51fd\u6570\u540d\u79f0\u662f\u52a8\u8bcd\uff08\u8868\u793a\u52a8\u4f5c\uff09\u3002\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684\u547d\u540d\u7ea6\u5b9a\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u4ece\u4e0a\u4e0b\u6587\u4e2d\u533a\u5206\u5b83\u4eec\u3002\u51fd\u6570\u5728\u62ec\u53f7\u4e2d\u63a5\u53d7\u53c2\u6570\uff08\u53ef\u80fd\u6709\u96f6\u4e2a\u53c2\u6570\uff0c\u62ec\u53f7\u4e3a\u7a7a\uff09\uff0c\u4f46\u53d8\u91cf\u6ca1\u6709\u3002\u5728\u672c\u6587\u4e2d\uff0c\u51fd\u6570\u7528\u4e00\u5bf9\u62ec\u53f7\u8868\u793a\uff0c\u4f8b\u5982 <code>println()</code> \uff0c <code>getArea()</code> \u4ee5\u4fbf\u6e05\u6670\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#28-opp","title":"2.8 \u5c06\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\uff1a \u4e00\u4e2aOPP\u5b9e\u4f8b","text":"<p>\u4e00\u4e2a\u540d\u4e3a <code>Circle</code> \u7684\u7c7b\u5c06\u6309\u7167\u7c7b\u56fe\u6240\u793a\u8fdb\u884c\u5b9a\u4e49\u3002\u5b83\u5305\u542b\u4e24\u4e2a\u6570\u636e\u6210\u5458\uff1a <code>radius</code> \uff08\u7c7b\u578b\u4e3a <code>double</code> \uff09\u548c <code>color</code> \uff08\u7c7b\u578b\u4e3a <code>String</code> \uff09\uff1b\u4ee5\u53ca\u4e09\u4e2a\u6210\u5458\u51fd\u6570\uff1a <code>getRadius()</code> \u3001 <code>getColor()</code> \u548c <code>getArea()</code> \u3002</p> <p>\u4e09\u4e2a <code>Circle</code> \u7684\u5b9e\u4f8b\uff0c\u5206\u522b\u79f0\u4e3a <code>c1</code> \u3001 <code>c2</code> \u548c <code>c3</code> \uff0c\u968f\u540e\u5c06\u88ab\u6784\u5efa\uff0c\u5e76\u5e26\u6709\u5404\u81ea\u7684\u6570\u636e\u6210\u5458\uff0c\u5982\u5b9e\u4f8b\u56fe\u6240\u793a\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u6240\u6709\u4ee3\u7801\u4fdd\u5b58\u5728\u4e00\u4e2a\u540d\u4e3a <code>CircleAIO.cpp</code> \u7684\u5355\u4e00\u6e90\u6587\u4ef6\u4e2d\u3002</p> <pre><code>/* The Circle class (All source codes in one file) (CircleAIO.cpp) */\n#include &lt;iostream&gt;    // using IO functions\n#include &lt;string&gt;      // using string\nusing namespace std;\n\nclass Circle {\nprivate:\n   double radius;      // Data member (Variable)\n   string color;       // Data member (Variable)\n\npublic:\n   // Constructor with default values for data members\n   Circle(double r = 1.0, string c = \"red\") {\n      radius = r;\n      color = c;\n   }\n\n   double getRadius() {  // Member function (Getter)\n      return radius;\n   }\n\n   string getColor() {   // Member function (Getter)\n      return color;\n   }\n\n   double getArea() {    // Member function\n      return radius*radius*3.1416;\n   }\n};   // need to end the class declaration with a semi-colon\n\n// Test driver function\nint main() {\n   // Construct a Circle instance\n   Circle c1(1.2, \"blue\");\n   cout &lt;&lt; \"Radius=\" &lt;&lt; c1.getRadius() &lt;&lt; \" Area=\" &lt;&lt; c1.getArea()\n        &lt;&lt; \" Color=\" &lt;&lt; c1.getColor() &lt;&lt; endl;\n\n   // Construct another Circle instance\n   Circle c2(3.4); // default color\n   cout &lt;&lt; \"Radius=\" &lt;&lt; c2.getRadius() &lt;&lt; \" Area=\" &lt;&lt; c2.getArea()\n        &lt;&lt; \" Color=\" &lt;&lt; c2.getColor() &lt;&lt; endl;\n\n   // Construct a Circle instance using default no-arg constructor\n   Circle c3;      // default radius and color\n   cout &lt;&lt; \"Radius=\" &lt;&lt; c3.getRadius() &lt;&lt; \" Area=\" &lt;&lt; c3.getArea()\n        &lt;&lt; \" Color=\" &lt;&lt; c3.getColor() &lt;&lt; endl;\n   return 0;\n}\n</code></pre> <pre><code>Radius=1.2 Area=4.5239 Color=blue\nRadius=3.4 Area=36.3169 Color=red\nRadius=1 Area=3.1416 Color=red\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#29-constructors","title":"2.9 Constructors \u6784\u9020\u51fd\u6570","text":"<p>\u6784\u9020\u51fd\u6570\u662f\u4e00\u79cd\u7279\u6b8a\u51fd\u6570\uff0c\u5176\u51fd\u6570\u540d\u4e0e\u7c7b\u540d\u76f8\u540c\u3002\u5728\u4e0a\u9762\u7684 <code>Circle</code> \u7c7b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u5982\u4e0b\uff1a</p> <pre><code>// Constructor has the same name as the class\nCircle(double r = 1.0, string c = \"red\") {\n   radius = r;\n   color = c;\n}\n</code></pre> <p>\u6784\u9020\u51fd\u6570\u7528\u4e8e\u6784\u5efa\u548c\u521d\u59cb\u5316\u6240\u6709\u6570\u636e\u6210\u5458\u3002\u8981\u521b\u5efa\u7c7b\u7684\u65b0\u5b9e\u4f8b\uff0c\u60a8\u9700\u8981\u58f0\u660e\u5b9e\u4f8b\u7684\u540d\u79f0\u5e76\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002\u4f8b\u5982\uff0c</p> <pre><code>Circle c1(1.2, \"blue\");\nCircle c2(3.4);      // default color\nCircle c3;           // default radius and color\n                     // Take note that there is no empty bracket ()\n</code></pre> <p>\u6784\u9020\u51fd\u6570\u4e0e\u666e\u901a\u51fd\u6570\u5728\u4ee5\u4e0b\u65b9\u9762\u6709\u6240\u4e0d\u540c\uff1a</p> <ul> <li>\u6784\u9020\u51fd\u6570\u7684\u540d\u79f0\u4e0e\u7c7b\u540d\u76f8\u540c\u3002</li> <li>\u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\uff08\u6216\u9690\u5f0f\u8fd4\u56de <code>void</code> \uff09\u3002\u56e0\u6b64\uff0c\u6784\u9020\u51fd\u6570\u4f53\u5185\u4e0d\u5141\u8bb8\u6709 <code>return</code> \u8bed\u53e5\u3002</li> <li>\u6784\u9020\u51fd\u6570\u53ea\u80fd\u88ab\u8c03\u7528\u4e00\u6b21\u6765\u521d\u59cb\u5316\u6784\u5efa\u7684\u5b9e\u4f8b\u3002\u4f60\u4e0d\u80fd\u5728\u7a0b\u5e8f\u4e2d\u4e4b\u540e\u518d\u6b21\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002</li> <li>\u6784\u9020\u51fd\u6570\u4e0d\u4f1a\u88ab\u7ee7\u627f\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#210","title":"2.10 \u51fd\u6570\u7684\u9ed8\u8ba4\u53c2\u6570","text":"<p>\u5728 C++ \u4e2d\uff0c\u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u5934\u4e2d\u4e3a\u51fd\u6570\uff08\u5305\u62ec\u6784\u9020\u51fd\u6570\uff09\u7684\u5c3e\u90e8\u53c2\u6570\u6307\u5b9a\u9ed8\u8ba4\u503c\u3002\u4f8b\u5982\uff0c</p> <pre><code>/* Test function default arguments (TestFnDefault.cpp) */\n#include &lt;iostream&gt;\nusing namespace std;\n\n// Function prototype\nint sum(int n1, int n2, int n3 = 0, int n4 = 0, int n5 = 0);\n\nint main() {\n   cout &lt;&lt; sum(1, 1, 1, 1, 1) &lt;&lt; endl; // 5\n   cout &lt;&lt; sum(1, 1, 1, 1) &lt;&lt; endl;    // 4\n   cout &lt;&lt; sum(1, 1, 1) &lt;&lt; endl;       // 3\n   cout &lt;&lt; sum(1, 1) &lt;&lt; endl;          // 2\n// cout &lt;&lt; sum(1) &lt;&lt; endl;  // error: too few arguments\n}\n\n// Function definition\n// The default values shall be specified in function prototype,\n//   not the function implementation\nint sum(int n1, int n2, int n3, int n4, int n5) {\n   return n1 + n2 + n3 + n4 + n5;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#211-public-private","title":"2.11 \"public\" \u4e0e \"private\" \u8bbf\u95ee\u63a7\u5236\u4fee\u9970\u7b26","text":"<p>\u8bbf\u95ee\u63a7\u5236\u4fee\u9970\u7b26\u53ef\u7528\u4e8e\u63a7\u5236\u7c7b\u6570\u636e\u6210\u5458\u6216\u51fd\u6570\u6210\u5458\u7684\u53ef\u89c1\u6027\uff0c\u4ece\u4ee5\u4e0b\u4fe9\u4e2a\u63a7\u5236\u8bbf\u95ee\u4fee\u9970\u7b26\u5f00\u59cb\uff1a</p> <ul> <li> <ol> <li>public:\u8be5\u6210\u5458\uff08\u6570\u636e\u6216\u51fd\u6570\uff09\u5728\u7cfb\u7edf\u4e2d\u5bf9\u6240\u6709\u4eba\u53ef\u8bbf\u95ee\u548c\u4f7f\u7528\u7684\u3002\u6bd4\u5982\u7c7b\u4e4b\u5916<code>main</code>\u51fd\u6570\u91cc</li> </ol> </li> <li> <ol> <li>private:\u8be5\u6210\u5458\uff08\u6570\u636e\u6216\u51fd\u6570\uff09\u4ec5\u5728\u6b64\u7c7b\u4e2d(\u7c7b\u7684\u5185\u90e8)\u53ef\u4ee5\u8bbf\u95ee\u548c\u4f7f\u7528\u3002<code>main</code>\u51fd\u6570\u4e0d\u53ef\u8bbf\u95ee</li> </ol> </li> </ul> <p>\u4f8b\u5982\uff0c\u5728\u4e0a\u9762\u7684 <code>Circle</code> \u5b9a\u4e49\u4e2d\uff0c\u6570\u636e\u6210\u5458 <code>radius</code> \u88ab\u58f0\u660e\u4e3a <code>private</code> \u3002\u56e0\u6b64\uff0c <code>radius</code> \u5728 <code>Circle</code> \u7c7b\u5185\u90e8\u662f\u53ef\u8bbf\u95ee\u7684\uff0c\u4f46\u5728 <code>\u7c7b\u5916\u90e8\u4e0d\u53ef\u8bbf\u95ee\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f60\u4e0d\u80fd\u4f7f\u7528\u201c c1.radius \u201d\u6765\u5f15\u7528 main()\u4e2d c1 \u7684</code>radius<code>\u3002\u5c1d\u8bd5\u5728</code>main()<code>\u4e2d\u63d2\u5165\u8bed\u53e5\u201c</code>cout &lt;&lt; c1.radius; \u201d\uff0c\u5e76\u89c2\u5bdf\u9519\u8bef\u6d88\u606f\uff1a</p> <pre><code>CircleAIO.cpp:8:11: error: 'double Circle::radius' is private\n</code></pre> <p>\u5c1d\u8bd5\u5c06 <code>radius</code> \u79fb\u52a8\u5230 <code>public</code> \u90e8\u5206\uff0c\u7136\u540e\u91cd\u65b0\u8fd0\u884c\u8be5\u8bed\u53e5\u3002</p> <p>\u53e6\u4e00\u65b9\u9762\uff0c\u51fd\u6570 <code>getRadius()</code> \u5728 <code>Circle</code> \u7c7b\u4e2d\u88ab\u58f0\u660e\u4e3a <code>public</code> \u3002\u56e0\u6b64\uff0c\u5b83\u53ef\u4ee5\u5728 <code>main()</code> \u4e2d\u88ab\u8c03\u7528\u3002</p> <p>UML Notation: In UML notation, <code>public</code> members are denoted with a \"<code>+</code>\", while <code>private</code> members with a \"<code>-</code>\" in the class diagram. UML \u8868\u793a\u6cd5\uff1a\u5728 UML \u8868\u793a\u6cd5\u4e2d\uff0c <code>public</code> \u6210\u5458\u7528 \" <code>+</code> \" \u8868\u793a\uff0c\u800c <code>private</code> \u6210\u5458\u5728\u7c7b\u56fe\u4e2d\u7528 \" <code>-</code> \" \u8868\u793a\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#212","title":"2.12 \u4fe1\u606f\u9690\u85cf\u548c\u5c01\u88c5","text":"<p>\u4e00\u4e2a\u7c7b\u5c06\u9759\u6001\u5c5e\u6027\u548c\u52a8\u6001\u884c\u4e3a\u5c01\u88c5\u5230\u4e00\u4e2a\u201c3 \u4e2a\u9694\u95f4\u7684\u76d2\u5b50\u201d\u4e2d\u3002\u4e00\u65e6\u5b9a\u4e49\u4e86\u7c7b\uff0c\u4f60\u53ef\u4ee5\u5c01\u597d\u8fd9\u4e2a\u201c\u76d2\u5b50\u201d\uff0c\u5e76\u5c06\u5176\u653e\u5728\u67b6\u5b50\u4e0a\u4f9b\u4ed6\u4eba\u4f7f\u7528\u548c\u91cd\u590d\u4f7f\u7528\u3002\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u62ff\u8d77\u8fd9\u4e2a\u201c\u76d2\u5b50\u201d\uff0c\u5e76\u5728\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u3002\u8fd9\u5728\u4f20\u7edf\u7684\u9762\u5411\u8fc7\u7a0b\u7684\u8bed\u8a00\u5982 C \u4e2d\u662f\u65e0\u6cd5\u5b9e\u73b0\u7684\uff0c\u56e0\u4e3a\u9759\u6001\u5c5e\u6027\uff08\u6216\u53d8\u91cf\uff09\u5206\u6563\u5728\u6574\u4e2a\u7a0b\u5e8f\u548c\u5934\u6587\u4ef6\u4e2d\u3002\u4f60\u65e0\u6cd5\u201c\u526a\u5207\u201d\u51fa\u4e00\u90e8\u5206 C \u7a0b\u5e8f\uff0c\u63d2\u5165\u5230\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u5e76\u671f\u671b\u7a0b\u5e8f\u5728\u6ca1\u6709\u5927\u91cf\u4fee\u6539\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u3002</p> <p>\u7c7b\u7684\u6210\u5458\u6570\u636e\u901a\u5e38\u5bf9\u5916\u90e8\u4e16\u754c\u9690\u85cf\uff0c\u4f7f\u7528 <code>private</code> \u8bbf\u95ee\u63a7\u5236\u4fee\u9970\u7b26\u3002\u901a\u8fc7 <code>public</code> \u8bbf\u95ee\u5668\u51fd\u6570\u63d0\u4f9b\u5bf9\u79c1\u6709\u6570\u636e\u6210\u5458\u7684\u8bbf\u95ee\uff0c\u4f8b\u5982 <code>getRadius()</code> \u548c <code>getColor()</code> \u3002</p> <p>\u8fd9\u9075\u5faa\u4e86\u4fe1\u606f\u9690\u85cf\u7684\u539f\u5219\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u8c61\u4e4b\u95f4\u901a\u8fc7\u660e\u786e\u5b9a\u4e49\u7684\u63a5\u53e3\uff08\u516c\u5171\u51fd\u6570\uff09\u8fdb\u884c\u901a\u4fe1\u3002\u5bf9\u8c61\u4e0d\u5141\u8bb8\u4e86\u89e3\u5176\u4ed6\u5bf9\u8c61\u7684\u5b9e\u73b0\u7ec6\u8282\u3002\u5b9e\u73b0\u7ec6\u8282\u88ab\u9690\u85cf\u6216\u5c01\u88c5\u5728\u7c7b\u4e2d\u3002\u4fe1\u606f\u9690\u85cf\u6709\u52a9\u4e8e\u7c7b\u7684\u91cd\u7528\u3002</p> <p>\u7ecf\u9a8c\u6cd5\u5219\uff1a\u9664\u975e\u6709\u5145\u5206\u7406\u7531\uff0c\u5426\u5219\u4e0d\u8981\u5c06\u4efb\u4f55\u6570\u636e\u6210\u5458\u8bbe\u4e3a <code>public</code> \u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#213-getter-and-setters","title":"2.13 \u83b7\u53d6\u5668\u548c\u8bbe\u7f6e\u5668 Getter and Setters","text":"<p>\u4e3a\u4e86\u8ba9\u5176\u4ed6\u4eba\u80fd\u591f\u8bfb\u53d6 <code>private</code> \u6570\u636e\u6210\u5458\u7684\u503c\uff08\u79f0\u4e3a <code>xxx</code> \uff09\uff0c\u4f60\u5e94\u5f53\u63d0\u4f9b\u4e00\u4e2a\u540d\u4e3a <code>getXxx()</code> \u7684 get \u51fd\u6570\uff08\u6216 getter \u6216\u8bbf\u95ee\u5668\u51fd\u6570\uff09\u3002getter \u4e0d\u5fc5\u4ee5\u539f\u59cb\u683c\u5f0f\u66b4\u9732\u6570\u636e\u3002\u5b83\u53ef\u4ee5\u5904\u7406\u6570\u636e\u5e76\u9650\u5236\u5176\u4ed6\u4eba\u770b\u5230\u7684\u6570\u636e\u89c6\u56fe\u3002getter \u4e0d\u5e94\u4fee\u6539\u6570\u636e\u6210\u5458\u3002</p> <p>\u4e3a\u4e86\u5141\u8bb8\u5176\u4ed6\u7c7b\u4fee\u6539 <code>private</code> \u6570\u636e\u6210\u5458\u7684\u503c\uff0c\u5373 <code>xxx</code> \uff0c\u4f60\u5e94\u8be5\u63d0\u4f9b\u4e00\u4e2a\u540d\u4e3a <code>setXxx()</code> \u7684\u8bbe\u7f6e\u51fd\u6570\uff08\u6216 setter \u6216 mutator \u51fd\u6570\uff09\u3002setter \u53ef\u4ee5\u63d0\u4f9b\u6570\u636e\u9a8c\u8bc1\uff08\u4f8b\u5982\u8303\u56f4\u68c0\u67e5\uff09\uff0c\u5e76\u5c06\u539f\u59cb\u6570\u636e\u8f6c\u6362\u4e3a\u5185\u90e8\u8868\u793a\u5f62\u5f0f\u3002</p> <p>\u4f8b\u5982\uff0c\u5728\u6211\u4eec\u7684 <code>Circle</code> \u7c7b\u4e2d\uff0c\u6570\u636e\u6210\u5458 <code>radius</code> \u548c <code>color</code> \u88ab\u58f0\u660e\u4e3a <code>private</code> \u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u53ea\u80fd\u5728 <code>Circle</code> \u7c7b\u5185\u90e8\u4f7f\u7528\uff0c\u800c\u5728 <code>Circle</code> \u7c7b\u5916\u90e8\u4e0d\u53ef\u89c1\u2014\u2014\u5305\u62ec <code>main()</code> \u3002\u4f60\u65e0\u6cd5\u76f4\u63a5\u4ece <code>main()</code> \u8bbf\u95ee <code>private</code> \u6570\u636e\u6210\u5458 <code>radius</code> \u548c <code>color</code> \u2014\u2014\u901a\u8fc7 <code>c1.radius</code> \u6216 <code>c1.color</code> \u6240\u8bf4\u7684\u3002 <code>Circle</code> \u7c7b\u63d0\u4f9b\u4e86\u4e24\u4e2a\u516c\u5171\u8bbf\u95ee\u51fd\u6570\uff0c\u5373 <code>getRadius()</code> \u548c <code>getColor()</code> \u3002\u8fd9\u4e9b\u51fd\u6570\u88ab\u58f0\u660e\u4e3a <code>public</code> \u3002 <code>main()</code> \u53ef\u4ee5\u8c03\u7528\u8fd9\u4e9b\u516c\u5171\u8bbf\u95ee\u51fd\u6570\u6765\u83b7\u53d6 <code>Circle</code> \u5bf9\u8c61\u7684 <code>radius</code> \u548c <code>color</code> \uff0c\u901a\u8fc7 <code>c1.getRadius()</code> \u548c <code>c1.getColor()</code> \u6240\u8bf4\u7684\u3002</p> <p>\u6ca1\u6709\u529e\u6cd5\u5728 <code>main()</code> \u4e2d\u6784\u9020\u540e\u66f4\u6539 <code>Circle</code> \u5bf9\u8c61\u7684 <code>radius</code> \u6216 <code>color</code> \u3002\u4f60\u4e0d\u80fd\u53d1\u51fa\u50cf <code>c1.radius = 5.0</code> \u8fd9\u6837\u7684\u8bed\u53e5\u6765\u66f4\u6539\u5b9e\u4f8b <code>c1</code> \u7684 <code>radius</code> \uff0c\u56e0\u4e3a <code>radius</code> \u5728 <code>Circle</code> \u7c7b\u4e2d\u88ab\u58f0\u660e\u4e3a <code>private</code> \uff0c\u5e76\u4e14\u5bf9\u5305\u62ec <code>main()</code> \u5728\u5185\u7684\u5176\u4ed6\u5bf9\u8c61\u4e0d\u53ef\u89c1\u3002</p> <p>\u5982\u679c <code>Circle</code> \u7c7b\u7684\u8bbe\u8ba1\u8005\u5141\u8bb8\u5728 <code>Circle</code> \u5bf9\u8c61\u6784\u5efa\u540e\u66f4\u6539 <code>radius</code> \u548c <code>color</code> \uff0c\u4ed6\u5fc5\u987b\u63d0\u4f9b\u76f8\u5e94\u7684 setter\uff0c\u4f8b\u5982\uff1a</p> <pre><code>// Setter for color\nvoid setColor(string c) {\n   color = c;\n}\n\n// Setter for radius\nvoid setRadius(double r) {\n   radius = r;\n}\n</code></pre> <p>\u901a\u8fc7\u9002\u5f53\u5b9e\u73b0\u4fe1\u606f\u9690\u85cf\uff0c\u7c7b\u7684\u8bbe\u8ba1\u8005\u53ef\u4ee5\u5b8c\u5168\u63a7\u5236\u7c7b\u7684\u7528\u6237\u80fd\u505a\u4ec0\u4e48\u548c\u4e0d\u80fd\u505a\u4ec0\u4e48\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#214this","title":"2.14\u5173\u952e\u5b57<code>this</code>","text":"<p>\u53ef\u4ee5\u5728\u7c7b\u5b9a\u4e49\u4e2d\u7528<code>this</code>\u6765\u5f15\u7528\u8fd9\u4e2a\u5b9e\u4f8b</p> <p>\u5173\u952e\u5b57<code>this</code>\u7684\u4e3b\u8981\u7528\u9014\u4e4b\u4e00\u662f\u89e3\u51b3\u6570\u636e\u6210\u5458\u540d\u79f0\u548c\u51fd\u6570\u540d\u79f0\u4e4b\u95f4\u7684\u6b67\u4e49\u3002\u4f8b\u5982</p> <pre><code>class Circle {\nprivate:\n   double radius;                 // Member variable called \"radius\"\n   ......\npublic:\n   void setRadius(double radius) { // Function's argument also called \"radius\"\n      this-&gt;radius = radius;\n         // \"this.radius\" refers to this instance's member variable\n         // \"radius\" resolved to the function's argument.\n   }\n   ......\n}\n</code></pre> <p>\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c\u6709\u4e24\u4e2a\u6807\u8bc6\u7b26\u79f0\u4e3a <code>radius</code> - \u4e00\u4e2a\u662f\u6570\u636e\u6210\u5458\uff0c\u53e6\u4e00\u4e2a\u662f\u51fd\u6570\u53c2\u6570\u3002\u8fd9\u5bfc\u81f4\u4e86\u547d\u540d\u51b2\u7a81\u3002\u4e3a\u4e86\u89e3\u51b3\u547d\u540d\u51b2\u7a81\uff0c\u4f60\u53ef\u4ee5\u5c06\u51fd\u6570\u53c2\u6570\u547d\u540d\u4e3a <code>r</code> \u800c\u4e0d\u662f <code>radius</code> \u3002\u7136\u800c\uff0c\u5728\u6b64\u4e0a\u4e0b\u6587\u4e2d\uff0c <code>radius</code> \u66f4\u63a5\u8fd1\u4e14\u6709\u610f\u4e49\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u5173\u952e\u5b57 <code>this</code> \u6765\u89e3\u51b3\u8fd9\u4e2a\u547d\u540d\u51b2\u7a81\u3002\" <code>this-&gt;radius</code> \" \u6307\u7684\u662f\u6570\u636e\u6210\u5458\uff1b\u800c \" <code>radius</code> \" \u89e3\u6790\u4e3a\u51fd\u6570\u53c2\u6570\u3002</p> <p>\" <code>this</code> \" \u5b9e\u9645\u4e0a\u662f\u6307\u5411\u8fd9\u4e2a\u5bf9\u8c61\u7684\u6307\u9488\u3002\u6211\u7a0d\u540e\u4f1a\u89e3\u91ca\u6307\u9488\u548c \" <code>-&gt;</code> \" \u8fd0\u7b97\u7b26\u7684\u542b\u4e49\u3002</p> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u524d\u7f00\uff08\u4f8b\u5982 <code>m_</code> \uff09\u6216\u540e\u7f00\uff08\u4f8b\u5982 <code>_</code> \uff09\u6765\u547d\u540d\u6570\u636e\u6210\u5458\uff0c\u4ee5\u907f\u514d\u540d\u79f0\u51b2\u7a81\u3002\u4f8b\u5982\uff0c</p> <pre><code>class Circle {\nprivate:\n   double m_radius;  // or radius_\n   ......\npublic:\n   void setRadius(double radius) {\n      m_radius = radius;  // or radius_ = radius\n   }\n   ......\n}\n</code></pre> <p>C++ \u7f16\u8bd1\u5668\u5185\u90e8\u4f1a\u4ee5\u4e00\u4e2a\u524d\u5bfc\u4e0b\u5212\u7ebf\uff08 <code>e.g., _xxx</code> \uff09\u5f00\u59cb\u547d\u540d\u5176\u6570\u636e\u6210\u5458\uff0c\u5e76\u4ee5\u4e24\u4e2a\u524d\u5bfc\u4e0b\u5212\u7ebf\uff08\u4f8b\u5982\uff0c <code>__xxx</code> \uff09\u5f00\u59cb\u547d\u540d\u5c40\u90e8\u53d8\u91cf\u3002\u56e0\u6b64\uff0c\u5728\u4f60\u7684\u7a0b\u5e8f\u4e2d\u907f\u514d\u4f7f\u7528\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u79f0\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#215-const","title":"2.15 \"<code>const</code>\"\u6210\u5458\u51fd\u6570","text":"<p>\u4e00\u4e2a <code>const</code> \u6210\u5458\u51fd\u6570\uff0c\u7531\u6210\u5458\u51fd\u6570\u5934\u90e8\u7684 <code>const</code> \u5173\u952e\u5b57\u6807\u8bc6\uff0c\u4e0d\u80fd\u4fee\u6539\u6b64\u5bf9\u8c61\u7684\u4efb\u4f55\u6570\u636e\u6210\u5458\u3002\u4f8b\u5982\uff0c</p> <pre><code>double getRadius() const {  // const member function\n   radius = 0;  \n      // error: assignment of data-member 'Circle::radius' in read-only structure\n   return radius;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#216-getterssetters","title":"2.16 Getters/Setters\u548c\u6784\u9020\u51fd\u6570\u7684\u7ea6\u5b9a","text":"<p><code>Aaa</code> \u7c7b\u4e2d\u540d\u4e3a <code>xxx</code> \u7684 <code>private</code> \u6570\u636e\u6210\u5458\u7684\u6784\u9020\u51fd\u6570\u3001getter \u548c setter \u51fd\u6570\u5177\u6709\u4ee5\u4e0b\u7ea6\u5b9a\uff0c\u5176\u7c7b\u578b\u4e3a <code>T</code> \uff1a</p> <pre><code>class Aaa {\nprivate:\n   // A private variable named xxx of type T\n   T xxx;\npublic:\n   // Constructor\n   Aaa(T x) { xxx = x; }\n   // OR\n   Aaa(T xxx) { this-&gt;xxx = xxx; }\n   // OR using member initializer list (to be explained later)\n   Aaa(T xxx) : xxx(xxx) { }\n\n   // A getter for variable xxx of type T receives no argument and return a value of type T\n   T getXxx() const { return xxx; }\n\n   // A setter for variable xxx of type T receives a parameter of type T and return void\n   void setXxx(T x) { xxx = x; }\n   // OR\n   void setXxx(T xxx) { this-&gt;xxx = xxx; }\n}\n</code></pre> <p>\u5bf9\u4e8e <code>bool</code> \u53d8\u91cf <code>xxx</code> \uff0cgetter \u5e94\u547d\u540d\u4e3a <code>isXxx()</code> \uff0c\u800c\u4e0d\u662f <code>getXxx()</code> \uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>private:\n   // Private boolean variable\n   bool xxx;\npublic: \n   // Getter\n   bool isXxx() const { return xxx; }\n\n   // Setter\n   void setXxx(bool x) { xxx = x; }\n   // OR\n   void setXxx(bool xxx) { this-&gt;xxx = xxx; }\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#217","title":"2.17 \u9ed8\u8ba4\u6784\u9020\u51fd\u6570","text":"<p>\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u662f\u4e00\u4e2a\u6ca1\u6709\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\uff0c\u6216\u8005\u6240\u6709\u53c2\u6570\u90fd\u6709\u9ed8\u8ba4\u503c\u7684\u6784\u9020\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u4e0a\u9762\u7684<code>Circle</code>\u7684\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u6240\u6709\u53c2\u6570\u90fd\u6709\u9ed8\u8ba4\u503c\u3002</p> <pre><code>Circle c1;   // Declare c1 as an instance of Circle, and invoke the default constructor\nCircle c1(); // Error!\n             // (This declares c1 as a function that takes no parameter and returns a Circle instance)\n</code></pre> <p>\u5982\u679c\u662f C++\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u63d0\u4f9b\u4efb\u4f55\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c</p> <pre><code>ClassName::ClassName() { }  // Take no argument and do nothing\n</code></pre> <p>\u5982\u679c\u4f60\u5b9a\u4e49\u4e86\u4efb\u4f55\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1a\u63d0\u4f9b\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002\u5982\u679c\u4f60\u5b9a\u4e49\u7684\u6784\u9020\u51fd\u6570\u90fd\u9700\u8981\u53c2\u6570\uff0c\u90a3\u4e48\u8c03\u7528\u65e0\u53c2\u6570\u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002\u8fd9\u662f\u4e3a\u4e86\u5141\u8bb8\u8bbe\u8ba1\u8005\u901a\u8fc7\u4e0d\u63d0\u4f9b\u663e\u5f0f\u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u6765\u786e\u4fdd\u65e0\u6cd5\u521b\u5efa\u672a\u521d\u59cb\u5316\u7684\u5b9e\u4f8b\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#218","title":"2.18 \u6784\u9020\u51fd\u6570\u7684\u6210\u5458\u521d\u59cb\u5316\u5217\u8868","text":"<p>\u4e0d\u8981\u60f3\u4e0b\u9762\u8fd9\u6837\u5728\u6784\u9020\u51fd\u6570\u7684\u4e3b\u4f53\u5185\u521d\u59cb\u5316\u79c1\u6709\u6570\u636e\u6210\u5458\uff1a</p> <pre><code>Circle(double r = 1.0, string c = \"red\") {\n   radius = r;//error\n   color = c;//error\n}\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u7684\u66ff\u4ee3\u8bed\u6cd5\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>Circle(double r = 1.0, string c = \"red\") : radius(r), color(c) { }\n// \u6784\u9020\u51fd\u6570\u5934\u90e8  : \u521d\u59cb\u5316\u5217\u8868             { \u6784\u9020\u51fd\u6570\u4f53 }\nCircle(double r, string c) : radius(r), color(c) { /* \u51fd\u6570\u4f53\u53ef\u4ee5\u4e3a\u7a7a */ }\n</code></pre> <p>\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u653e\u5728\u6784\u9020\u51fd\u6570\u7684\u5934\u90e8\u4e4b\u540e\uff0c\u7528\u5192\u53f7\uff08 <code>:</code> \uff09\u5206\u9694\u3002\u6bcf\u4e2a\u521d\u59cb\u5316\u5668\u91c7\u7528 <code>data_member_name(parameter_name)</code> \u7684\u5f62\u5f0f\u3002\u5bf9\u4e8e\u57fa\u672c\u7c7b\u578b\uff0c\u5b83\u7b49\u540c\u4e8e <code>data_member_name = parameter_name</code> \u3002\u5bf9\u4e8e\u5bf9\u8c61\uff0c\u5c06\u8c03\u7528\u6784\u9020\u51fd\u6570\u6765\u6784\u5efa\u5bf9\u8c61\u3002\u6784\u9020\u51fd\u6570\u7684\u4e3b\u4f53\uff08\u5728\u6b64\u60c5\u51b5\u4e0b\u4e3a\u7a7a\uff09\u5c06\u5728\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u5b8c\u6210\u540e\u8fd0\u884c\u3002</p> <p>\u5efa\u8bae\u4f7f\u7528\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u6765\u521d\u59cb\u5316\u6240\u6709\u6570\u636e\u6210\u5458\uff0c\u56e0\u4e3a\u8fd9\u901a\u5e38\u6bd4\u5728\u6784\u9020\u51fd\u6570\u4f53\u5185\u8fdb\u884c\u8d4b\u503c\u66f4\u9ad8\u6548\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#219-destructor","title":"2.19 *Destructor \u6790\u6784\u51fd\u6570","text":"<p>\u6790\u6784\u51fd\u6570\u4e0e\u6784\u9020\u51fd\u6570\u7c7b\u4f3c\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u51fd\u6570\uff0c\u5176\u540d\u79f0\u4e0e\u7c7b\u540d\u76f8\u540c\uff0c\u5e26\u6709\u524d\u7f00 <code>~</code> \uff0c\u4f8b\u5982 <code>~Circle()</code> \u3002\u5f53\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\uff0c\u6790\u6784\u51fd\u6570\u4f1a\u88ab\u9690\u5f0f\u8c03\u7528\u3002</p> <ul> <li>\u662f\u4ec0\u4e48: \u4e00\u4e2a\u7279\u6b8a\u7684\u6210\u5458\u51fd\u6570\uff0c\u7528\u4e8e\u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\u6267\u884c\u6e05\u7406\u5de5\u4f5c\u3002</li> <li>\u547d\u540d: \u540d\u79f0\u4e0e\u7c7b\u540d\u76f8\u540c\uff0c\u4f46\u5728\u524d\u9762\u52a0\u4e00\u4e2a\u6ce2\u6d6a\u53f7 <code>~</code> (\u4f8b\u5982 <code>~Circle()</code>)\u3002</li> <li>\u7279\u6027: \u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u6ca1\u6709\u53c2\u6570\u3002</li> <li>\u8c03\u7528: \u5f53\u5bf9\u8c61\u751f\u547d\u5468\u671f\u7ed3\u675f\u65f6\uff08\u4f8b\u5982\uff0c\u51fd\u6570\u5185\u7684\u5c40\u90e8\u5bf9\u8c61\u79bb\u5f00\u5176\u4f5c\u7528\u57df\uff0c\u6216\u8005 <code>delete</code> \u4e00\u4e2a\u901a\u8fc7 <code>new</code> \u521b\u5efa\u7684\u5bf9\u8c61\u6307\u9488\u65f6\uff09\uff0c\u6790\u6784\u51fd\u6570\u4f1a\u88ab\u81ea\u52a8\u9690\u5f0f\u8c03\u7528\u3002</li> <li>\u9ed8\u8ba4\u6790\u6784\u51fd\u6570: \u5982\u679c\u4f60\u4e0d\u5b9a\u4e49\u6790\u6784\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u7684\uff0c\u5b83\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002</li> <li>\u4f55\u65f6\u9700\u8981\u81ea\u5b9a\u4e49: \u5f53\u4f60\u7684\u7c7b\u5728\u6784\u9020\u65f6\u52a8\u6001\u5206\u914d\u4e86\u8d44\u6e90\uff08\u6700\u5e38\u89c1\u7684\u662f\u4f7f\u7528 <code>new</code> \u6216 <code>new[]</code> \u5206\u914d\u7684\u5185\u5b58\uff09\uff0c\u4f60\u5fc5\u987b\u5728\u6790\u6784\u51fd\u6570\u4e2d\u4f7f\u7528 <code>delete</code> \u6216 <code>delete[]</code> \u6765\u91ca\u653e\u8fd9\u4e9b\u8d44\u6e90\uff0c\u5426\u5219\u4f1a\u53d1\u751f\u5185\u5b58\u6cc4\u6f0f\u3002</li> </ul> <p>\u5982\u679c\u4f60\u6ca1\u6709\u5b9a\u4e49\u6790\u6784\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u7684\u6790\u6784\u51fd\u6570\uff0c\u5b83\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002</p> <pre><code>class MyClass {\npublic:\n   // The default destructor that does nothing\n   ~MyClass() { }\n......\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#advanced-notes","title":"Advanced Notes \u9ad8\u7ea7\u7b14\u8bb0","text":"<ul> <li>If your class contains data member which is dynamically allocated (via <code>new</code> or <code>new[]</code> operator), you need to free the storage via <code>delete</code> or <code>delete[]</code>.   \u5982\u679c\u4f60\u7684\u7c7b\u5305\u542b\u901a\u8fc7 <code>new</code> \u6216 <code>new[]</code> \u8fd0\u7b97\u7b26\u52a8\u6001\u5206\u914d\u7684\u6570\u636e\u6210\u5458\uff0c\u4f60\u9700\u8981\u901a\u8fc7 <code>delete</code> \u6216 <code>delete[]</code> \u91ca\u653e\u5b58\u50a8\u7a7a\u95f4\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#220-copy-constructor","title":"2.20 *Copy Constructor \u62f7\u8d1d\u6784\u9020\u51fd\u6570","text":"<ul> <li> <p>\u662f\u4ec0\u4e48: \u4e00\u4e2a\u7279\u6b8a\u7684\u6784\u9020\u51fd\u6570\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u4f5c\u4e3a\u540c\u4e00\u7c7b\u578b\u7684\u53e6\u4e00\u4e2a\u73b0\u6709\u5bf9\u8c61\u7684\u526f\u672c\u3002</p> </li> <li> <p>\u7b7e\u540d (Signature): \u901a\u5e38\u5f62\u5f0f\u4e3a <code>ClassName(const ClassName&amp; other)</code>\u3002\u5b83\u63a5\u53d7\u4e00\u4e2a\u5bf9\u540c\u7c7b\u5bf9\u8c61\u7684 <code>const</code> \u5f15\u7528\u4f5c\u4e3a\u53c2\u6570\u3002</p> </li> <li> <p>\u4f55\u65f6\u8c03\u7528</p> </li> <li> <p>\u663e\u5f0f\u8c03\u7528: <code>ClassName obj2(obj1);</code> \u6216 <code>ClassName obj3 = obj1;</code> (\u6ce8\u610f <code>=</code> \u5728\u8fd9\u91cc\u662f\u521d\u59cb\u5316\uff0c\u4e0d\u662f\u8d4b\u503c)\u3002</p> </li> <li> <p>\u9690\u5f0f\u8c03\u7528</p> <ul> <li>\u5f53\u5bf9\u8c61\u6309\u503c\u4f20\u9012 (pass-by-value) \u7ed9\u51fd\u6570\u65f6\uff0c\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u521b\u5efa\u51fd\u6570\u53c2\u6570\u526f\u672c\u3002</li> <li>\u5f53\u51fd\u6570\u6309\u503c\u8fd4\u56de (return-by-value) \u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u53ef\u80fd\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08\u5c3d\u7ba1\u7f16\u8bd1\u5668\u4f18\u5316 RVO/NRVO \u53ef\u80fd\u907f\u514d\uff09\u3002</li> </ul> </li> <li> <p>\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570</p> </li> </ul> <p>\u5982\u679c\u4f60\u4e0d\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u7684\u3002</p> <ul> <li> <p>\u884c\u4e3a: \u5b83\u6267\u884c\u6210\u5458\u9010\u4e00\u62f7\u8d1d (memberwise copy)\uff0c\u7b80\u5355\u5730\u5c06\u6e90\u5bf9\u8c61\u7684\u6bcf\u4e2a\u6210\u5458\u7684\u503c\u590d\u5236\u5230\u65b0\u5bf9\u8c61\u7684\u5bf9\u5e94\u6210\u5458\u4e2d\u3002</p> </li> <li> <p>\u6d45\u62f7\u8d1d (Shallow Copy) \u95ee\u9898</p> </li> <li> <p>\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6267\u884c\u7684\u662f\u6d45\u62f7\u8d1d\u3002\u5982\u679c\u7c7b\u4e2d\u6709\u6307\u9488\u6210\u5458\u6307\u5411\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff0c\u6d45\u62f7\u8d1d\u53ea\u4f1a\u590d\u5236\u6307\u9488\u7684\u503c\uff08\u5185\u5b58\u5730\u5740\uff09\uff0c\u800c\u4e0d\u4f1a\u590d\u5236\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u5185\u5bb9\u3002</p> </li> <li> <p>\u540e\u679c: \u8fd9\u5bfc\u81f4\u539f\u5bf9\u8c61\u548c\u526f\u672c\u5bf9\u8c61\u7684\u6307\u9488\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\u3002\u5f53\u5176\u4e2d\u4e00\u4e2a\u5bf9\u8c61\u88ab\u9500\u6bc1\u5e76\u91ca\u653e\u8be5\u5185\u5b58\u65f6\uff0c\u53e6\u4e00\u4e2a\u5bf9\u8c61\u7684\u6307\u9488\u5c31\u53d8\u6210\u4e86\u60ac\u7a7a\u6307\u9488\u3002\u5982\u679c\u4e24\u4e2a\u5bf9\u8c61\u90fd\u8bd5\u56fe\u91ca\u653e\u540c\u4e00\u5757\u5185\u5b58\uff08\u6bd4\u5982\u5728\u6790\u6784\u51fd\u6570\u4e2d\uff09\uff0c\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff08double free\uff09\u3002\u4fee\u6539\u4e00\u4e2a\u5bf9\u8c61\u6307\u5411\u7684\u6570\u636e\u4e5f\u4f1a\u5f71\u54cd\u53e6\u4e00\u4e2a\u3002</p> </li> <li> <p>\u6df1\u62f7\u8d1d (Deep Copy): \u5f53\u7c7b\u7ba1\u7406\u52a8\u6001\u8d44\u6e90\uff08\u5982\u5185\u5b58\u6307\u9488\uff09\u65f6\uff0c\u901a\u5e38\u9700\u8981\u81ea\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u6267\u884c\u6df1\u62f7\u8d1d\uff1a\u4e3a\u65b0\u5bf9\u8c61\u5206\u914d\u65b0\u7684\u5185\u5b58\uff0c\u5e76\u5c06\u6e90\u5bf9\u8c61\u6307\u5411\u7684\u5185\u5b58\u5185\u5bb9\u590d\u5236\u8fc7\u6765\u3002</p> </li> <li> <p>\u6309\u5f15\u7528\u4f20\u9012 <code>const</code>: \u4e3a\u4e86\u907f\u514d\u6309\u503c\u4f20\u9012\u5bf9\u8c61\u65f6\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u7684\u5f00\u9500\u548c\u6f5c\u5728\u7684\u6d45\u62f7\u8d1d\u95ee\u9898\uff0c\u901a\u5e38\u63a8\u8350\u4f7f\u7528\u6309\u5e38\u91cf\u5f15\u7528\u4f20\u9012 (pass-by-reference-to-const)\uff0c\u5373 <code>void myFunction(const ClassName&amp; obj)</code>\u3002\u8fd9\u6837\u65e2\u9ad8\u6548\uff0c\u53c8\u4fdd\u8bc1\u51fd\u6570\u4e0d\u4f1a\u4fee\u6539\u4f20\u5165\u7684\u5bf9\u8c61\u3002</p> </li> </ul> <p>\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u901a\u8fc7\u590d\u5236\u540c\u4e00\u7c7b\u578b\u7684\u73b0\u6709\u5bf9\u8c61\u6765\u6784\u9020\u4e00\u4e2a\u65b0\u5bf9\u8c61\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u662f\u540c\u4e00\u7c7b\u7684\u5bf9\u8c61\u3002</p> <p>\u5982\u679c\u4f60\u6ca1\u6709\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u7684\u6784\u9020\u51fd\u6570\uff0c\u5b83\u4f1a\u590d\u5236\u7ed9\u5b9a\u5bf9\u8c61\u7684\u6240\u6709\u6570\u636e\u6210\u5458\u3002\u4f8b\u5982\uff0c</p> <pre><code>Circle c4(7.8, \"blue\");\ncout &lt;&lt; \"Radius=\" &lt;&lt; c4.getRadius() &lt;&lt; \" Area=\" &lt;&lt; c4.getArea()\n     &lt;&lt; \" Color=\" &lt;&lt; c4.getColor() &lt;&lt; endl;\n                // Radius=7.8 Area=191.135 Color=blue\n\n// Construct a new object by copying an existing object\n// via the so-called default copy constructor\nCircle c5(c4);\ncout &lt;&lt; \"Radius=\" &lt;&lt; c5.getRadius() &lt;&lt; \" Area=\" &lt;&lt; c5.getArea()\n     &lt;&lt; \" Color=\" &lt;&lt; c5.getColor() &lt;&lt; endl;\n                // Radius=7.8 Area=191.135 Color=blue\n</code></pre> <p>\u590d\u5236\u6784\u9020\u51fd\u6570\u5c24\u4e3a\u91cd\u8981\u3002\u5f53\u4e00\u4e2a\u5bf9\u8c61\u4ee5\u503c\u7684\u65b9\u5f0f\u4f20\u9012\u7ed9\u51fd\u6570\u65f6\uff0c\u590d\u5236\u6784\u9020\u51fd\u6570\u5c06\u88ab\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u53c2\u6570\u7684\u514b\u9686\u526f\u672c\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#advanced-notes_1","title":"Advanced Notes \u9ad8\u7ea7\u7b14\u8bb0","text":"<ul> <li> <p>Pass-by-value for object means calling the copy constructor. To avoid the overhead of creating a clone copy, it is usually better to pass-by-reference-to-<code>const</code>, which will not have side effect on modifying the caller's object.   \u5bf9\u8c61\u7684\u6309\u503c\u4f20\u9012\u610f\u5473\u7740\u8c03\u7528\u590d\u5236\u6784\u9020\u51fd\u6570\u3002\u4e3a\u4e86\u907f\u514d\u521b\u5efa\u514b\u9686\u526f\u672c\u7684\u5f00\u9500\uff0c\u901a\u5e38\u6700\u597d\u4f7f\u7528\u6309\u5f15\u7528\u4f20\u9012\u5230 <code>const</code> \uff0c\u8fd9\u6837\u4e0d\u4f1a\u5bf9\u4fee\u6539\u8c03\u7528\u8005\u7684\u5bf9\u8c61\u4ea7\u751f\u526f\u4f5c\u7528\u3002</p> </li> <li> <p>The copy constructor has the following signature:</p> </li> </ul> <p>\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u5177\u6709\u4ee5\u4e0b\u7b7e\u540d\uff1a</p> <pre><code>class MyClass {\nprivate:\n   T1 member1;\n   T2 member2;\npublic:\n   // The default copy constructor which constructs an object via memberwise copy\n   MyClass(const MyClass &amp; rhs) {\n      member1 = rhs.member1;\n      member2 = rhs.member2;\n   }\n......\n}\n</code></pre> <ul> <li>The default copy constructor performs shadow copy. It does not copy the dynamically allocated data members created via <code>new</code> or <code>new[]</code> operator.   \u9ed8\u8ba4\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6267\u884c\u6d45\u62f7\u8d1d\u3002\u5b83\u4e0d\u4f1a\u62f7\u8d1d\u901a\u8fc7 <code>new</code> \u6216 <code>new[]</code> \u8fd0\u7b97\u7b26\u521b\u5efa\u7684\u52a8\u6001\u5206\u914d\u7684\u6570\u636e\u6210\u5458\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#221-copy-assiginment-operator","title":"2.21 *Copy Assiginment Operator ( = ) \u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26","text":"<p>\u7f16\u8bd1\u5668\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26 ( <code>=</code> )\uff0c\u53ef\u7528\u4e8e\u901a\u8fc7\u9010\u6210\u5458\u590d\u5236\u5c06\u4e00\u4e2a\u5bf9\u8c61\u8d4b\u503c\u7ed9\u540c\u4e00\u7c7b\u7684\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u4f7f\u7528\u4e4b\u524d\u5b9a\u4e49\u7684 <code>Circle</code> \u7c7b\uff0c</p> <pre><code>Circle c6(5.6, \"orange\"), c7;\ncout &lt;&lt; \"Radius=\" &lt;&lt; c6.getRadius() &lt;&lt; \" Area=\" &lt;&lt; c6.getArea()\n     &lt;&lt; \" Color=\" &lt;&lt; c6.getColor() &lt;&lt; endl;\n                // Radius=5.6 Area=98.5206 Color=orange\ncout &lt;&lt; \"Radius=\" &lt;&lt; c7.getRadius() &lt;&lt; \" Area=\" &lt;&lt; c7.getArea()\n     &lt;&lt; \" Color=\" &lt;&lt; c7.getColor() &lt;&lt; endl;\n                // Radius=1 Area=3.1416 Color=red (default constructor)\n\nc7 = c6; // memberwise copy assignment\ncout &lt;&lt; \"Radius=\" &lt;&lt; c7.getRadius() &lt;&lt; \" Area=\" &lt;&lt; c7.getArea()\n     &lt;&lt; \" Color=\" &lt;&lt; c7.getColor() &lt;&lt; endl;\n                // Radius=5.6 Area=98.5206 Color=orange\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#advanced-notes_2","title":"Advanced Notes \u9ad8\u7ea7\u7b14\u8bb0","text":"<ul> <li> <p>You could overload the assignment operator to override the default.   \u4f60\u53ef\u4ee5\u91cd\u8f7d\u8d4b\u503c\u8fd0\u7b97\u7b26\u6765\u8986\u76d6\u9ed8\u8ba4\u8bbe\u7f6e\u3002</p> </li> <li> <p>The copy constructor, instead of copy assignment operator, is used in declaration:</p> </li> </ul> <p>\u5728\u58f0\u660e\u4e2d\u4f7f\u7528\u4e86\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\uff1a</p> <pre><code>Circle c8 = c6;  // Invoke the copy constructor, NOT copy assignment operator\n                 // Same as Circle c8(c6)\n</code></pre> <ul> <li> <p>The default copy assignment operator performs shadow copy. It does not copy the dynamically allocated data members created via <code>new</code> or <code>new[]</code> operator.   \u9ed8\u8ba4\u7684\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u6267\u884c\u6d45\u62f7\u8d1d\u3002\u5b83\u4e0d\u4f1a\u590d\u5236\u901a\u8fc7 <code>new</code> \u6216 <code>new[]</code> \u8fd0\u7b97\u7b26\u521b\u5efa\u7684\u52a8\u6001\u5206\u914d\u7684\u6570\u636e\u6210\u5458\u3002</p> </li> <li> <p>The copy assignment operator has the following signature:</p> </li> </ul> <p>\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u5177\u6709\u4ee5\u4e0b\u7b7e\u540d\uff1a</p> <pre><code>class MyClass {\nprivate:\n   T1 member1;\n   T2 member2;\npublic:\n   // The default copy assignment operator which assigns an object via memberwise copy\n   MyClass &amp; operator=(const MyClass &amp; rhs) {\n      member1 = rhs.member1;\n      member2 = rhs.member2;\n      return *this;\n   }\n......\n}\n</code></pre> <ul> <li> <p>The copy assignment operator differs from the copy constructor in that it must release the dynamically allocated contents of the target and prevent self assignment. The assignment operator shall return a reference of this object to allow chaining operation (such as <code>x = y = z</code>).   \u590d\u5236\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e0e\u590d\u5236\u6784\u9020\u51fd\u6570\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u5fc5\u987b\u91ca\u653e\u76ee\u6807\u7684\u52a8\u6001\u5206\u914d\u5185\u5bb9\u5e76\u9632\u6b62\u81ea\u8d4b\u503c\u3002\u8d4b\u503c\u8fd0\u7b97\u7b26\u5e94\u8fd4\u56de\u6b64\u5bf9\u8c61\u7684\u5f15\u7528\u4ee5\u5141\u8bb8\u94fe\u5f0f\u64cd\u4f5c\uff08\u4f8b\u5982 <code>x = y = z</code> \uff09\u3002</p> </li> <li> <p>The default constructor, default destructor, default copy constructor, default copy assignment operators are known as special member functions, in which the compiler will automatically generate a copy if they are used in the program and not explicitly defined.   \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3001\u9ed8\u8ba4\u6790\u6784\u51fd\u6570\u3001\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3001\u9ed8\u8ba4\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u88ab\u79f0\u4e3a\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff0c\u5982\u679c\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u4e14\u672a\u660e\u786e\u5b9a\u4e49\uff0c\u7f16\u8bd1\u5668\u5c06\u81ea\u52a8\u751f\u6210\u526f\u672c\u3002</p> </li> </ul>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#3","title":"3.\u5206\u79bb\u5934\u6587\u4ef6\u5b9e\u73b0","text":"<p>\u4e3a\u4e86\u66f4\u597d\u7684\u8f6f\u4ef6\u5de5\u7a0b\uff0c\u5efa\u8bae\u5c06\u7c7b\u58f0\u660e\u548c\u5b9e\u73b0\u5206\u522b\u4fdd\u5b58\u5728\u4e24\u4e2a\u72ec\u7acb\u7684\u6587\u4ef6\u4e2d\uff1a\u58f0\u660e\u653e\u5728\u5934\u6587\u4ef6\u201c <code>.h</code> \u201d\u4e2d\uff1b\u800c\u5b9e\u73b0\u5728\u201c <code>.cpp</code> \u201d\u4e2d\u3002\u8fd9\u88ab\u79f0\u4e3a\u5206\u79bb\u516c\u5171\u63a5\u53e3\uff08\u5934\u6587\u4ef6\u58f0\u660e\uff09\u548c\u5b9e\u73b0\u3002\u63a5\u53e3\u7531\u8bbe\u8ba1\u8005\u5b9a\u4e49\uff0c\u5b9e\u73b0\u53ef\u4ee5\u7531\u5176\u4ed6\u4eba\u63d0\u4f9b\u3002\u867d\u7136\u63a5\u53e3\u662f\u56fa\u5b9a\u7684\uff0c\u4f46\u4e0d\u540c\u4f9b\u5e94\u5546\u53ef\u4ee5\u63d0\u4f9b\u4e0d\u540c\u7684\u5b9e\u73b0\u3002\u6b64\u5916\uff0c\u53ea\u6709\u5934\u6587\u4ef6\u4f1a\u66b4\u9732\u7ed9\u7528\u6237\uff0c\u5b9e\u73b0\u53ef\u4ee5\u4ee5\u5bf9\u8c61\u6587\u4ef6\u201c <code>.o</code> \u201d\uff08\u6216\u5e93\uff09\u7684\u5f62\u5f0f\u63d0\u4f9b\u3002\u6e90\u4ee3\u7801\u65e0\u9700\u63d0\u4f9b\u7ed9\u7528\u6237\u3002</p> <p>\u6838\u5fc3\u601d\u60f3\uff1a</p> <ul> <li>\u58f0\u660e (Interface - \u63a5\u53e3):\u653e\u5728\u5934\u6587\u4ef6 (<code>.h</code> \u6216 <code>.hpp</code>)\u4e2d\u3002\u5b83\u544a\u8bc9\u4f7f\u7528\u8005\u8fd9\u4e2a\u7c7b\u201c\u957f\u4ec0\u4e48\u6837\u201d\u4ee5\u53ca\u201c\u80fd\u505a\u4ec0\u4e48\u201d\u3002\u8fd9\u5305\u62ec\uff1a</li> <li>\u7c7b\u7684\u5b9a\u4e49\u6846\u67b6 (<code>class ClassName { ... };</code>)\u3002</li> <li>\u6570\u636e\u6210\u5458\u7684\u58f0\u660e\u3002</li> <li>\u6210\u5458\u51fd\u6570\u7684\u58f0\u660e\uff08\u51fd\u6570\u539f\u578b\uff0c\u53ea\u6709\u51fd\u6570\u540d\u3001\u53c2\u6570\u5217\u8868\u3001\u8fd4\u56de\u7c7b\u578b\uff0c\u6ca1\u6709\u51fd\u6570\u4f53 <code>{}</code>\uff09\u3002</li> <li>\u5b9e\u73b0 (Implementation - \u5b9e\u73b0):\u653e\u5728\u6e90\u6587\u4ef6 (<code>.cpp</code>)\u4e2d\u3002\u5b83\u5177\u4f53\u8bf4\u660e\u7c7b\u7684\u6210\u5458\u51fd\u6570\u201c\u5982\u4f55\u5de5\u4f5c\u201d\u3002\u8fd9\u5305\u62ec\uff1a</li> <li>\u6210\u5458\u51fd\u6570\u7684\u5b9a\u4e49\uff08\u5305\u542b\u51fd\u6570\u4f53 <code>{}</code> \u7684\u5b8c\u6574\u4ee3\u7801\uff09\u3002</li> </ul> <p>\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\uff08\u597d\u5904\uff09\uff1f</p> <ol> <li>\u63a5\u53e3\u4e0e\u5b9e\u73b0\u5206\u79bb (Separation of Interface and Implementation):</li> <li>\u7528\u6237\uff08\u5176\u4ed6\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u7684\u4ee3\u7801\uff09\u53ea\u9700\u8981\u5173\u5fc3\u63a5\u53e3\uff08\u5934\u6587\u4ef6 <code>.h</code>\uff09\uff0c\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u5373\u53ef\u3002</li> <li>\u7c7b\u7684\u5185\u90e8\u5b9e\u73b0\uff08\u6e90\u6587\u4ef6 <code>.cpp</code>\uff09\u53ef\u4ee5\u72ec\u7acb\u4fee\u6539\uff0c\u53ea\u8981\u4e0d\u6539\u53d8\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u7684\u516c\u5171\u63a5\u53e3\uff0c\u5c31\u4e0d\u4f1a\u5f71\u54cd\u5230\u4f7f\u7528\u8be5\u7c7b\u7684\u5176\u4ed6\u4ee3\u7801\u3002\u8fd9\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u6a21\u5757\u5316\u548c\u7075\u6d3b\u6027\u3002</li> <li>\u4fe1\u606f\u9690\u85cf (Information Hiding):</li> <li>\u53ef\u4ee5\u5c06\u5b9e\u73b0\u7ec6\u8282\u9690\u85cf\u5728 <code>.cpp</code> \u6587\u4ef6\u4e2d\u3002\u5982\u679c\u53d1\u5e03\u5e93\uff0c\u53ef\u4ee5\u53ea\u63d0\u4f9b\u5934\u6587\u4ef6\u548c\u7f16\u8bd1\u597d\u7684\u76ee\u6807\u6587\u4ef6 (<code>.o</code> \u6216\u5e93\u6587\u4ef6 <code>.lib</code>, <code>.a</code>, <code>.dll</code>, <code>.so</code>)\uff0c\u800c\u4e0d\u9700\u8981\u63d0\u4f9b\u5b9e\u73b0\u90e8\u5206\u7684\u6e90\u4ee3\u7801\uff0c\u4fdd\u62a4\u77e5\u8bc6\u4ea7\u6743\u3002</li> <li>\u63d0\u9ad8\u7f16\u8bd1\u6548\u7387 (Improved Compilation Speed):</li> <li>\u5f53 <code>.cpp</code> \u6587\u4ef6\u4e2d\u7684\u5b9e\u73b0\u4ee3\u7801\u88ab\u4fee\u6539\u65f6\uff0c\u53ea\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u8fd9\u4e2a <code>.cpp</code> \u6587\u4ef6\u5373\u53ef\u3002</li> <li>\u5982\u679c\u6240\u6709\u5b9e\u73b0\u90fd\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u90a3\u4e48\u4efb\u4f55\u5305\u542b\u4e86\u8be5\u5934\u6587\u4ef6\u7684 <code>.cpp</code> \u6587\u4ef6\uff0c\u5728\u5934\u6587\u4ef6\u6709\u4efb\u4f55\uff08\u5373\u4f7f\u662f\u5b9e\u73b0\u90e8\u5206\u7684\uff09\u6539\u52a8\u65f6\uff0c\u90fd\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\uff0c\u8fd9\u5728\u5927\u578b\u9879\u76ee\u4e2d\u4f1a\u5927\u5927\u589e\u52a0\u7f16\u8bd1\u65f6\u95f4\u3002</li> <li>\u4fbf\u4e8e\u56e2\u961f\u534f\u4f5c (Easier Teamwork):</li> <li>\u56e2\u961f\u6210\u5458\u53ef\u4ee5\u6839\u636e\u5b9a\u4e49\u597d\u7684\u5934\u6587\u4ef6\u63a5\u53e3\uff0c\u5e76\u884c\u5730\u53bb\u5b9e\u73b0\u4e0d\u540c\u7c7b\u7684 <code>.cpp</code> \u6587\u4ef6\u3002</li> </ol> <p>\u4f8b\u5b50\u4e0e\u8bb2\u89e3\uff1a</p> <p>\u6211\u4eec\u7528\u4e4b\u524d\u7684 <code>Circle</code> \u7c7b\u6765\u6f14\u793a\uff1a</p> <p>\u7b2c 1 \u6b65\uff1a\u521b\u5efa\u5934\u6587\u4ef6 <code>Circle.h</code></p> <p>C++</p> <pre><code>// Circle.h - Header file for the Circle class\n\n#ifndef CIRCLE_H   // Header Guard - \u9632\u6b62\u5934\u6587\u4ef6\u88ab\u91cd\u590d\u5305\u542b\n#define CIRCLE_H\n\n#include &lt;string&gt; // \u9700\u8981\u7528\u5230 std::string\n\nclass Circle {\nprivate: // \u6570\u636e\u6210\u5458\u58f0\u660e\n    double radius;\n    std::string color;\n\npublic: // \u516c\u5171\u6210\u5458\u51fd\u6570\u58f0\u660e (\u53ea\u6709\u539f\u578b\uff0c\u6ca1\u6709\u51fd\u6570\u4f53)\n    // Constructor declaration\n    Circle(double r = 1.0, std::string c = \"red\");\n\n    // Getter declarations (const because they don't modify the object)\n    double getRadius() const;\n    std::string getColor() const;\n    double getArea() const;\n\n    // Setter declarations\n    void setRadius(double r);\n    void setColor(std::string c);\n\n    // Destructor declaration (optional if simple, but good practice)\n    ~Circle();\n};\n\n#endif // CIRCLE_H\n</code></pre> <ul> <li><code>#ifndef CIRCLE_H ... #endif</code>: \u8fd9\u662f\u5934\u6587\u4ef6\u4fdd\u62a4\u7b26 (Header Guard)\u3002\u5b83\u786e\u4fdd\u5373\u4f7f\u8fd9\u4e2a\u5934\u6587\u4ef6\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u88ab\u591a\u6b21 <code>#include</code>\uff08\u76f4\u63a5\u6216\u95f4\u63a5\uff09\uff0c\u5176\u5185\u5bb9\u4e5f\u53ea\u4f1a\u88ab\u5904\u7406\u4e00\u6b21\uff0c\u9632\u6b62\u91cd\u590d\u5b9a\u4e49\u9519\u8bef\u3002</li> <li><code>#include &lt;string&gt;</code>: \u56e0\u4e3a\u7c7b\u4e2d\u7528\u5230\u4e86 <code>std::string</code>\uff0c\u6240\u4ee5\u9700\u8981\u5305\u542b\u76f8\u5e94\u7684\u6807\u51c6\u5e93\u5934\u6587\u4ef6\u3002</li> <li>\u7c7b\u5b9a\u4e49: \u5305\u542b\u4e86 <code>private</code> \u6570\u636e\u6210\u5458 <code>radius</code> \u548c <code>color</code> \u7684\u58f0\u660e\u3002</li> <li>\u51fd\u6570\u58f0\u660e: \u5305\u542b\u4e86\u6240\u6709 <code>public</code> \u6210\u5458\u51fd\u6570\uff08\u6784\u9020\u51fd\u6570\u3001Getters\u3001Setters\u3001<code>getArea</code>\u3001\u6790\u6784\u51fd\u6570\uff09\u7684\u58f0\u660e\u3002\u6ce8\u610f\uff0c\u8fd9\u4e9b\u58f0\u660e\u540e\u9762\u662f\u5206\u53f7 <code>;</code>\uff0c\u6ca1\u6709 <code>{}</code> \u51fd\u6570\u4f53\u3002<code>const</code> \u6210\u5458\u51fd\u6570\u5728\u8fd9\u91cc\u4e5f\u8981\u6807\u8bb0 <code>const</code>\u3002</li> </ul> <p>\u7b2c 2 \u6b65\uff1a\u521b\u5efa\u6e90\u6587\u4ef6 <code>Circle.cpp</code></p> <pre><code>// Circle.cpp - Implementation file for the Circle class\n\n#include \"Circle.h\" // \u5fc5\u987b\u5305\u542b\u5bf9\u5e94\u7684\u5934\u6587\u4ef6\uff0c\u4ee5\u83b7\u53d6\u7c7b\u7684\u58f0\u660e\n#include &lt;iostream&gt; // \u4f8b\u5b50\uff1a\u53ef\u80fd\u5728\u6790\u6784\u51fd\u6570\u7b49\u5730\u65b9\u7528\u5230\u8f93\u51fa\n#include &lt;cmath&gt;    // \u9700\u8981 M_PI (\u6216\u8005\u81ea\u5df1\u5b9a\u4e49 PI) \u6765\u8ba1\u7b97\u9762\u79ef\n\n// Constructor definition\n// \u6ce8\u610f\uff1a\u4f7f\u7528\u4f5c\u7528\u57df\u89e3\u6790\u8fd0\u7b97\u7b26 Circle:: \u6765\u6307\u660e\u8fd9\u662f Circle \u7c7b\u7684\u6210\u5458\nCircle::Circle(double r, std::string c) : radius(r), color(c) {\n    // \u6784\u9020\u51fd\u6570\u4f53\uff0c\u8fd9\u91cc\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u521d\u59cb\u5316\u5df2\u5728\u521d\u59cb\u5316\u5217\u8868\u4e2d\u5b8c\u6210\n    std::cout &lt;&lt; \"Circle object created - Radius: \" &lt;&lt; radius &lt;&lt; \", Color: \" &lt;&lt; color &lt;&lt; std::endl;\n}\n\n// Getter definitions\ndouble Circle::getRadius() const {\n    return radius;\n}\n\nstd::string Circle::getColor() const {\n    return color;\n}\n\ndouble Circle::getArea() const {\n    // M_PI \u901a\u5e38\u5728 &lt;cmath&gt; \u6216 &lt;math.h&gt; \u4e2d\u5b9a\u4e49\uff0c\u6216\u8005\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49 const double PI = 3.14159;\n    #ifndef M_PI\n    const double M_PI = 3.14159265358979323846;\n    #endif\n    return radius * radius * M_PI;\n}\n\n// Setter definitions\nvoid Circle::setRadius(double r) {\n    // \u53ef\u4ee5\u52a0\u5165\u9a8c\u8bc1\u903b\u8f91\n    if (r &gt;= 0) {\n        radius = r;\n    } else {\n        std::cerr &lt;&lt; \"Error: Radius cannot be negative.\" &lt;&lt; std::endl;\n    }\n}\n\nvoid Circle::setColor(std::string c) {\n    // \u53ef\u4ee5\u52a0\u5165\u9a8c\u8bc1\u903b\u8f91\n    color = c;\n}\n\n// Destructor definition\nCircle::~Circle() {\n    // \u5728\u8fd9\u91cc\u6267\u884c\u6e05\u7406\u5de5\u4f5c\uff0c\u4f8b\u5982\u91ca\u653e\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\n    // \u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u4e2d\u4e0d\u9700\u8981\u505a\u4ec0\u4e48\n    std::cout &lt;&lt; \"Circle object destroyed - Radius: \" &lt;&lt; radius &lt;&lt; \", Color: \" &lt;&lt; color &lt;&lt; std::endl;\n}\n</code></pre> <ul> <li><code>#include \"Circle.h\"</code>: \u5fc5\u987b\u9996\u5148\u5305\u542b\u5bf9\u5e94\u7684\u5934\u6587\u4ef6 <code>Circle.h</code>\u3002\u6ce8\u610f\u8fd9\u91cc\u7528\u7684\u662f\u53cc\u5f15\u53f7 <code>\"\"</code>\uff0c\u901a\u5e38\u8868\u793a\u5305\u542b\u9879\u76ee\u5185\u7684\u672c\u5730\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u5c16\u62ec\u53f7 <code>&lt;&gt;</code>\uff08\u7528\u4e8e\u6807\u51c6\u5e93\u6216\u7cfb\u7edf\u5e93\uff09\u3002</li> <li>\u4f5c\u7528\u57df\u89e3\u6790\u8fd0\u7b97\u7b26 <code>::</code>: \u5728\u5b9a\u4e49\u7c7b\u7684\u6210\u5458\u51fd\u6570\u65f6\uff0c\u5fc5\u987b\u5728\u51fd\u6570\u540d\u524d\u52a0\u4e0a <code>\u7c7b\u540d::</code> (\u4f8b\u5982 <code>Circle::getRadius</code>)\uff0c\u4ee5\u544a\u8bc9\u7f16\u8bd1\u5668\u8fd9\u4e2a\u51fd\u6570\u662f\u5c5e\u4e8e <code>Circle</code> \u7c7b\u7684\u3002</li> <li>\u51fd\u6570\u4f53: \u8fd9\u91cc\u63d0\u4f9b\u4e86\u5728 <code>Circle.h</code> \u4e2d\u58f0\u660e\u7684\u6240\u6709\u51fd\u6570\u7684\u5b8c\u6574\u5b9e\u73b0\uff08\u5e26\u6709 <code>{}</code> \u51fd\u6570\u4f53\uff09\u3002</li> </ul> <p>\u7b2c 3 \u6b65\uff1a\u5728\u5176\u4ed6\u5730\u65b9\u4f7f\u7528 <code>Circle</code> \u7c7b (\u4f8b\u5982 <code>main.cpp</code>)</p> <pre><code>// main.cpp - Example usage of the Circle class\n\n#include \"Circle.h\" // \u53ea\u9700\u8981\u5305\u542b\u5934\u6587\u4ef6\u5373\u53ef\n#include &lt;iostream&gt;\n\nint main() {\n    // \u521b\u5efa Circle \u5bf9\u8c61\uff0c\u8c03\u7528\u6784\u9020\u51fd\u6570\n    Circle c1(2.5, \"blue\");\n    Circle c2; // \u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u8c03\u7528\u6784\u9020\u51fd\u6570 (radius=1.0, color=\"red\")\n\n    // \u4f7f\u7528 public getter \u65b9\u6cd5\n    std::cout &lt;&lt; \"Circle 1 - Radius: \" &lt;&lt; c1.getRadius() &lt;&lt; \", Color: \" &lt;&lt; c1.getColor() &lt;&lt; \", Area: \" &lt;&lt; c1.getArea() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Circle 2 - Radius: \" &lt;&lt; c2.getRadius() &lt;&lt; \", Color: \" &lt;&lt; c2.getColor() &lt;&lt; \", Area: \" &lt;&lt; c2.getArea() &lt;&lt; std::endl;\n\n    // \u4f7f\u7528 public setter \u65b9\u6cd5\n    c1.setRadius(3.0);\n    c1.setColor(\"yellow\");\n    std::cout &lt;&lt; \"Circle 1 (modified) - Radius: \" &lt;&lt; c1.getRadius() &lt;&lt; \", Color: \" &lt;&lt; c1.getColor() &lt;&lt; \", Area: \" &lt;&lt; c1.getArea() &lt;&lt; std::endl;\n\n    // \u5bf9\u8c61 c1 \u548c c2 \u5728 main \u51fd\u6570\u7ed3\u675f\u65f6\u4f1a\u81ea\u52a8\u9500\u6bc1\uff0c\u8c03\u7528\u6790\u6784\u51fd\u6570\n    return 0;\n}\n</code></pre> <ul> <li> <p><code>#include \"Circle.h\"</code>: <code>main.cpp</code> \u53ea\u9700\u8981\u5305\u542b <code>Circle.h</code> \u5934\u6587\u4ef6\u3002\u5b83\u4e0d\u9700\u8981\u77e5\u9053 <code>Circle.cpp</code> \u4e2d\u7684\u5b9e\u73b0\u7ec6\u8282\uff0c\u53ea\u9700\u8981\u77e5\u9053 <code>Circle</code> \u7c7b\u7684\u63a5\u53e3\uff08\u6709\u54ea\u4e9b\u516c\u6709\u6210\u5458\u548c\u51fd\u6570\uff09\u3002</p> </li> <li> <p>\u7f16\u8bd1\u548c\u94fe\u63a5</p> </li> </ul> <p>:</p> <ol> <li>\u7f16\u8bd1\u5668\u4f1a\u5206\u522b\u7f16\u8bd1 <code>Circle.cpp</code> \u751f\u6210 <code>Circle.o</code> (\u76ee\u6807\u6587\u4ef6)\u3002</li> <li>\u7f16\u8bd1\u5668\u4f1a\u7f16\u8bd1 <code>main.cpp</code> \u751f\u6210 <code>main.o</code> (\u76ee\u6807\u6587\u4ef6)\u3002<code>main.o</code> \u77e5\u9053\u8981\u8c03\u7528 <code>Circle</code> \u7684\u51fd\u6570\uff0c\u4f46\u4e0d\u77e5\u9053\u5b83\u4eec\u7684\u5177\u4f53\u5b9e\u73b0\u5728\u54ea\u91cc\u3002</li> <li>\u94fe\u63a5\u5668 (Linker) \u4f1a\u5c06 <code>Circle.o</code> \u548c <code>main.o</code> (\u4ee5\u53ca\u5176\u4ed6\u9700\u8981\u7684\u5e93) \u8fde\u63a5\u8d77\u6765\uff0c\u751f\u6210\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u94fe\u63a5\u5668\u8d1f\u8d23\u627e\u5230 <code>main.o</code> \u4e2d\u8c03\u7528\u7684 <code>Circle</code> \u51fd\u6570\u5728 <code>Circle.o</code> \u4e2d\u7684\u5177\u4f53\u5b9e\u73b0\u5730\u5740\u3002</li> </ol>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#4-circle","title":"4 \u793a\u4f8b\uff1a<code>Circle</code>\u7c7b","text":"<p>\u4e0d\u8981\u5c06\u6240\u6709\u4ee3\u7801\u653e\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u3002\u6211\u4eec\u5e94\u8be5\u901a\u8fc7\u5c06\u4ee3\u7801\u653e\u5728 3 \u4e2a\u6587\u4ef6\u4e2d\u6765\u201c\u5206\u79bb\u63a5\u53e3\u548c\u5b9e\u73b0\u201d\u3002</p> <ul> <li><code>Circle.h</code> : \u5b9a\u4e49\u4e86 <code>Circle</code> \u7c7b\u7684\u516c\u5171\u63a5\u53e3\u3002</li> <li><code>Circle.cpp</code> : \u63d0\u4f9b\u4e86 <code>Circle</code> \u7c7b\u7684\u5b9e\u73b0\u3002</li> <li><code>TestCircle.cpp</code> : <code>Circle</code> \u7c7b\u7684\u6d4b\u8bd5\u9a71\u52a8\u7a0b\u5e8f\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#circleh-","title":"Circle.h - \u5934\u6587\u4ef6","text":"<pre><code>#include &lt;string&gt;   // using string\nusing namespace std;\n\n// Circle class declaration\nclass Circle {\nprivate:   // Accessible by members of this class only\n   // private data members (variables)\n   double radius;\n   string color;\n\npublic:    // Accessible by ALL\n   // Declare prototype of member functions\n   // Constructor with default values\n   Circle(double radius = 1.0, string color = \"red\");\n\n   // Public getters &amp; setters for private data members\n   double getRadius() const;\n   void setRadius(double radius);\n   string getColor() const;\n   void setColor(string color);\n\n   // Public member Function\n   double getArea() const;\n};\n</code></pre> <p>\u5934\u6587\u4ef6\u5305\u542b\u58f0\u660e\u8bed\u53e5\uff0c\u544a\u8bc9\u7f16\u8bd1\u5668\u6709\u5173\u540d\u79f0\u548c\u7c7b\u578b\u7684\u4fe1\u606f\uff0c\u4ee5\u53ca\u51fd\u6570\u539f\u578b\uff0c\u4f46\u4e0d\u5305\u542b\u5b9e\u73b0\u7ec6\u8282\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u5934\u4e2d\u4e3a\u51fd\u6570\u53c2\u6570\u63d0\u4f9b\u9ed8\u8ba4\u503c\u3002\u4f8b\u5982\uff0c</p> <pre><code>Circle(double radius = 1.0, string color = \"red\");\n</code></pre> <p>Header \u5305\u542b\u51fd\u6570\u539f\u578b\uff0c\u53c2\u6570\u540d\u79f0\u4f1a\u88ab\u7f16\u8bd1\u5668\u5ffd\u7565\uff0c\u4f46\u4f5c\u4e3a\u6587\u6863\u5f88\u6709\u7528\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728\u539f\u578b\u4e2d\u7701\u7565\u53c2\u6570\u540d\u79f0\uff0c\u5982\u4e0b\u6240\u793a</p> <pre><code>Circle(double = 1.0, string = \"red\");   // without identifiers\n   // Identifiers not needed in prototype but good to serve as documentation\n</code></pre> <p>\u5934\u6587\u4ef6\u5e94\u5305\u542b\u5e38\u91cf\u3001\u51fd\u6570\u539f\u578b\u3001\u7c7b/\u7ed3\u6784\u58f0\u660e\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#circlecpp-","title":"Circle.cpp - \u5b9e\u73b0","text":"<pre><code>#include \"Circle.h\" // user-defined header in the same directory\n\n// Constructor\n// default values shall only be specified in the declaration,\n// cannot be repeated in definition\nCircle::Circle(double r, string c) {\n   radius = r;\n   color = c;\n}\n\n// Public getter for private data member radius\ndouble Circle::getRadius() const {\n   return radius;\n}\n\n// Public setter for private data member radius\nvoid Circle::setRadius(double r) {\n   radius = r;\n}\n\n// Public getter for private data member color\nstring Circle::getColor() const {\n   return color;\n}\n\n// Public setter for private data member color\nvoid Circle::setColor(string c) {\n   color = c;\n}\n\n// A public member function\ndouble Circle::getArea() const {\n   return radius*radius*3.14159265;\n}\n</code></pre> <p>\u5b9e\u73b0\u6587\u4ef6\u63d0\u4f9b\u4e86\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u8fd9\u4e9b\u5b9a\u4e49\u5728\u5934\u6587\u4ef6\u4e2d\u88ab\u7701\u7565\u3002</p> <p>\u7f16\u8bd1\u5668\u9996\u5148\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u641c\u7d22\u53cc\u5f15\u53f7\u4e2d\u7684\u5934\u6587\u4ef6\uff08\u4f8b\u5982 <code>\"Circle.h\"</code> \uff09\uff0c\u7136\u540e\u641c\u7d22\u7cfb\u7edf\u7684\u5305\u542b\u76ee\u5f55\u3002\u5bf9\u4e8e\u5c16\u62ec\u53f7\u4e2d\u7684\u5934\u6587\u4ef6\uff08\u4f8b\u5982 <code>&lt;iostream&gt;</code> \uff09\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1a\u641c\u7d22\u5f53\u524d\u76ee\u5f55\uff0c\u800c\u53ea\u4f1a\u641c\u7d22\u7cfb\u7edf\u7684\u5305\u542b\u76ee\u5f55\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u7528\u6237\u5b9a\u4e49\u7684\u5934\u6587\u4ef6\uff0c\u8bf7\u4f7f\u7528\u53cc\u5f15\u53f7\u3002</p> <p>\u60a8\u9700\u8981\u5728\u6240\u6709\u6210\u5458\u540d\u79f0\u524d\u52a0\u4e0a <code>className::</code> \uff08\u79f0\u4e3a\u7c7b\u4f5c\u7528\u57df\u89e3\u6790\u8fd0\u7b97\u7b26\uff09\uff0c\u4ee5\u4fbf\u544a\u77e5\u7f16\u8bd1\u5668\u8be5\u6210\u5458\u5c5e\u4e8e\u7279\u5b9a\u7c7b\u3002</p> <p>\uff08\u7c7b\u4f5c\u7528\u57df\uff1a\u5728\u7c7b\u5185\u90e8\u5b9a\u4e49\u7684\u540d\u79f0\u5177\u6709\u6240\u8c13\u7684\u7c7b\u4f5c\u7528\u57df\u3002\u5b83\u4eec\u4ec5\u5728\u7c7b\u5185\u90e8\u53ef\u89c1\u3002\u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7c7b\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u540d\u79f0\u3002\u8981\u5728\u7c7b\u5916\u90e8\u4f7f\u7528\u8fd9\u4e9b\u540d\u79f0\uff0c\u9700\u8981\u4f7f\u7528\u7c7b\u4f5c\u7528\u57df\u89e3\u6790\u8fd0\u7b97\u7b26 <code>className::</code> \u3002\uff09</p> <p>\u4f60\u4e0d\u80fd\u5728\u5b9e\u73b0\u4e2d\u653e\u7f6e\u9ed8\u8ba4\u53c2\u6570\uff08\u5b83\u4eec\u5e94\u8be5\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff09\u3002\u4f8b\u5982\uff0c</p> <pre><code>Circle::Circle(double r = 1.0, string c = \"red\") {   // error!\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#circle","title":"\u7f16\u8bd1 Circle \u7c7b","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528 GNU GCC \u4e2d\u7684\u9009\u9879 <code>-c</code> \uff08\u4ec5\u7f16\u8bd1\uff09\u5c06 <code>Circle.cpp</code> \u7f16\u8bd1\u6210\u540d\u4e3a <code>Circle.o</code> \u7684\u76ee\u6807\u6587\u4ef6\uff1a</p> <p>\u8981\u4f7f\u7528 <code>Circle</code> \u7c7b\uff0c\u7528\u6237\u9700\u8981 <code>Circle.h</code> \u548c <code>Circle.o</code> \u3002\u4ed6\u4e0d\u9700\u8981 <code>Circle.cpp</code> \u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f60\u4e0d\u9700\u8981\u63d0\u4f9b\u4f60\u7684\u6e90\u4ee3\u7801\uff0c\u800c\u53ea\u9700\u8981\u63d0\u4f9b\u516c\u5171\u58f0\u660e\u548c\u76ee\u6807\u4ee3\u7801\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#testcirclecpp-","title":"TestCircle.cpp - \u6d4b\u8bd5\u9a71\u52a8\u7a0b\u5e8f","text":"<pre><code>/* A test driver for the Circle class (TestCircle.cpp) */\n#include &lt;iostream&gt;\n#include \"Circle.h\"   // using Circle class\nusing namespace std;\n\nint main() {\n   // Construct an instance of Circle c1\n   Circle c1(1.2, \"red\");\n   cout &lt;&lt; \"Radius=\" &lt;&lt; c1.getRadius() &lt;&lt; \" Area=\" &lt;&lt; c1.getArea()\n        &lt;&lt; \" Color=\" &lt;&lt; c1.getColor() &lt;&lt; endl;\n\n   c1.setRadius(2.1);   // Change radius and color of c1\n   c1.setColor(\"blue\");\n   cout &lt;&lt; \"Radius=\" &lt;&lt; c1.getRadius() &lt;&lt; \" Area=\" &lt;&lt; c1.getArea()\n        &lt;&lt; \" Color=\" &lt;&lt; c1.getColor() &lt;&lt; endl;\n\n   // Construct another instance using the default constructor\n   Circle c2;\n   cout &lt;&lt; \"Radius=\" &lt;&lt; c2.getRadius() &lt;&lt; \" Area=\" &lt;&lt; c2.getArea()\n        &lt;&lt; \" Color=\" &lt;&lt; c2.getColor()  &lt;&lt; endl;\n   return 0;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#_2","title":"\u94fe\u63a5","text":"<pre><code>g++ -c circle.cpp -o circle.o\ng++ TestCircle.cpp Circle.o -o TestCircle\n./TestCircle\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#_3","title":"\u8f93\u51fa","text":"<pre><code>Radius=1.2 Area=4.52389 Color=red\nRadius=2.1 Area=13.8544 Color=blue\nRadius=1 Area=3.14159 Color=red\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#5-time","title":"5 \u793a\u4f8b\uff1a<code>Time</code>\u7c7b","text":"<p>\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u540d\u4e3a <code>Time</code> \u7684\u7c7b\uff0c\u5b83\u6a21\u62df\u65f6\u95f4\u7684\u7279\u5b9a\u5b9e\u4f8b\uff0c\u5177\u6709\u5c0f\u65f6\u3001\u5206\u949f\u548c\u79d2\u7684\u503c\uff0c\u5982\u7c7b\u56fe\u6240\u793a\u3002</p> <p>\u7c7b <code>Time</code> \u5305\u542b\u4ee5\u4e0b\u6210\u5458\uff1a</p> <ul> <li>\u4e09\u4e2a <code>private</code> \u6570\u636e\u6210\u5458\uff1a <code>hour</code> (0-23)\u3001 <code>minute</code> (0-59) \u548c <code>second</code> (0-59)\uff0c\u9ed8\u8ba4\u503c\u4e3a 0\u3002</li> <li>\u4e00\u4e2a <code>public</code> \u6784\u9020\u51fd\u6570 <code>Time()</code> \uff0c\u5b83\u521d\u59cb\u5316\u6570\u636e\u6210\u5458 <code>hour</code> \u3001 <code>minute</code> \u548c <code>second</code> \uff0c\u4f7f\u7528\u8c03\u7528\u8005\u63d0\u4f9b\u7684\u503c\u3002</li> <li><code>public</code> \u79c1\u6709\u6570\u636e\u6210\u5458\u7684 getter \u548c setter \u65b9\u6cd5\uff1a <code>getHour()</code> \uff0c <code>getMinute()</code> \uff0c <code>getSecond()</code> \uff0c <code>setHour()</code> \uff0c <code>setMinute()</code> \u548c <code>setSecond()</code> \u3002</li> <li>\u4e00\u4e2a <code>public</code> \u6210\u5458\u51fd\u6570 <code>setTime()</code> \u7528\u4e8e\u8bbe\u7f6e\u8c03\u7528\u8005\u63d0\u4f9b\u7684 <code>hour</code> \u3001 <code>minute</code> \u548c <code>second</code> \u7684\u503c\u3002</li> <li>\u4e00\u4e2a <code>public</code> \u6210\u5458\u51fd\u6570 <code>``print()</code> \u7528\u4e8e\u4ee5\u683c\u5f0f \" <code>hh:mm:ss</code> \" \u6253\u5370\u6b64 <code>Time</code> \u5b9e\u4f8b\uff0c\u96f6\u586b\u5145\uff0c\u4f8b\u5982 <code>01:30:04</code> \u3002</li> <li>\u4e00\u4e2a <code>public</code> \u6210\u5458\u51fd\u6570 <code>nextSecond()</code> \uff0c\u5b83\u5c06\u6b64\u5b9e\u4f8b\u589e\u52a0\u4e00\u79d2\u3002 <code>nextSecond()</code> \u7684 <code>23:59:59</code> \u5e94\u4e3a <code>00:00:00</code> \u3002</li> </ul> <p>\u8ba9\u6211\u4eec\u4e3a <code>Time</code> \u7c7b\u7f16\u5199\u4ee3\u7801\uff0c\u5c06\u5934\u6587\u4ef6\u548c\u5b9e\u73b0\u5206\u5f00\u5728\u4e24\u4e2a\u6587\u4ef6\u4e2d\uff1a <code>Time.h</code> \u548c <code>Time.cpp</code> \u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#header-timeh","title":"Header - Time.h","text":"<pre><code>/* Header for the Time class (Time.h) */\n#ifndef TIME_H   // Include this \"block\" only if TIME_H is NOT defined\n#define TIME_H   // Upon the first inclusion, define TIME_H so that\n                 //  this header will not get included more than once\nclass Time {\nprivate:  // private section\n   // private data members\n   int hour;     // 0 - 23\n   int minute;   // 0 - 59\n   int second;   // 0 - 59\n\npublic:   // public section\n   // public member function prototypes\n   Time(int h = 0, int m = 0, int s = 0); \n  // Constructor with default values\n   int getHour() const;   \n  // public getter for private data member hour\n   void setHour(int h);   \n  // public setter for private data member hour\n   int getMinute() const; \n  // public getter for private data member minute\n   void setMinute(int m); \n  // public setter for private data member minute\n   int getSecond() const; \n  // public getter for private data member second\n   void setSecond(int s); \n  // public setter for private data member second\n   void setTime(int h, int m, int s);  \n  // set hour, minute and second\n   void print() const; \n  // Print a description of this instance in \"hh:mm:ss\"\n   void nextSecond();  \n  // Increase this instance by one second\n};  // need to terminate the class declaration with a semicolon\n\n#endif  // end of \"#ifndef\" block\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#timeh","title":"\u89e3\u6790 Time.h","text":"<p><code>#ifndef TIME_H</code> <code>#define TIME_H</code> ...... <code>#endif</code></p> <p>\u4e3a\u4e86\u9632\u6b62\u5934\u6587\u4ef6\u88ab\u591a\u6b21\u5305\u542b\u5230\u6e90\u6587\u4ef6\u4e2d\uff08\u5982\u679c\u67d0\u4e2a\u5b9e\u4f53\u88ab\u58f0\u660e\u4e24\u6b21\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\uff0c\u4f8b\u5982 <code>int i</code> \uff09\uff0c\u6211\u4eec\u5c06\u5934\u6587\u4ef6\u4ee3\u7801\u5305\u88f9\u5728\u4e00\u5bf9\u9884\u5904\u7406\u5668\u6307\u4ee4 <code>#ifndef</code> \uff08\u5982\u679c\u672a\u5b9a\u4e49\uff09\u548c <code>#endif</code> \u4e2d\u3002\u5982\u679c\u6807\u8bc6\u7b26 <code>TIME_H</code> \u5c1a\u672a\u88ab\u5b9a\u4e49\uff0c\u5219 if \u5757\u5185\u7684\u4ee3\u7801\u624d\u4f1a\u88ab\u5305\u542b\u3002\u7b2c\u4e00\u6b21\u5305\u542b\u65f6\u662f\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u540c\u65f6\u4e5f\u4f1a\u5b9a\u4e49\u6807\u8bc6\u7b26 <code>TIME_H</code> \uff08if \u5757\u4f53\u5185\u7684\u7b2c\u4e00\u4e2a\u6307\u4ee4\uff09\u3002\u540e\u7eed\u7684\u5305\u542b\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a <code>TIME_H</code> \u5728\u7b2c\u4e00\u6b21\u5305\u542b\u65f6\u5df2\u88ab\u5b9a\u4e49\u3002\u6309\u7167\u60ef\u4f8b\uff0c\u5bf9\u4e8e\u5934\u6587\u4ef6 <code>Xxx.h</code> \uff0c\u4f7f\u7528\u6807\u8bc6\u7b26 <code>XXX_H</code> \uff08\u6216 <code>XXX_H_INCLUDED</code> \uff09\u3002</p> <pre><code>class Time {\nprivate:  \u79c1\u6709\uff1a\n......\npublic:  \u516c\u5171:\n......\n};\n</code></pre> <p>\u5934\u6587\u4ef6 <code>Time.h</code> \u5305\u542b\u7c7b <code>Time</code> \u7684\u7c7b\u58f0\u660e\u3002\u5b83\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a <code>private</code> \u548c <code>public</code> \u3002 <code>private</code> \u6210\u5458\uff08\u6570\u636e\u6216\u51fd\u6570\uff09\u53ea\u80fd\u88ab\u8be5\u7c7b\u7684\u6210\u5458\u8bbf\u95ee\uff0c\u800c <code>public</code> \u6210\u5458\u5bf9\u6240\u6709\u4eba\u53ef\u89c1\uff08\u4f8b\u5982\u7c7b\u5916\u7684 <code>main()</code> \u51fd\u6570\uff09\u3002\u7c7b\u58f0\u660e\u5fc5\u987b\u4ee5\u5206\u53f7\u7ed3\u675f\u3002</p> <pre><code>private:  \u79c1\u6709\uff1a\n   int hour;\n   int minute;\n   int second;\npublic:  \u516c\u5171:\n   ......\n</code></pre> <p>\u6211\u4eec\u58f0\u660e\u4e86\u4e09\u4e2a\u79c1\u6709\u6570\u636e\u6210\u5458\uff0c\u5206\u522b\u540d\u4e3a <code>hour</code> \u3001 <code>minute</code> \u548c <code>second</code> \u3002\u5728 C++98/C++03 \u4e2d\uff0c\u4f60\u4e0d\u5141\u8bb8\u5728\u7c7b\u58f0\u660e\u4e2d\u521d\u59cb\u5316\u6570\u636e\u6210\u5458\uff08\u9664\u4e86 <code>const</code> <code>static</code> <code>int</code> \u6570\u636e\u6210\u5458\uff09\u3002\u4f8b\u5982\uff0c\u8bbe\u7f6e <code>hour = 0</code> \u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\u3002\u76f8\u53cd\uff0c\u6570\u636e\u6210\u5458\u5e94\u5728\u6784\u9020\u51fd\u6570\u4e2d\u521d\u59cb\u5316\uff08\u7a0d\u540e\u4f1a\u5c55\u793a\uff09\u3002\u8f83\u65b0\u7684 C++11 \u5141\u8bb8\u521d\u59cb\u5316\u6570\u636e\u6210\u5458\u3002</p> <p>\u5728\u7c7b\u58f0\u660e\u4e2d\u4ec5\u5217\u51fa\u6210\u5458\u51fd\u6570\u539f\u578b\u3002\u51fd\u6570\u539f\u578b\u7531\u8fd4\u56de\u7c7b\u578b\u3001\u51fd\u6570\u540d\u79f0\u548c\u53c2\u6570\u7c7b\u578b\u7ec4\u6210\u3002</p> <pre><code>Time(int h = 0, int m = 0, int s = 0);\n</code></pre> <p>\u58f0\u660e\u4e86\u6240\u8c13\u7684\u6784\u9020\u51fd\u6570\u3002\u6784\u9020\u51fd\u6570\u662f\u4e00\u4e2a\u7279\u6b8a\u51fd\u6570\uff0c\u5176\u540d\u79f0\u4e0e\u7c7b\u540d\u76f8\u540c\u3002\u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\uff0c\u6216\u8005\u9690\u5f0f\u8fd4\u56de <code>void</code> \u3002\u6784\u9020\u51fd\u6570\u4f53\u5185\u4e0d\u5141\u8bb8\u6709 <code>return</code> \u8bed\u53e5\u3002\u6784\u9020\u51fd\u6570\u53ea\u80fd\u5728\u5b9e\u4f8b\u58f0\u660e\u671f\u95f4\u4f7f\u7528\uff0c\u4ee5\u521d\u59cb\u5316\u5b9e\u4f8b\u7684\u6570\u636e\u6210\u5458\u3002\u6b64\u540e\u4e0d\u80fd\u518d\u8c03\u7528\u5b83\u3002</p> <p>\u5728\u5934\u6587\u4ef6\u7684\u51fd\u6570\u539f\u578b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u201c <code>= default-value</code> \u201d\u4e3a\u4efb\u4f55\u51fd\u6570\u6210\u5458\u8bbe\u7f6e\u51fd\u6570\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6b64\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u88ab\u8c03\u7528\u65f6\u4f20\u5165 0 \u5230 3 \u4e2a\u53c2\u6570\uff0c\u7701\u7565\u7684\u5c3e\u968f\u53c2\u6570\u5c06\u88ab\u8bbe\u7f6e\u4e3a\u5b83\u4eec\u7684\u9ed8\u8ba4\u503c\uff0c\u4f8b\u5982\uff0c</p> <pre><code>Time t1(1, 2, 3); // no default used\nTime t2(1, 2);    // s = 0 (default)\nTime t3(1);       // m = 0, s = 0 (defaults)\nTime t4;          // h = 0, m = 0, s = 0 (all defaults) - no empty parentheses ()\n</code></pre> <p>\u6807\u8bc6\u7b26 <code>h</code> \u3001 <code>m</code> \u548c <code>s</code> \u5728\u51fd\u6570\u539f\u578b\u4e2d\u4e0d\u662f\u5fc5\u9700\u7684 - \u60a8\u53ea\u9700\u8981\u6307\u5b9a\u53c2\u6570\u7684\u7c7b\u578b\u3002\u4f46\u5b83\u4eec\u4f5c\u4e3a\u9002\u5f53\u7684\u6587\u6863\u975e\u5e38\u6709\u7528\uff0c\u5f3a\u70c8\u63a8\u8350\u4f7f\u7528\u3002</p> <pre><code>int getHour() const;\nvoid setHour(int h);\nint getHour() const;\nvoid setHour(int h);\nint getHour() const;\nvoid setHour(int h);\n</code></pre> <p>\u58f0\u660e\u79c1\u6709\u6570\u636e\u6210\u5458 <code>hour</code> \u3001 <code>minute</code> \u548c <code>second</code> \u7684\u6240\u8c13 getter \u548c setter\u3002\u7531\u4e8e\u6570\u636e\u6210\u5458\u662f <code>private</code> \uff0c\u5728\u7c7b\u5916\u90e8\u65e0\u6cd5\u8bbf\u95ee\uff0c\u56e0\u6b64\u901a\u5e38\u63d0\u4f9b <code>public</code> getter \u548c setter \u6765\u8bfb\u53d6\u548c\u4fee\u6539 <code>private</code> \u6570\u636e\u6210\u5458\u3002\u6309\u7167\u60ef\u4f8b\uff0cgetter \u4e0d\u4ece\u8c03\u7528\u8005\u63a5\u6536\u4efb\u4f55\u5185\u5bb9\uff08 <code>void</code> \uff09\uff0c\u5e76\u8fd4\u56de\u6570\u636e\u6210\u5458\u7c7b\u578b\u7684\u503c\uff1bsetter \u63a5\u6536\u4e00\u4e2a\u6570\u636e\u6210\u5458\u7c7b\u578b\u7684\u503c\uff0c\u5e76\u8fd4\u56de <code>void</code> \u3002Setter \u53ef\u80fd\u4f1a\u5728\u8bbe\u7f6e\u6570\u636e\u6210\u5458\u7684\u503c\u4e4b\u524d\u9a8c\u8bc1\u8f93\u5165\u3002</p> <p>\u6211\u4eec\u901a\u8fc7\u5728\u51fd\u6570\u53c2\u6570\u5217\u8868\u540e\u653e\u7f6e\u5173\u952e\u5b57 <code>const</code> \uff0c\u5c06 getter \u51fd\u6570 <code>`\u58f0\u660e\u4e3a\u5e38\u91cf\u3002</code>const` \u6210\u5458\u51fd\u6570\u4e0d\u80fd\u4fee\u6539\u6b64\u5bf9\u8c61\u7684\u4efb\u4f55\u6570\u636e\u6210\u5458\u3002Getter \u4e0d\u9700\u8981\u4fee\u6539\u4efb\u4f55\u6570\u636e\u6210\u5458\u3002</p> <pre><code>void setTime(int h, int m, int s);\n</code></pre> <p>\u58f0\u660e\u4e00\u4e2a\u516c\u5171\u6210\u5458\u51fd\u6570\uff0c\u7528\u4e8e\u5728\u4e00\u6b21\u8c03\u7528\u4e2d\u8bbe\u7f6e\u6b64\u5b9e\u4f8b\u7684 <code>hour</code> \u3001 <code>minute</code> \u548c <code>second</code> \u3002</p> <pre><code>void print() const;\n</code></pre> <p>\u58f0\u660e\u4e00\u4e2a\u516c\u5171\u6210\u5458\u51fd\u6570\u4ee5\u6253\u5370\u6b64\u5b9e\u4f8b\uff0c\u683c\u5f0f\u4e3a <code>HH:MM:SS</code> \uff0c\u7528\u96f6\u586b\u5145\uff0c\u4f8b\u5982 <code>01:56:09</code> \u3002\u51fd\u6570 <code>print()</code> \u8fd4\u56de <code>void</code> \u3002</p> <pre><code>void nextSecond();\n</code></pre> <p>\u58f0\u660e\u4e00\u4e2a\u516c\u5171\u6210\u5458\u51fd\u6570\uff0c\u5c06\u6b64\u5b9e\u4f8b\u589e\u52a0\u4e00\u79d2\u3002\u4f8b\u5982\uff0c <code>23:59:59</code> \u53d8\u6210 <code>00:00:00</code> \u3002\u51fd\u6570 <code>nextSecond()</code> \u8fd4\u56de <code>void</code> \u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#_4","title":"\u89e3\u6790\u8fd0\u7b97\u7b26 ( <code>::</code> )","text":"<p>\u6240\u6709\u6210\u5458\u7684\u6807\u8bc6\u7b26\u524d\u90fd\u5e26\u6709\u7c7b\u540d\u548c\u4f5c\u7528\u57df\u89e3\u6790\u8fd0\u7b97\u7b26 ( <code>::</code> )\uff0c\u4f8b\u5982 <code>Time::Time</code> \u548c <code>Time::getHour</code> \uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u5c31\u80fd\u8fa8\u8bc6\u8fd9\u4e9b\u6807\u8bc6\u7b26\u5c5e\u4e8e\u7279\u5b9a\u7c7b</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#-timecpp","title":"\u5b9e\u73b0 - Time.cpp","text":"<pre><code>/* Implementation for the Time Class (Time.cpp) */\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include \"Time.h\"    // include header of Time class\nusing namespace std;\n\n// Constructor with default values. No input validation\nTime::Time(int h, int m, int s) {\n   hour = h;\n   minute = m;\n   second = s;\n}\n\n// public getter for private data member hour\nint Time::getHour() const {\n   return hour;\n}\n\n// public setter for private data member hour. No input validation\nvoid Time::setHour(int h) {\n   hour = h;\n}\n\n// public getter for private data member minute\nint Time::getMinute() const {\n   return minute;\n}\n\n// public setter for private data member minute. No input validation\nvoid Time::setMinute(int m) {\n   minute = m;\n}\n\n// public getter for private data member second\nint Time::getSecond() const {\n   return second;\n}\n\n// public setter for private data member second. No input validation\nvoid Time::setSecond(int s) {\n   second = s;\n}\n\n// Set hour, minute and second. No input validation\nvoid Time::setTime(int h, int m, int s) {\n   hour = h;\n   minute = m;\n   second = s;\n}\n\n// Print this Time instance in the format of \"hh:mm:ss\", zero filled\nvoid Time::print() const {\n   cout &lt;&lt; setfill('0');    // zero-filled, need &lt;iomanip&gt;, sticky\n   cout &lt;&lt; setw(2) &lt;&lt; hour  // set width to 2 spaces, need &lt;iomanip&gt;, non-sticky\n        &lt;&lt; \":\" &lt;&lt; setw(2) &lt;&lt; minute\n        &lt;&lt; \":\" &lt;&lt; setw(2) &lt;&lt; second &lt;&lt; endl;\n}\n\n// Increase this instance by one second\nvoid Time::nextSecond() {\n   ++second;\n   if (second &gt;= 60) {\n      second = 0;\n      ++minute;\n   }\n   if (minute &gt;= 60) {\n      minute = 0;\n      ++hour;\n   }\n   if (hour &gt;= 24) {\n      hour = 0;\n   }\n}/* Time \u7c7b\u7684\u5b9e\u73b0 (Time.cpp) */\n#include &lt;iostream&gt;  // \u7528\u4e8e cout\n#include &lt;iomanip&gt;   // \u7528\u4e8e setfill, setw (\u683c\u5f0f\u5316\u8f93\u51fa)\n#include \"Time.h\"    // \u5305\u542b Time \u7c7b\u7684\u5934\u6587\u4ef6\u5b9a\u4e49\nusing namespace std;\n\n// \u6784\u9020\u51fd\u6570\uff0c\u5e26\u6709\u9ed8\u8ba4\u503c\u3002\u6ca1\u6709\u8fdb\u884c\u8f93\u5165\u9a8c\u8bc1\u3002\nTime::Time(int h = 0, int m = 0, int s = 0) { // \u6784\u9020\u51fd\u6570\u5b9e\u73b0\uff0c\u5982\u679c\u521b\u5efa\u5bf9\u8c61\u65f6\u4e0d\u63d0\u4f9b\u53c2\u6570\uff0c\u5219\u9ed8\u8ba4\u4e3a0\n   hour = h;\n   minute = m;\n   second = s;\n}\n\n// \u516c\u6709\u7684 getter \u51fd\u6570\uff0c\u7528\u4e8e\u83b7\u53d6\u79c1\u6709\u6570\u636e\u6210\u5458 hour \u7684\u503c\nint Time::getHour() const { // const \u8868\u793a\u6b64\u51fd\u6570\u4e0d\u4f1a\u4fee\u6539\u5bf9\u8c61\u7684\u72b6\u6001\n   return hour;\n}\n\n// \u516c\u6709\u7684 setter \u51fd\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e\u79c1\u6709\u6570\u636e\u6210\u5458 hour \u7684\u503c\u3002\u6ca1\u6709\u8fdb\u884c\u8f93\u5165\u9a8c\u8bc1\u3002\nvoid Time::setHour(int h) {\n   hour = h;\n}\n\n// \u516c\u6709\u7684 getter \u51fd\u6570\uff0c\u7528\u4e8e\u83b7\u53d6\u79c1\u6709\u6570\u636e\u6210\u5458 minute \u7684\u503c\nint Time::getMinute() const { // const \u8868\u793a\u6b64\u51fd\u6570\u4e0d\u4f1a\u4fee\u6539\u5bf9\u8c61\u7684\u72b6\u6001\n   return minute;\n}\n\n// \u516c\u6709\u7684 setter \u51fd\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e\u79c1\u6709\u6570\u636e\u6210\u5458 minute \u7684\u503c\u3002\u6ca1\u6709\u8fdb\u884c\u8f93\u5165\u9a8c\u8bc1\u3002\nvoid Time::setMinute(int m) {\n   minute = m;\n}\n\n// \u516c\u6709\u7684 getter \u51fd\u6570\uff0c\u7528\u4e8e\u83b7\u53d6\u79c1\u6709\u6570\u636e\u6210\u5458 second \u7684\u503c\nint Time::getSecond() const { // const \u8868\u793a\u6b64\u51fd\u6570\u4e0d\u4f1a\u4fee\u6539\u5bf9\u8c61\u7684\u72b6\u6001\n   return second;\n}\n\n// \u516c\u6709\u7684 setter \u51fd\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e\u79c1\u6709\u6570\u636e\u6210\u5458 second \u7684\u503c\u3002\u6ca1\u6709\u8fdb\u884c\u8f93\u5165\u9a8c\u8bc1\u3002\nvoid Time::setSecond(int s) {\n   second = s;\n}\n\n// \u8bbe\u7f6e \u65f6\u3001\u5206\u3001\u79d2\u3002\u6ca1\u6709\u8fdb\u884c\u8f93\u5165\u9a8c\u8bc1\u3002\nvoid Time::setTime(int h, int m, int s) {\n   hour = h;\n   minute = m;\n   second = s;\n}\n\n// \u4ee5 \"hh:mm:ss\" \u7684\u683c\u5f0f\u6253\u5370\u5f53\u524d Time \u5b9e\u4f8b\uff0c\u4e0d\u8db3\u4e24\u4f4d\u7684\u524d\u9762\u8865\u96f6\nvoid Time::print() const { // const \u8868\u793a\u6b64\u51fd\u6570\u4e0d\u4f1a\u4fee\u6539\u5bf9\u8c61\u7684\u72b6\u6001\n   cout &lt;&lt; setfill('0');    // \u8bbe\u7f6e\u586b\u5145\u5b57\u7b26\u4e3a '0' (\u9700\u8981 &lt;iomanip&gt;), \u8fd9\u662f\u7c98\u6027\u7684 (sticky)\uff0c\u4f1a\u5f71\u54cd\u540e\u7eed\u8f93\u51fa\u76f4\u5230\u88ab\u6539\u53d8\n   cout &lt;&lt; setw(2) &lt;&lt; hour  // \u8bbe\u7f6e\u5b57\u6bb5\u5bbd\u5ea6\u4e3a 2 (\u9700\u8981 &lt;iomanip&gt;), \u8fd9\u662f\u975e\u7c98\u6027\u7684 (non-sticky)\uff0c\u53ea\u5f71\u54cd\u7d27\u968f\u5176\u540e\u7684\u8f93\u51fa\u9879\n        &lt;&lt; \":\" &lt;&lt; setw(2) &lt;&lt; minute\n        &lt;&lt; \":\" &lt;&lt; setw(2) &lt;&lt; second &lt;&lt; endl;\n}\n\n// \u5c06\u5f53\u524d\u65f6\u95f4\u5b9e\u4f8b\u589e\u52a0\u4e00\u79d2\nvoid Time::nextSecond() {\n   ++second; // \u79d2\u6570\u52a0 1\n   if (second &gt;= 60) { // \u5982\u679c\u79d2\u6570\u8fbe\u5230\u6216\u8d85\u8fc7 60\n      second = 0;      // \u79d2\u6570\u5f52\u96f6\n      ++minute;        // \u5206\u949f\u6570\u52a0 1\n   }\n   if (minute &gt;= 60) { // \u5982\u679c\u5206\u949f\u6570\u8fbe\u5230\u6216\u8d85\u8fc7 60\n      minute = 0;      // \u5206\u949f\u6570\u5f52\u96f6\n      ++hour;          // \u5c0f\u65f6\u6570\u52a0 1\n   }\n   if (hour &gt;= 24) {   // \u5982\u679c\u5c0f\u65f6\u6570\u8fbe\u5230\u6216\u8d85\u8fc7 24\n      hour = 0;        // \u5c0f\u65f6\u6570\u5f52\u96f6 (\u56de\u5230\u5348\u591c)\n   }\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#timecpp","title":"\u89e3\u6790 Time.cpp","text":"<p>\u5b9e\u73b0\u6587\u4ef6 <code>Time.cpp</code> \u5305\u542b\u6210\u5458\u7684\u5b9a\u4e49\uff08\u800c\u5934\u6587\u4ef6\u5305\u542b\u58f0\u660e\uff09\uff0c\u7279\u522b\u662f\u6210\u5458\u51fd\u6570\u3002</p> <p>\u5b9e\u73b0\u4e2d\u6240\u6709\u6210\u5458\u7684\u6807\u8bc6\u7b26\u524d\u90fd\u5e26\u6709\u7c7b\u540d\u548c\u4f5c\u7528\u57df\u89e3\u6790\u8fd0\u7b97\u7b26 ( <code>::</code> )\uff0c\u4f8b\u5982 <code>Time::Time</code> \u548c <code>Time::getHour</code> \uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u5c31\u80fd\u8fa8\u8bc6\u8fd9\u4e9b\u6807\u8bc6\u7b26\u5c5e\u4e8e\u7279\u5b9a\u7c7b\uff0c\u5728\u672c\u4f8b\u4e2d\u4e3a <code>Time</code> \u3002</p> <pre><code>Time::Time(int h, int m, int s) {\n   hour = h;\n   minute = m;\n   second = s; \n}\n</code></pre> <p>\u5728\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u6839\u636e\u8c03\u7528\u8005\u63d0\u4f9b\u7684\u8f93\u5165\u521d\u59cb\u5316 <code>private</code> \u6570\u636e\u6210\u5458 <code>hour</code> \u3001 <code>minute</code> \u548c <code>second</code> \u3002C++ \u4e0d\u4f1a\u521d\u59cb\u5316\u57fa\u672c\u7c7b\u578b\uff08\u4f8b\u5982 <code>int</code> \u3001 <code>double</code> \uff09\u7684\u6570\u636e\u6210\u5458\u3002\u5982\u679c\u5728\u4f7f\u7528\u6570\u636e\u6210\u5458\u4e4b\u524d\u672a\u5bf9\u5176\u8fdb\u884c\u521d\u59cb\u5316\uff0cC++ \u4e5f\u4e0d\u4f1a\u53d1\u51fa\u9519\u8bef\u6d88\u606f\u3002\u56e0\u6b64\uff0c\u5f3a\u70c8\u5efa\u8bae\u5728\u6784\u9020\u51fd\u6570\u4e2d\u521d\u59cb\u5316\u6240\u6709\u6570\u636e\u6210\u5458\uff0c\u8fd9\u6837\u6784\u9020\u7684\u5b9e\u4f8b\u5c31\u662f\u5b8c\u6574\u7684\uff0c\u800c\u4e0d\u662f\u4f9d\u8d56\u7528\u6237\u5728\u6784\u9020\u540e\u8bbe\u7f6e\u6570\u636e\u6210\u5458\u7684\u503c\u3002</p> <p>\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u5728\u7c7b\u58f0\u660e\uff08\u5728\u5934\u6587\u4ef6\u4e2d\uff09\u4e2d\u6307\u5b9a\uff0c\u800c\u4e0d\u662f\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u6307\u5b9a\u3002\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u653e\u7f6e\u9ed8\u8ba4\u503c\uff08\u4f8b\u5982\uff0c <code>h = 0</code> \uff09\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u6784\u9020\u51fd\u6570\uff08\u4ee5\u53ca setters\uff09\u4e2d\u6ca1\u6709\u5305\u542b\u8f93\u5165\u9a8c\u8bc1\uff08\u4f8b\u5982\uff0c\u5c0f\u65f6\u5e94\u5728 0 \u5230 23 \u4e4b\u95f4\uff09\u3002\u6211\u4eec\u5c06\u5728\u540e\u9762\u7684\u793a\u4f8b\u4e2d\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002</p> <pre><code>int Time::getHour() const {\n   return hour;\n}\n</code></pre> <p>\u79c1\u6709\u6570\u636e\u6210\u5458 <code>hour</code> \u7684\u516c\u5171 getter \u7b80\u5355\u5730\u8fd4\u56de\u6570\u636e\u6210\u5458 <code>hour</code> \u7684\u503c\u3002</p> <pre><code>void Time::setHour(int h) {\n   hour = h;\n}\n</code></pre> <p>\u79c1\u6709\u6570\u636e\u6210\u5458 <code>hour</code> \u7684\u516c\u5171\u8bbe\u7f6e\u5668\u5c06\u6570\u636e\u6210\u5458 <code>hour</code> \u8bbe\u7f6e\u4e3a\u7ed9\u5b9a\u7684\u503c <code>h</code> \u3002\u540c\u6837\uff0c\u5bf9\u4e8e h \u6ca1\u6709\u8f93\u5165\u9a8c\u8bc1\uff08\u5e94\u5728 0 \u5230 23 \u4e4b\u95f4\uff09\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#this","title":"\"this\" \u6307\u9488","text":"<p>\u6211\u4eec\u4e0d\u5e0c\u671b\u5c06\u51fd\u6570\u53c2\u6570\u547d\u540d\u4e3a <code>h</code> \u3001 <code>m</code> \u548c <code>s</code> \uff0c\u800c\u662f\u5e0c\u671b\u5c06\u53c2\u6570\u547d\u540d\u4e3a <code>hour</code> \u3001 <code>minute</code> \u548c <code>second</code> \uff0c\u8fd9\u4e9b\u540d\u79f0\u5728\u8bed\u4e49\u4e0a\u66f4\u6709\u610f\u4e49\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u540d\u79f0\u4e0e\u79c1\u6709\u6570\u636e\u6210\u5458\u7684\u540d\u79f0\u51b2\u7a81\u3002C++ \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5173\u952e\u5b57 <code>this</code> \uff08\u8fd9\u662f\u4e00\u4e2a\u6307\u5411\u5f53\u524d\u5b9e\u4f8b\u7684\u6307\u9488\u2014\u2014\u7a0d\u540e\u8ba8\u8bba\uff09\uff0c\u7528\u4e8e\u533a\u5206\u6570\u636e\u6210\u5458\u548c\u51fd\u6570\u53c2\u6570\u3002 <code>this-&gt;hour</code> \u3001 <code>this-&gt;minute</code> \u548c <code>this-&gt;second</code> \u6307\u7684\u662f\u6570\u636e\u6210\u5458\uff1b\u800c <code>hour</code> \u3001 <code>minute</code> \u548c <code>second</code> \u6307\u7684\u662f\u51fd\u6570\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u91cd\u5199\u6784\u9020\u51fd\u6570\u548c setter\uff1a</p> <pre><code>Time::Time(int hour, int minute, int second) {  // Constructor\n   this-&gt;hour = hour;\n   this-&gt;minute = minute;\n   this-&gt;second = second;\n}\n\nTime::setHour(int hour) {   // Setter for hour\n   this-&gt;hour = hour;\n}\n\nTime::getHour() const {  // Getter for hour\n   return this-&gt;hour;    // this-&gt; is the default, and hence optional\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#member-initializer-list","title":"Member Initializer List \u6210\u5458\u521d\u59cb\u5316\u5217\u8868","text":"<p>C++ \u63d0\u4f9b\u4e86\u4e00\u79cd\u66ff\u4ee3\u8bed\u6cd5\u6765\u5728\u6784\u9020\u51fd\u6570\u4e2d\u521d\u59cb\u5316\u6570\u636e\u6210\u5458\uff0c\u79f0\u4e3a\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u3002\u4f8b\u5982\uff0c</p> <pre><code>Time::Time(int h, int m, int s) : hour(h), minute(m), second(s) { \n   // The body runs after the member initializer list\n   // empty in this case\n}\n</code></pre> <p>\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u653e\u5728\u51fd\u6570\u53c2\u6570\u5217\u8868\u4e4b\u540e\uff0c\u7528\u5192\u53f7\u5206\u9694\uff0c\u5f62\u5f0f\u4e3a <code>dataMemberName(parameters)</code> \u3002\u5bf9\u4e8e\u57fa\u672c\u7c7b\u578b\u7684\u6570\u636e\u6210\u5458\uff08\u4f8b\u5982\uff0c <code>int</code> \uff0c <code>double</code> \uff09\uff0c <code>hour(h)</code> \u4e0e <code>hour = h</code> \u76f8\u540c\u3002\u5bf9\u4e8e\u5bf9\u8c61\u6570\u636e\u6210\u5458\uff08\u7a0d\u540e\u8ba8\u8bba\uff09\uff0c\u5c06\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002\u51fd\u6570\u4f53\u5c06\u5728\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u4e4b\u540e\u6267\u884c\uff0c\u5728\u672c\u4f8b\u4e2d\u4e3a\u7a7a\u3002</p> <p>\u521d\u59cb\u5316\u5217\u8868\u4e2d\u7684\u6570\u636e\u6210\u5458\u6309\u7167\u7c7b\u58f0\u660e\u4e2d\u5b83\u4eec\u7684\u58f0\u660e\u987a\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u800c\u4e0d\u662f\u521d\u59cb\u5316\u5217\u8868\u4e2d\u7684\u987a\u5e8f\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#-testtimecpp","title":"\u6d4b\u8bd5\u9a71\u52a8\u7a0b\u5e8f - TestTime.cpp","text":"<pre><code>/* Test Driver for the Time class (TestTime.cpp) */\n#include &lt;iostream&gt;\n#include \"Time.h\"    // include header of Time class\nusing namespace std;\n\nint main() {\n   Time t1(23, 59, 59);   // Test constructor\n\n   // Test all public member functions\n   t1.print();       // 23:59:59\n   t1.setHour(12);\n   t1.setMinute(30);\n   t1.setSecond(15);\n   t1.print();       // 12:30:15\n   cout &lt;&lt; \"Hour is \"   &lt;&lt; t1.getHour()   &lt;&lt; endl;\n   cout &lt;&lt; \"Minute is \" &lt;&lt; t1.getMinute() &lt;&lt; endl;\n   cout &lt;&lt; \"Second is \" &lt;&lt; t1.getSecond() &lt;&lt; endl;\n\n   Time t2;     // Test constructor with default values for hour, minute and second\n   t2.print();  // 00:00:00\n   t2.setTime(1, 2, 3);\n   t2.print();  // 01:02:03\n\n   Time t3(12); // Use default values for minute and second\n   t3.print();  // 12:00:00\n\n   // Test nextSecond()\n   Time t4(23, 59, 58);\n   t4.print();\n   t4.nextSecond();\n   t4.print();\n   t4.nextSecond();\n   t4.print();\n\n   // No input validation\n   Time t5(25, 61, 99); // values out of range\n   t5.print();  // 25:61:99\n}\n</code></pre> <pre><code>23 : 59 : 59\n22 : 30 : 15\nHour is 22\nMinute is 30\nSecond is 15\n00 : 00 : 00\n01 : 02 : 03\n12 : 00 : 00\n23 : 59 : 58\n23 : 59 : 59\n24 : 00 : 00\n25 : 61 : 99\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#testtimecpp","title":"\u89e3\u6790 TestTime.cpp","text":"<p>\u6d4b\u8bd5\u9a71\u52a8\u7a0b\u5e8f\u6d4b\u8bd5\u6784\u9020\u51fd\u6570\uff08\u5305\u62ec\u548c\u4e0d\u5305\u62ec\u9ed8\u8ba4\u503c\uff09\u4ee5\u53ca\u6240\u6709\u516c\u5171\u6210\u5458\u51fd\u6570\u3002\u663e\u7136\uff0c\u6ca1\u6709\u8fdb\u884c\u8f93\u5165\u9a8c\u8bc1\uff0c\u5982\u5b9e\u4f8b <code>t5</code> \u4e2d\u6240\u53cd\u6620\u7684\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#exercise","title":"Exercise \u7ec3\u4e60","text":"<p>\u5c06\u6210\u5458\u51fd\u6570 <code>previousSecond()</code> \u3001 <code>nextMinute()</code> \u3001 <code>previousMinute()</code> \u3001 <code>nextHour()</code> \u3001 <code>previousHour()</code> \u6dfb\u52a0\u5230 <code>Time</code> \u7c7b\u4e2d\u3002</p> <p>\u5934\u6587\u4ef6</p> <pre><code>#ifndef TIME_H\n#define TIME_H\n\nclass Time{\n  private:\n    int hour;\n    int minute;\n    int second;\n  public:\n    Time(int h=0,int m =0,int s=0);\n    int getHour()const;\n    void setHour(int h);\n    int getMinute()const;\n    void setMinute(int m);\n    int getSecond()const;\n    void setSecond(int s);\n    void setTime(int h,int m ,int s);\n    void print()const;\n    void nextSecond();\n    //new menber function\n    void previousSecond();\n    void nextMinute();\n    void previousMinute();\n    void nextHour();\n    void previousHour();\n};\n#endif\n</code></pre> <p>\u5b9e\u73b0\u6587\u4ef6</p> <pre><code>#include&lt;iostream&gt;\n#include\"Time.h\"\n#include&lt;iomanip&gt;\nusing namespace std;\n\nTime :: Time(int h, int m ,int s){\n    hour = h;\n    minute = m;\n    second = s;\n}\nint Time::getHour()const{\n    return hour;\n}\nvoid Time::setHour(int h){\n    hour=h;\n}\nint Time::getMinute()const{\n    return minute;\n}\nvoid Time::setMinute(int m){\n    minute =m;\n}\nint Time::getSecond()const{\n    return second;\n}\nvoid Time::setSecond(int s){\n    second=s;\n}\nvoid Time::setTime(int h,int m,int s){\n    hour =h;\n    minute =m;\n    second =s;\n}\nvoid Time::print()const{\n    if(hour&gt;=25||minute&gt;=61||second&gt;=61){\n        cout &lt;&lt;\"Error\"&lt;&lt;endl;\n    } else {cout&lt;&lt;setfill('0');\n          cout&lt;&lt;setw(2)&lt;&lt;hour\n           &lt;&lt;\" : \"&lt;&lt;setw(2)&lt;&lt;minute\n           &lt;&lt;\" : \"&lt;&lt;setw(2)&lt;&lt;second&lt;&lt;endl;\n    }\n}\nvoid Time::nextSecond(){\n    ++second;\n    if(second&gt;=60){\n        second = 0;\n        ++minute;\n    }\n    if(minute&gt;=60){\n        minute = 0;\n        ++hour;\n    }\n    if(hour&gt;=24){\n        hour =0;\n    }\n}\nvoid Time::previousSecond(){\n    -- second;\n    if(second &lt; 0){\n        second =59;\n        --minute; \n        if(minute&lt;0){\n            minute = 59;\n            -- hour ;\n            if(hour &lt;0){\n                hour =23;\n            }\n        }\n\n    }\n\n}\nvoid Time::nextMinute(){\n    ++ minute;\n    if(minute&gt;=60){\n        minute=0;\n        ++hour;\n    }\n    if(hour&gt;=24){\n        hour =0;\n    }\n}\nvoid Time::previousMinute(){\n    --minute;\n    if(minute&lt;0){\n        minute =59;\n        --hour;\n        if(hour &lt;0){\n            hour =23;\n        }\n    }\n}\nvoid Time::nextHour(){\n    ++hour;\n    if(hour&gt;=24){\n        hour =0;\n    }\n}\nvoid Time::previousHour(){\n    --hour;\n    if(hour &lt;0){\n        hour =23;\n    }\n}\n</code></pre> <p>\u6d4b\u8bd5\u6587\u4ef6</p> <pre><code>#include&lt;iostream&gt;\n#include\"Time.h\"\nusing namespace std;\n\nint main(){\n    Time t1 (23,59,59);\n    t1. print();\n    t1.setHour(22);\n    t1.setMinute(30);\n    t1.setSecond(15);\n    t1.print();\n    t1.previousHour();\n    t1.print();\n    t1.nextHour();\n    t1.print();\n    t1.previousMinute();\n    t1.print();\n    t1.nextMinute();\n    t1.print();\n    t1.previousSecond();\n    t1.print();\n    cout&lt;&lt;\"Hour is \"&lt;&lt;t1.getHour()&lt;&lt;endl;\n    cout&lt;&lt;\"Minute is \"&lt;&lt;t1.getMinute()&lt;&lt;endl;\n    cout&lt;&lt;\"Second is \"&lt;&lt;t1.getSecond()&lt;&lt;endl;\n    Time t2;\n    t2.print();\n    t2.setTime(1,2,3);\n    t2.print();\n\n    Time t3(12);\n    t3.print();\n\n    Time t4(23,59,58);\n    t4.print();\n    t4.nextSecond();\n    t4.print();\n    t4.nextSecond();\n    t4.print();\n    t4.previousSecond();\n    t4.print();\n\n    Time t5 (25,61,99);\n    t5.print();\n\n    Time t6;\n    t6.previousMinute();\n    t6.print();\n\n    Time t7;\n    t7.previousHour();\n    t7.print();\n\n    Time t8(23,59,00);\n    t8.print();\n    t8.nextMinute();\n    t8.print();\n\n    Time t9(24,59,00);\n    t9.print();\n    t9.nextHour();\n    t9.print();\n    t9.nextMinute();\n    t9.print();\n\n}\n</code></pre> <p>\u8f93\u51fa</p> <pre><code>23 : 59 : 59\n22 : 30 : 15\n21 : 30 : 15\n22 : 30 : 15\n22 : 29 : 15\n22 : 30 : 15\n22 : 30 : 14\nHour is 22\nMinute is 30\nSecond is 14\n00 : 00 : 00\n01 : 02 : 03\n12 : 00 : 00\n23 : 59 : 58\n23 : 59 : 59\n00 : 00 : 00\n23 : 59 : 59\nError\n23 : 59 : 00\n23 : 00 : 00\n23 : 59 : 00\n00 : 00 : 00\n24 : 59 : 00\n00 : 59 : 00\n01 : 00 : 00\n</code></pre> <p>\u7f16\u8bd1\u65b9\u5f0f</p> <pre><code>windows:\ng++ -o TestTime.exe Time.cpp TestTime.cpp  \nmacos:\ng++ -o TestTime Time.cpp TestTime.cpp  \n</code></pre> <pre><code>windows\n// Compile Time.cpp into object file Time.o, with -c option\n&gt; g++ -c Time.cpp\n// Compile test driver with object file\n&gt; g++ -o TestTime.exe TestTime.cpp Time.o\n// Execute the test driver\n&gt; TestTime\nmacos\n &gt; g++ -c Time.cpp\n &gt; g++ -o TestTime TestTime.cpp Time.o\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#6-point","title":"6. \u793a\u4f8b\uff1aPoint \u7c7b","text":"<p><code>Point</code> \u7c7b\uff0c\u5982\u7c7b\u56fe\u6240\u793a\uff0c\u5efa\u6a21\u5177\u6709 x \u548c y \u5750\u6807\u7684 2D \u70b9\u3002</p> <p>\u5728\u7c7b\u56fe\u4e2d\uff0c\u201c <code>-</code> \u201d\u8868\u793a <code>private</code> \u6210\u5458\uff1b\u201c <code>+</code> \u201d\u8868\u793a <code>public</code> \u6210\u5458\u3002\u201c <code>= xxx</code> \u201d\u6307\u5b9a\u6570\u636e\u6210\u5458\u7684\u9ed8\u8ba4\u503c\u3002</p> <p><code>Point</code> \u7c7b\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <ul> <li>\u79c1\u6709\u6570\u636e\u6210\u5458 <code>x</code> \u548c <code>y</code> \uff08\u7c7b\u578b\u4e3a <code>int</code> \uff09\uff0c\u9ed8\u8ba4\u503c\u4e3a 0\u3002</li> <li>\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u79c1\u6709\u6570\u636e\u6210\u5458 <code>x</code> \u548c <code>y</code> \u7684 getter \u548c setter \u65b9\u6cd5\u3002</li> <li>\u4e00\u4e2a setXY() \u51fd\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e <code>Point</code> \u7684 <code>x</code> \u548c <code>y</code> \u5750\u6807\u3002</li> <li>\u4e00\u4e2a\u51fd\u6570 <code>getMagnitude()</code> \uff0c\u5b83\u8fd4\u56de <code>\u221a(x2+y2)</code> \u3002\u4f60\u53ef\u4ee5\u5728 <code>&lt;cmath&gt;</code> \u4e2d\u4f7f\u7528\u5185\u7f6e\u7684 <code>sqrt()</code> \u51fd\u6570\u6765\u8ba1\u7b97\u5e73\u65b9\u6839\u3002</li> <li>\u4e00\u4e2a\u51fd\u6570 <code>getArgument()</code> \uff0c\u5b83\u8fd4\u56de <code>tan-1(y/x)</code> \u3002\u4f60\u53ef\u4ee5\u5728 <code>&lt;cmath&gt;</code> \u4e2d\u4f7f\u7528\u5185\u7f6e\u7684 <code>atan2(y, x)</code> \u51fd\u6570\u6765\u8ba1\u7b97\u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\u7684\u68af\u5ea6\u3002</li> <li>\u4e00\u4e2a\u51fd\u6570 <code>print()</code> \uff0c\u7528\u4e8e\u6253\u5370\u6b64\u5b9e\u4f8b\u7684\u201c <code>(x,y)</code> \u201d\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#pointh-","title":"Point.h - \u5934\u6587\u4ef6","text":"<pre><code>/* The Point class Header (Point.h) */\n#ifndef POINT_H\n#define POINT_H\n\n// Point class declaration\nclass Point {\nprivate:\n   // private data members (variables)\n   int x;\n   int y;\n\npublic:\n   // Declare member function prototypes\n   Point(int x = 0, int y = 0);  // Constructor with default values\n   int getX() const;\n   void setX(int x);\n   int getY() const;\n   void setY(int y);\n   void setXY(int x, int y);\n   double getMagnitude() const;\n   double getArgument() const;\n   void print() const;\n};\n\n#endif\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#pointcpp-","title":"Point.cpp - \u5b9e\u73b0","text":"<pre><code>/* The Point class Implementation (Point.cpp) */\n#include \"Point.h\" // user-defined header in the same directory\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\n// Constructor (default values can only be specified in the declaration)\nPoint::Point(int x, int y) : x(x), y(y) { }  // Use member initializer list\n\n// Public getter for private data member x\nint Point::getX() const {\n   return x;\n}\n\n// Public setter for private data member x\nvoid Point::setX(int x) {\n   this-&gt;x = x;\n}\n\n// Public getter for private data member y\nint Point::getY() const {\n   return y;\n}\n\n// Public setter for private data member y\nvoid Point::setY(int y) {\n   this-&gt;y = y;\n}\n\n// Public member function to set both x and y\nvoid Point::setXY(int x, int y) {\n   this-&gt;x = x;\n   this-&gt;y = y;\n}\n\n// Public member function to return the magnitude\ndouble Point::getMagnitude() const {\n   return sqrt(x*x + y*y);    // sqrt in &lt;cmath&gt;\n}\n\n// Public member function to return the argument\ndouble Point::getArgument() const {\n   return atan2(y, x);    // atan2 in &lt;cmath&gt;\n}\n\n// Public member function to print description about this point\nvoid Point::print() const {\n   cout &lt;&lt; \"(\" &lt;&lt; x &lt;&lt; \",\" &lt;&lt; y &lt;&lt; \")\" &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#testpointcpp-","title":"TestPoint.cpp - \u6d4b\u8bd5\u9a71\u52a8\u7a0b\u5e8f","text":"<pre><code>/* A test driver for the Point class (TestPoint.cpp) */\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include \"Point.h\"   // using Point class\nusing namespace std;\n\nint main() {\n   // Construct an instance of Point p1\n   Point p1(3, 4);\n   p1.print();\n   cout &lt;&lt; \"x = \" &lt;&lt; p1.getX() &lt;&lt; endl;\n   cout &lt;&lt; \"y = \" &lt;&lt; p1.getY() &lt;&lt; endl;\n   cout &lt;&lt; fixed &lt;&lt; setprecision(2);\n   cout &lt;&lt; \"mag = \" &lt;&lt; p1.getMagnitude() &lt;&lt; endl;\n   cout &lt;&lt; \"arg = \" &lt;&lt; p1.getArgument() &lt;&lt; endl;\n   p1.setX(6);\n   p1.setY(8);\n   p1.print();\n   p1.setXY(1, 2);\n   p1.print();\n\n   // Construct an instance of Point using default constructor\n   Point p2;\n   p2.print();\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#7-account","title":"7. \u793a\u4f8b\uff1aAccount \u7c7b","text":"<p>\u4e00\u4e2a\u540d\u4e3a <code>Account</code> \u7684\u7c7b\uff0c\u6a21\u62df\u94f6\u884c\u8d26\u6237\uff0c\u5176\u8bbe\u8ba1\u5982\u7c7b\u56fe\u6240\u793a\u3002\u5b83\u5305\u542b\uff1a</p> <ul> <li>\u4e24\u4e2a\u79c1\u6709\u6570\u636e\u6210\u5458\uff1a <code>accountNumber</code> ( <code>int</code> ) \u548c <code>balance</code> ( <code>double</code> )\uff0c\u7528\u4e8e\u7ef4\u62a4\u5f53\u524d\u8d26\u6237\u4f59\u989d\u3002</li> <li>\u516c\u5171\u51fd\u6570 <code>credit()</code> \u548c <code>debit()</code> \uff0c\u5206\u522b\u7528\u4e8e\u4ece\u4f59\u989d\u4e2d\u589e\u52a0\u6216\u51cf\u5c11\u7ed9\u5b9a\u91d1\u989d\u3002\u5982\u679c <code>amount</code> \u5927\u4e8e <code>balance</code> \uff0c\u5219 <code>debit()</code> \u51fd\u6570\u5e94\u6253\u5370\u201c\u53d6\u6b3e\u91d1\u989d\u8d85\u8fc7\u5f53\u524d\u4f59\u989d\uff01\u201d</li> <li>\u4e00\u4e2a\u516c\u5171\u51fd\u6570 <code>print()</code> \uff0c\u5b83\u5e94\u6253\u5370 \"A/C no: xxx Balance=xxx\"\uff08\u4f8b\u5982\uff0cA/C no: 991234 Balance=$88.88\uff09\uff0c\u5176\u4e2d <code>balance</code> \u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#-accounth","title":"\u5934\u6587\u4ef6 - Account.h","text":"<pre><code>/* Header for Account class (Account.h) */\n#ifndef ACCOUNT_H\n#define ACCOUNT_H\n\nclass Account {\nprivate:\n   int accountNumber;\n   double balance;\n\npublic:\n   Account(int accountNumber, double balance = 0.0);\n   int getAccountNumber() const;\n   double getBalance() const;\n   void setBalance(double balance);\n   void credit(double amount);\n   void debit(double amount);\n   void print() const;\n};\n\n#endif\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#-accountcpp","title":"\u5b9e\u73b0\u6587\u4ef6 - Account.cpp","text":"<pre><code>/* Implementation for the Account class (Account.cpp) */\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include \"Account.h\"\nusing namespace std;\n\n// Constructor\nAccount::Account(int no, double b) : accountNumber(no), balance(b) { }\n\n// Public getter for private data member accountNumber\nint Account::getAccountNumber() const {\n   return accountNumber;\n}\n\n// Public getter for private data member balance\ndouble Account::getBalance() const {\n   return balance;\n}\n\n// Public setter for private data member balance\nvoid Account::setBalance(double b) {\n   balance = b;\n}\n\n// Adds the given amount to the balance\nvoid Account::credit(double amount) {\n   balance += amount;\n}\n\n// Subtract the given amount from the balance\nvoid Account::debit(double amount) {\n   if (amount &lt;= balance) {\n      balance -= amount;\n   } else {\n      cout &lt;&lt; \"Amount withdrawn exceeds the current balance!\" &lt;&lt; endl;\n   }\n}\n\n// Print description for this Account instance\nvoid Account::print() const {\n   cout &lt;&lt; fixed &lt;&lt; setprecision(2);\n   cout &lt;&lt; \"A/C no: \" &lt;&lt; accountNumber &lt;&lt; \" Balance=$\" &lt;&lt; balance &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#-testaccountcpp","title":"\u6d4b\u8bd5\u9a71\u52a8\u7a0b\u5e8f - TestAccount.cpp","text":"<pre><code>/* Test Driver for Account class (TestAccount.cpp) */\n#include &lt;iostream&gt;\n#include \"Account.h\"\n\nusing namespace std;\n\nint main() {\n    Account a1(8111, 99.99);\n    a1.print();     // A/C no: 8111 Balance=$99.99\n    a1.credit(20);\n    a1.debit(10);\n    a1.print();     // A/C no: 8111 Balance=$109.99\n\n    Account a2(8222);  // default balance\n    a2.print();        // A/C no: 8222 Balance=$0.00\n    a2.setBalance(100);\n    a2.credit(20);\n    a2.debit(200);  // Amount withdrawn exceeds the current balance!\n    a2.print();     // A/C no: 8222 Balance=$120.00\n    return 0;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#8-ball","title":"8. \u793a\u4f8b\uff1aBall \u7c7b","text":"<p>\u4e00\u4e2a <code>Ball</code> \u7c7b\u6a21\u62df\u4e00\u4e2a\u79fb\u52a8\u7684\u7403\uff0c\u6309\u7167\u7c7b\u56fe\u6240\u793a\u8bbe\u8ba1\uff0c\u5305\u542b\u4ee5\u4e0b\u6210\u5458\uff1a</p> <ul> <li>\u56db\u4e2a <code>private</code> \u6570\u636e\u6210\u5458 <code>x</code> \u3001 <code>y</code> \u3001 <code>xSpeed</code> \u548c <code>ySpeed</code> \u7528\u4e8e\u7ef4\u62a4\u7403\u7684\u4f4d\u7f6e\u548c\u901f\u5ea6\u3002</li> <li>\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u4ee5\u53ca\u79c1\u6709\u6570\u636e\u6210\u5458\u7684\u516c\u5171 getter \u548c setter \u65b9\u6cd5\u3002</li> <li>\u4e00\u4e2a\u51fd\u6570 <code>setXY()</code> \uff0c\u7528\u4e8e\u8bbe\u7f6e\u7403\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca <code>setXYSpeed()</code> \u7528\u4e8e\u8bbe\u7f6e\u7403\u7684\u901f\u5ea6\u3002</li> <li>\u4e00\u4e2a\u51fd\u6570 <code>move()</code> \uff0c\u5b83\u5206\u522b\u5c06 <code>x</code> \u548c <code>y</code> \u589e\u52a0 <code>xSpeed</code> \u548c <code>ySpeed</code> \u3002</li> <li>\u4e00\u4e2a\u51fd\u6570 <code>print()</code> \uff0c\u5b83\u6253\u5370 \" <code>Ball @ (x,y) with speed (xSpeed,ySpeed)</code> \"\uff0c\u4fdd\u7559 2 \u4f4d\u5c0f\u6570\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#-ballh","title":"\u5934\u6587\u4ef6 - Ball.h","text":"<pre><code>/* Header for the Ball class (Ball.h) */\n#ifndef BALL_H\n#define BALL_H\n\nclass Ball {\nprivate:\n   double x, y;           // Position of the ball\n   double xSpeed, ySpeed; // Speed of the ball\n\npublic:\n   Ball(double x = 0.0, double y = 0.0,  // Constructor with default values\n        double xSpeed = 0.0, double ySpeed = 0.0);\n   double getX() const;\n   void setX(double x);\n   double getY() const;\n   void setY(double y);\n   double getXSpeed() const;\n   void setXSpeed(double xSpeed);\n   double getYSpeed() const;\n   void setYSpeed(double ySpeed);\n   void setXY(double x, double y);\n   void setXYSpeed(double xSpeed, double ySpeed);\n   void move();\n   void print() const;\n};\n\n#endif\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#-ballcpp","title":"\u5b9e\u73b0\u6587\u4ef6 - Ball.cpp","text":"<pre><code>/* Implementation for the Ball Class (Ball.cpp) */\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include \"Ball.h\"    // include header of Ball class\nusing namespace std;\n\n// Constructor with default values. No input validation\nBall::Ball(double x, double y, double xSpeed, double ySpeed)\n      : x(x), y(y), xSpeed(xSpeed), ySpeed(ySpeed) { }  // use member initializer list\n\n// public getters/setters for private data members\ndouble Ball::getX() const {\n   return x;\n}\ndouble Ball::getY() const {\n   return y;\n}\nvoid Ball::setX(double x) {\n   this-&gt;x = x;\n}\nvoid Ball::setY(double y) {\n   this-&gt;y = y;\n}\ndouble Ball::getXSpeed() const {\n   return xSpeed;\n}\ndouble Ball::getYSpeed() const {\n   return ySpeed;\n}\nvoid Ball::setXSpeed(double xSpeed) {\n   this-&gt;xSpeed = xSpeed;\n}\nvoid Ball::setYSpeed(double ySpeed) {\n   this-&gt;ySpeed = ySpeed;\n}\n\n// Set position (x,y)\nvoid Ball::setXY(double x, double y) {\n   this-&gt;x = x;\n   this-&gt;y = y;\n}\n\n// Set speed (xSpeed,ySpeed)\nvoid Ball::setXYSpeed(double xSpeed, double ySpeed) {\n   this-&gt;xSpeed = xSpeed;\n   this-&gt;ySpeed = ySpeed;\n}\n\n// Move the ball by increases x and y by xSpeed and ySpeed\nvoid Ball::move() {\n   x += xSpeed;   // increment x by xSpeed\n   y += ySpeed;   // increment y by ySpeed\n}\n\n// Print a description about this Ball instance\nvoid Ball::print() const {\n   cout &lt;&lt; fixed &lt;&lt; setprecision(2);\n   cout &lt;&lt; \"Ball @ (\" &lt;&lt; x &lt;&lt; ',' &lt;&lt; y &lt;&lt; \") with speed (\"\n        &lt;&lt; xSpeed &lt;&lt; ',' &lt;&lt; ySpeed &lt;&lt; ')' &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#-testballcpp","title":"\u6d4b\u8bd5\u9a71\u52a8\u7a0b\u5e8f - TestBall.cpp","text":"<pre><code>/* Test Driver for the Ball class (TestBall.cpp) */\n#include &lt;iostream&gt;\n#include \"Ball.h\"    // include header of Ball class\nusing namespace std;\n\nint main() {\n   Ball ball;\n   ball.print();    // Ball @ (0.00,0.00) with speed (0.00,0.00)\n   ball.setXY(1.1, 2.2);\n   ball.setXYSpeed(3.3, 4.4);\n   ball.print();    // Ball @ (1.10,2.20) with speed (3.30,4.40)\n   ball.setX(5.5);\n   ball.setY(6.6);\n   cout &lt;&lt; \"x is \" &lt;&lt; ball.getX() &lt;&lt; endl;  // x is 5.50\n   cout &lt;&lt; \"y is \" &lt;&lt; ball.getY() &lt;&lt; endl;  // y is 6.60\n   ball.move();\n   ball.print();    // Ball @ (8.80,11.00) with speed (3.30,4.40)\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#9","title":"9. \u793a\u4f8b\uff1a\u4f5c\u8005\u548c\u4e66\u7c4d\u7c7b\uff08\u7528\u4e8e\u4e66\u5e97\uff09","text":""},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#91-author","title":"9.1 \u8ba9\u6211\u4eec\u4ece Author \u7c7b\u5f00\u59cb","text":"<p>\u8ba9\u6211\u4eec\u4ece\u4e00\u4e2a\u540d\u4e3a <code>Author</code> \u7684\u7c7b\u5f00\u59cb\uff0c\u5176\u8bbe\u8ba1\u5982\u7c7b\u56fe\u6240\u793a\u3002\u5b83\u5305\u542b\uff1a</p> <ul> <li>\u4e09\u4e2a <code>private</code> \u6570\u636e\u6210\u5458\uff1a <code>name</code> ( <code>string</code> )\uff0c <code>email</code> ( <code>string</code> )\uff0c\u4ee5\u53ca <code>gender</code> ( <code>char</code> \u7684 <code>'m'</code> \uff0c <code>'f'</code> \u6216 <code>'u'</code> \u8868\u793a\u672a\u77e5)\u3002</li> <li>\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u7528\u4e8e\u521d\u59cb\u5316 <code>name</code> \u3001 <code>email</code> \u548c <code>gender</code> \uff0c\u5e76\u4f7f\u7528\u7ed9\u5b9a\u7684\u503c\u3002\u6570\u636e\u6210\u5458\u6ca1\u6709\u9ed8\u8ba4\u503c\u3002</li> <li>\u83b7\u53d6 <code>name</code> \u3001 <code>email</code> \u548c <code>gender</code> \u7684 getter\uff0c\u4ee5\u53ca <code>email</code> \u7684 setter\u3002\u6ca1\u6709 <code>name</code> \u548c <code>gender</code> \u7684 setter\uff0c\u56e0\u4e3a\u6211\u4eec\u5047\u8bbe\u8fd9\u4e9b\u5c5e\u6027\u65e0\u6cd5\u66f4\u6539\u3002</li> <li>\u4e00\u4e2a <code>print()</code> \u6210\u5458\u51fd\u6570\uff0c\u6253\u5370\u201cname (gender) at email\u201d\uff0c\u4f8b\u5982\uff0c\u201cPeter Jones (m) at peter@somewhere.com\u201d\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#-authorh","title":"\u5934\u6587\u4ef6 - Author.h","text":"<pre><code>/* Header for the Author class (Author.h) */\n#ifndef AUTHOR_H\n#define AUTHOR_H\n\n#include &lt;string&gt;\nusing namespace std;\n\nclass Author {\nprivate:\n   string name;\n   string email;\n   char gender;   // 'm', 'f', or 'u' for unknown\n\npublic:\n   Author(string name, string email, char gender);\n   string getName() const;\n   string getEmail() const;\n   void setEmail(string email);\n   char getGender() const;\n   void print() const;\n};\n\n#endif\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#authorcpp","title":"Author.cpp","text":"<pre><code>/* Implementation for the Author class (Author.cpp) */\n#include &lt;iostream&gt;\n#include \"Author.h\"\nusing namespace std;\n\n// Constructor, with input validation\nAuthor::Author(string name, string email, char gender) {\n   this-&gt;name = name;\n   setEmail(email);  // Call setter to check for valid email\n   if (gender == 'm' || gender == 'f') {\n      this-&gt;gender = gender;\n   } else {\n      cout &lt;&lt; \"Invalid gender! Set to 'u' (unknown).\" &lt;&lt; endl;\n      this-&gt;gender = 'u';\n   }\n}\n\nstring Author::getName() const {\n   return name;\n}\n\nstring Author::getEmail() const {\n   return email;\n}\n\nvoid Author::setEmail(string email) {\n   // Check for valid email. Assume that a valid email contains\n   //  a '@' that is not the first nor last character.\n   size_t atIndex = email.find('@');\n   if (atIndex != string::npos &amp;&amp; atIndex != 0 &amp;&amp; atIndex != email.length()-1) {\n      this-&gt;email = email;\n   } else {\n      cout &lt;&lt; \"Invalid email! Set to empty string.\" &lt;&lt; endl;\n      this-&gt;email = \"\";\n   }\n}\n\nchar Author::getGender() const {\n   return gender;\n}\n\n// print in the format \"name (gender) at email\"\nvoid Author::print() const {\n   cout &lt;&lt; name &lt;&lt; \" (\" &lt;&lt; gender &lt;&lt; \") at \" &lt;&lt; email &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#authorcpp_1","title":"\u89e3\u6790 Author.cpp","text":"<pre><code>Author::Author(string name, string email, char gender) {\n   this-&gt;name = name;\n   setEmail(email);\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5728\u51fd\u6570\u53c2\u6570\u4e2d\u4f7f\u7528\u6807\u8bc6\u7b26 <code>name</code> \uff0c\u5b83\u4e0e\u6570\u636e\u6210\u5458\u7684\u6807\u8bc6\u7b26 <code>name</code> \u53d1\u751f\u51b2\u7a81\u3002\u4e3a\u4e86\u533a\u5206\u8fd9\u4e24\u4e2a\u6807\u8bc6\u7b26\uff0c\u6211\u4eec\u4f7f\u7528\u5173\u952e\u5b57 <code>this</code> \uff0c\u5b83\u662f\u6307\u5411\u6b64\u5b9e\u4f8b\u7684\u6307\u9488\u3002 <code>this-&gt;name</code> \u6307\u7684\u662f\u6570\u636e\u6210\u5458\uff1b\u800c <code>name</code> \u6307\u7684\u662f\u51fd\u6570\u53c2\u6570\u3002</p> <p>\u53c2\u6570 <code>name</code> \u6ca1\u6709\u8fdb\u884c\u8f93\u5165\u9a8c\u8bc1\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8e <code>email</code> \uff0c\u6211\u4eec\u8c03\u7528\u4e86\u6267\u884c\u8f93\u5165\u9a8c\u8bc1\u7684 setter <code>setEmail()</code> \u3002</p> <pre><code>void Author::setEmail(string email) {\n   size_t found = email.find('@');\n   if (found != string::npos &amp;&amp; found != 0 &amp;&amp; found != email.length()-1) {\n      this-&gt;email = email;\n   } else {\n      cout &lt;&lt; \"Invalid email! Set to empty string.\" &lt;&lt; endl;\n      this-&gt;email = \"\";\n   }\n</code></pre> <p>\u4e3a\u4e86\u9a8c\u8bc1 <code>email</code> \uff0c\u6211\u4eec\u5047\u8bbe\u6709\u4e00\u4e2a <code>'@'</code> \uff0c\u5b83\u4e0d\u662f\u7b2c\u4e00\u4e2a\u6216\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff08\u8fd8\u6709\u5176\u4ed6\u66f4\u4e25\u683c\u7684\u7535\u5b50\u90ae\u4ef6\u9a8c\u8bc1\u6807\u51c6\uff09\u3002\u6211\u4eec\u4f7f\u7528 <code>string</code> \u7c7b\u7684\u51fd\u6570 <code>find()</code> \u6765\u67e5\u627e\u5b57\u7b26 <code>'@'</code> \u7684\u4f4d\u7f6e\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u4e3a <code>size_t</code> \u7684\u503c\uff08\u901a\u5e38\u4e0e <code>unsigned int</code> \u76f8\u540c\uff09\u3002\u51fd\u6570 <code>find()</code> \u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u5e38\u91cf <code>string::npos</code> \uff08\u901a\u5e38\u8bbe\u7f6e\u4e3a -1\uff09\u4ee5\u8868\u793a\u201c\u672a\u627e\u5230\u201d\uff1b0 \u8868\u793a\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c <code>length()-1</code> \u8868\u793a\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff08\u5176\u4e2d <code>string</code> \u7684\u51fd\u6570 <code>length()</code> \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff09\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#testauthorcpp","title":"TestAuthor.cpp","text":"<pre><code>/* Test Driver for the Author class (TestAuthor.cpp) */\n#include \"Author.h\"\n\nint main() {\n   // Declare and construct an instance of Author\n   Author peter(\"Peter Jones\", \"peter@somewhere.com\", 'm');\n   peter.print();\n      // Peter Jones (m) at peter@somewhere.com\n   peter.setEmail(\"peter@xyz.com\");\n   peter.print();\n      // Peter Jones (m) at peter@xyz.com\n\n   Author paul(\"Paul Jones\", \"@somewhere.com\", 'n');\n      // Invalid email! Set to empty string.\n      // Invalid gender! Set to 'u' (unknown).\n   paul.setEmail(\"paul@\");\n      // Invalid email! Set to empty string.\n   paul.print();\n      // Paul Jones (u) at\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#92-","title":"9.2 \u4e00\u672c\u4e66\u7531\u4f5c\u8005\u7f16\u5199 - \u4f7f\u7528\u201c\u5bf9\u8c61\u201d\u6570\u636e\u6210\u5458","text":"<p>\u8ba9\u6211\u4eec\u8bbe\u8ba1\u4e00\u4e2a <code>Book</code> \u7c7b\u3002\u5047\u8bbe\u4e00\u672c\u4e66\u53ea\u80fd\u7531\u4e00\u4e2a\u4f5c\u8005\u7f16\u5199\u3002 <code>Book</code> \u7c7b\uff08\u5982\u7c7b\u56fe\u6240\u793a\uff09\u5305\u542b\u4ee5\u4e0b\u6210\u5458\uff1a</p> <ul> <li>\u56db\u4e2a <code>private</code> \u6570\u636e\u6210\u5458\uff1a <code>name</code> ( <code>string</code> )\uff0c <code>author</code> (\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684\u7c7b <code>Author</code> \u7684\u4e00\u4e2a\u5b9e\u4f8b)\uff0c <code>price</code> ( <code>double</code> )\uff0c\u4ee5\u53ca <code>qtyInStock</code> ( <code>int</code> \uff0c\u9ed8\u8ba4\u503c\u4e3a 0)\u3002 <code>price</code> \u5e94\u4e3a\u6b63\u6570\uff0c <code>qtyInStock</code> \u5e94\u4e3a\u96f6\u6216\u6b63\u6570\u3002</li> <li>\u56db\u4e2a <code>private</code> \u6570\u636e\u6210\u5458\uff1a <code>name</code> ( <code>string</code> )\uff0c <code>author</code> (\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684\u7c7b <code>Author</code> \u7684\u4e00\u4e2a\u5b9e\u4f8b)\uff0c <code>price</code> ( <code>double</code> )\uff0c\u4ee5\u53ca <code>qtyInStock</code> ( <code>int</code> \uff0c\u9ed8\u8ba4\u503c\u4e3a 0)\u3002 <code>price</code> \u5e94\u4e3a\u6b63\u6570\uff0c <code>qtyInStock</code> \u5e94\u4e3a\u96f6\u6216\u6b63\u6570\u3002</li> <li><code>public</code> \u7684 getter \u548c setter \u7528\u4e8e <code>private</code> \u6570\u636e\u6210\u5458\u3002\u8bf7\u6ce8\u610f\uff0c <code>getAuthor()</code> \u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\uff08 <code>Author</code> \u7c7b\u7684\u5b9e\u4f8b\uff09\u3002</li> <li>\u4e00\u4e2a <code>public</code> \u6210\u5458\u51fd\u6570 <code>print()</code> \uff0c\u5b83\u4f1a\u6253\u5370\u201c'book-name' by author-name (gender) @ email\u201d\u3002</li> <li>\u4e00\u4e2a <code>public</code> \u6210\u5458\u51fd\u6570 <code>getAuthorName()</code> \uff0c\u5b83\u8fd4\u56de\u6b64 <code>Book</code> \u5b9e\u4f8b\u7684\u4f5c\u8005\u7684 <code>name</code> \u3002</li> </ul> <p>\u56fe\u4e2d\u7684\u7a7a\u5fc3\u83f1\u5f62\u8868\u793a\u805a\u5408\uff08\u6216 has-a\uff09\u5173\u8054\u5173\u7cfb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a <code>Book</code> \u5b9e\u4f8b\u62e5\u6709\u4e00\u4e2a\uff08\u4e14\u4ec5\u4e00\u4e2a\uff09 <code>Author</code> \u5b9e\u4f8b\u4f5c\u4e3a\u5176\u7ec4\u6210\u90e8\u5206\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#-bookh","title":"\u5934\u6587\u4ef6 - Book.h","text":"<pre><code>/* Header for the class Book (Book.h) */\n#ifndef BOOK_H\n#define BOOK_H\n\n#include &lt;string&gt;\n#include \"Author.h\"   // Use the Author class\nusing namespace std;\n\nclass Book {\nprivate:\n   string name;\n   Author author; // data member author is an instance of class Author\n   double price;\n   int qtyInStock;\n\npublic:\n   Book(string name, Author author, double price, int qtyInStock = 0);\n      // To recieve an instance of class Author as argument\n   string getName() const;\n   Author getAuthor() const;  // Returns an instance of the class Author\n   double getPrice() const;\n   void setPrice(double price);\n   int getQtyInStock() const;\n   void setQtyInStock(int qtyInStock);\n   void print() const;\n   string getAuthorName() const;\n};\n\n#endif\n</code></pre> <pre><code>#include \"Author.h\"\n</code></pre> <p>\u6211\u4eec\u9700\u8981\u5305\u542b\u201c <code>Author.h</code> \u201d\u5934\u6587\u4ef6\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u5f53\u524d\u7c7b <code>Book</code> \u4e2d\u4f7f\u7528\u4e86 <code>Author</code> \u7c7b\u3002</p> <pre><code>private:\n   Author author;\n</code></pre> <p>\u6211\u4eec\u58f0\u660e\u4e00\u4e2a <code>private</code> \u6570\u636e\u6210\u5458 <code>author</code> \u4f5c\u4e3a\u7c7b <code>Author</code> \u7684\u5b9e\u4f8b\uff0c\u8be5\u7c7b\u4e4b\u524d\u5df2\u5b9a\u4e49\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#-bookcpp","title":"\u5b9e\u73b0\u6587\u4ef6 - Book.cpp","text":"<pre><code>/* Implementation for the class Book (Book.cpp) */\n#include &lt;iostream&gt;\n#include \"Book.h\"\nusing namespace std;\n\n// Constructor, with member initializer list to initialize the\n//  component Author instance\nBook::Book(string name, Author author, double price, int qtyInStock)\n      : name(name), author(author) {   // Must use member initializer list to construct object\n   // Call setters to validate price and qtyInStock\n   setPrice(price);\n   setQtyInStock(qtyInStock);\n}\n\nstring Book::getName() const {\n   return name;\n}\n\nAuthor Book::getAuthor() const {\n   return author;\n}\n\ndouble Book::getPrice() const {\n   return price;\n}\n\n// Validate price, which shall be positive\nvoid Book::setPrice(double price) {\n   if (price &gt; 0) {\n      this-&gt;price = price;\n   } else {\n      cout &lt;&lt; \"price should be positive! Set to 0\" &lt;&lt; endl;\n      this-&gt;price = 0;\n   }\n}\n\nint Book::getQtyInStock() const {\n   return qtyInStock;\n}\n\n// Validate qtyInStock, which cannot be negative\nvoid Book::setQtyInStock(int qtyInStock) {\n   if (qtyInStock &gt;= 0) {\n      this-&gt;qtyInStock = qtyInStock;\n   } else {\n      cout &lt;&lt; \"qtyInStock cannot be negative! Set to 0\" &lt;&lt; endl;\n      this-&gt;qtyInStock = 0;\n   }\n}\n\n// print in the format \"\"Book-name\" by author-name (gender) at email\"\nvoid Book::print() const {\n   cout &lt;&lt; \"'\" &lt;&lt; name &lt;&lt; \"' by \";\n   author.print();\n}\n\n// Return the author' name for this Book\nstring Book::getAuthorName() const {\n   return author.getName();   // invoke the getName() on instance author\n}\n</code></pre> <pre><code>Book::Book(string name, Author author, double price, int qtyInStock)\n      : name(name), author(author) {\n   setPrice(price);\n   setQtyInStock(qtyInStock);\n}\n</code></pre> <p>\u5728\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u8c03\u7528\u8005\u5e94\u8be5\u521b\u5efa\u4e00\u4e2a <code>Author</code> \u7684\u5b9e\u4f8b\uff0c\u5e76\u5c06\u8be5\u5b9e\u4f8b\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\u3002\u6211\u4eec\u4f7f\u7528\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u6765\u521d\u59cb\u5316\u6570\u636e\u6210\u5458 <code>name</code> \u548c <code>author</code> \u3002\u6211\u4eec\u5728\u51fd\u6570\u4f53\u4e2d\u8c03\u7528 setters\uff0c\u8fd9\u4e9b setters \u4f1a\u6267\u884c\u8f93\u5165\u9a8c\u8bc1\u6765\u8bbe\u7f6e <code>price</code> \u548c <code>qtyInStock</code> \u3002\u51fd\u6570\u4f53\u5728\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u4e4b\u540e\u8fd0\u884c\u3002 <code>author(author)</code> \u8c03\u7528 <code>Author</code> \u7c7b\u7684\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u8be5\u6784\u9020\u51fd\u6570\u4f1a\u5bf9\u6240\u6709\u6570\u636e\u6210\u5458\u6267\u884c\u9010\u6210\u5458\u62f7\u8d1d\u3002\u5bf9\u8c61\u6570\u636e\u6210\u5458\u5e94\u901a\u8fc7\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u6784\u9020\uff0c\u800c\u4e0d\u5e94\u5728\u51fd\u6570\u4f53\u4e2d\u6784\u9020\u3002\u5426\u5219\uff0c\u5c06\u8c03\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u6765\u6784\u9020\u5bf9\u8c61\u3002</p> <pre><code>void Book::setPrice(double price) {\n   if (price &gt; 0) {\n      this-&gt;price = price;\n   } else {\n      cout &lt;&lt; \"price should be positive! Set to 0\" &lt;&lt; endl;\n      this-&gt;price = 0;\n   }\n}\n</code></pre> <p><code>price</code> \u7684 setter \u4f1a\u9a8c\u8bc1\u7ed9\u5b9a\u7684\u8f93\u5165\u3002</p> <pre><code>string Book::getAuthorName() const {\n   return author.getName();\n}\n</code></pre> <p>\u8c03\u7528\u6570\u636e\u6210\u5458 <code>author</code> \u7684 <code>getName()</code> \uff0c\u5b83\u8fd4\u56de\u6b64 <code>Book</code> \u5b9e\u4f8b\u7684\u4f5c\u8005\u59d3\u540d\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#testbookcpp","title":"TestBook.cpp","text":"<pre><code>/* Test Driver for the Book class (TestBook.cpp) */\n#include &lt;iostream&gt;\n#include \"Book.h\"\nusing namespace std;\n\nint main() {\n   // Declare and construct an instance of Author\n   Author peter(\"Peter Jones\", \"peter@somewhere.com\", 'm');\n   peter.print();  // Peter Jones (m) at peter@somewhere.com\n\n   // Declare and construct an instance of Book\n   Book cppDummy(\"C++ for Dummies\", peter, 19.99,1);\n   cppDummy.setQtyInStock(88);\n   cppDummy.print();\n      // 'C++ for Dummies' by Peter Jones (m) at peter@somewhere.com\n\n   cout &lt;&lt; cppDummy.getQtyInStock() &lt;&lt; endl;  // 88\n   cout &lt;&lt; cppDummy.getPrice() &lt;&lt; endl;       // 19.99\n   cout &lt;&lt; cppDummy.getAuthor().getName() &lt;&lt; endl;  // \"Peter Jones\"\n   cout &lt;&lt; cppDummy.getAuthor().getEmail() &lt;&lt; endl; // \"peter@somewhere.com\"\n   cout &lt;&lt; cppDummy.getAuthorName() &lt;&lt; endl;        // \"Peter Jones\"\n\n   Book moreCpp(\"More C++ for Dummies\", peter, -19.99,1);\n      // price should be positive! Set to 0\n   cout &lt;&lt; moreCpp.getPrice() &lt;&lt; endl;   // 0\n}\n</code></pre> <pre><code>Peter Jones (m) at peter@somewhere.com\n ' C++ for Dummies ' by Peter Jones (m) at peter@somewhere.com\n88\n3.03226e-314\nPeter Jones\npeter@somewhere.com\nPeter Jones\nprice should be positive! Set to 0\n0\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#the-default-copy-constructor","title":"The Default Copy Constructor \u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570","text":"<p>\u6784\u9020\u51fd\u6570\u4e2d\u7684\u521d\u59cb\u5316\u5668 <code>author(author)</code> \u8c03\u7528\u4e86\u6240\u8c13\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u901a\u8fc7\u590d\u5236\u540c\u4e00\u7c7b\u7684\u7ed9\u5b9a\u5b9e\u4f8b\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b\u3002\u5982\u679c\u60a8\u5728\u7c7b\u4e2d\u6ca1\u6709\u63d0\u4f9b\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0cC++ \u4f1a\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5b83\u901a\u8fc7\u9010\u4e2a\u6210\u5458\u590d\u5236\u6765\u6784\u9020\u4e00\u4e2a\u65b0\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e <code>Author</code> \u7c7b\uff0c\u7f16\u8bd1\u5668\u63d0\u4f9b\u7684\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u5982\u4e0b\uff1a</p> <pre><code>// Default copy constructor of Author class provided by C++\nAuthor::Author(const Author&amp; other)\n      : name(other.name), email(other.email), gender(other.gender) { }  // memberwise copy\n</code></pre>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#93-author-string","title":"9.3\u5bf9\u8c61\u7684\u5f15\u7528\u4f20\u9012\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 Author \u548c string","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5bf9\u8c61\u662f\u4ee5\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u4f20\u5165\u51fd\u6570\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u514b\u9686\u526f\u672c\u5e76\u4f20\u5165\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u539f\u59cb\u526f\u672c\u3002\u5bf9\u4e8e\u5927\u578b\u5bf9\u8c61\uff0c\u503c\u4f20\u9012\u4f1a\u56e0\u4e3a\u521b\u5efa\u514b\u9686\u526f\u672c\u7684\u5f00\u9500\u800c\u5f71\u54cd\u6027\u80fd\u3002</p> <p>\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u5c06\u5bf9\u8c61\u4f20\u5165\u51fd\u6570\uff0c\u4f7f\u7528\u53c2\u6570\u5217\u8868\u4e2d\u7684\u5f15\u7528\uff08 <code>&amp;</code> \uff09\u58f0\u660e\u3002\u5982\u679c\u6211\u4eec\u4e0d\u6253\u7b97\u5728\u51fd\u6570\u5185\u90e8\u4fee\u6539\u5bf9\u8c61\uff08\u5bf9\u539f\u59cb\u526f\u672c\u4ea7\u751f\u526f\u4f5c\u7528\uff09\uff0c\u6211\u4eec\u5c06\u5176\u8bbe\u7f6e\u4e3a <code>const</code> \u3002</p> <p>\u5728 <code>Book</code> \u7c7b\u4e2d\uff0c <code>string</code> \u548c <code>Author</code> \u7684\u6570\u636e\u6210\u5458\u662f\u5bf9\u8c61\u3002 <code>Author</code> \u7c7b\u4e4b\u524d\u5df2\u5b9a\u4e49\uff1b <code>string</code> \u662f C++ \u5934\u6587\u4ef6 <code>&lt;string&gt;</code> \u4e2d\u63d0\u4f9b\u7684\u4e00\u4e2a\u7c7b\uff0c\u5c5e\u4e8e\u547d\u540d\u7a7a\u95f4 <code>std</code> \u3002\u6211\u4eec\u4e0d\u5e94\u8be5\u5728\u5934\u6587\u4ef6\u4e2d\u5305\u542b\u201c <code>using namespace std;</code> \u201d\uff08\u56e0\u4e3a\u8fd9\u79cd\u505a\u6cd5\u4e0d\u597d\uff0c\u8be5\u8bed\u53e5\u4f1a\u88ab\u5305\u542b\u5728\u4f7f\u7528\u6b64\u5934\u6587\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u4e2d\uff09\uff0c\u800c\u662f\u5e94\u5f53\u4f7f\u7528\u4f5c\u7528\u57df\u89e3\u6790\u8fd0\u7b97\u7b26\uff0c\u5e76\u5c06\u5176\u79f0\u4e3a <code>std::string</code> \u3002</p> <p>\u8ba9\u6211\u4eec\u4fee\u6539\u6211\u4eec\u7684 <code>Book</code> \u7c7b\u6765\u5c55\u793a\u6309\u5f15\u7528\u4f20\u9012\uff08\u4e3a\u4e86\u6027\u80fd\uff09\u3002</p> <pre><code>/* Header for Author class (Author.h) */\n#ifndef AUTHOR_H\n#define AUTHOR_H\n\n#include &lt;string&gt;\n\nclass Author {\nprivate:\n   std::string name;\n   std::string email;\n   char gender;   // 'm', 'f', or 'u' for unknown\n\npublic:\n   Author(const std::string &amp; name, const std::string &amp; email, char gender);\n          // &amp; specifies pass by reference, const for non-mutable\n   std::string getName() const;\n   std::string getEmail() const;\n   void setEmail(const std::string &amp; email);\n   char getGender() const;\n   void print() const;\n};\n\n#endif\n</code></pre> <ul> <li>\u5728 C++ \u4e2d\uff0c <code>string</code> \u662f\u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e2a\u7c7b\uff08\u5728\u5934\u6587\u4ef6 \u4e2d\uff0c\u5c5e\u4e8e\u547d\u540d\u7a7a\u95f4 <code>std</code> \uff09\uff0c\u5c31\u50cf\u6211\u4eec\u5b9a\u4e49\u7684 <code>Point</code> \u3001 <code>Circle</code> \u7c7b\u4e00\u6837\u3002</li> <li>\u800c\u4e0d\u662f\u5305\u542b\u201cusing namespace std;\u201d\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u662f\u4e00\u4e2a\u4e0d\u597d\u7684\u505a\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u8bed\u53e5\u5c06\u4f1a\u88ab\u5305\u542b\u5728\u6240\u6709\u4f7f\u7528\u6b64\u5934\u6587\u4ef6\u7684\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5b8c\u5168\u9650\u5b9a\u7684\u540d\u79f0std::string\u3002</li> <li>\u4e0d\u662f\u901a\u8fc7\u503c\u4f20\u9012 <code>string</code> \u5bf9\u8c61\u5230\u51fd\u6570\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u5f71\u54cd\u6027\u80fd\uff0c\u9700\u8981\u521b\u5efa\u514b\u9686\u526f\u672c\u3002\u6211\u4eec\u901a\u8fc7\u5f15\u7528\u4f20\u9012 <code>string</code> \u5bf9\u8c61\uff08\u7531 <code>&amp;</code> \u8868\u793a\uff09\u3002</li> <li>\u7136\u800c\uff0c\u5728\u6309\u5f15\u7528\u4f20\u9012\u4e2d\uff0c\u51fd\u6570\u5185\u90e8\u7684\u66f4\u6539\u4f1a\u5f71\u54cd\u51fd\u6570\u5916\u90e8\u8c03\u7528\u8005\u7684\u526f\u672c\u3002</li> <li>\u5982\u679c\u6211\u4eec\u4e0d\u6253\u7b97\u5728\u51fd\u6570\u5185\u90e8\u66f4\u6539\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528\u5173\u952e\u5b57 <code>const</code> \u6765\u8868\u793a\u4e0d\u53ef\u53d8\u6027\u3002\u5982\u679c\u5728\u51fd\u6570\u5185\u90e8\u65e0\u610f\u4e2d\u66f4\u6539\u4e86\u5bf9\u8c61\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#authorcpp_2","title":"Author.cpp","text":"<pre><code>/* Implementation for the Author class (Author.cpp) */\n#include &lt;iostream&gt;\n#include \"Author.h\"\nusing namespace std;\n\n// Constructor, with input validation\nAuthor::Author(const string &amp; name, const string &amp; email, char gender) : name(name) {\n   setEmail(email);  // Call setter to check for valid email\n   if (gender == 'm' || gender == 'f') {\n      this-&gt;gender = gender;\n   } else {\n      cout &lt;&lt; \"Invalid gender! Set to 'u' (unknown).\" &lt;&lt; endl;\n      this-&gt;gender = 'u';\n   }\n}\n\nstring Author::getName() const {\n   return name;\n}\n\nstring Author::getEmail() const {\n   return email;\n}\n\nvoid Author::setEmail(const string &amp; email) {\n   // Check for valid email. Assume that a valid email contains\n   //  a '@' that is not the first nor last character.\n   size_t atIndex = email.find('@');\n   if (atIndex != string::npos &amp;&amp; atIndex != 0 &amp;&amp; atIndex != email.length()-1) {\n      this-&gt;email = email;\n   } else {\n      cout &lt;&lt; \"Invalid email! Set to empty string.\" &lt;&lt; endl;\n      this-&gt;email = \"\";\n   }\n}\n\nchar Author::getGender() const {\n   return gender;\n}\n\n// print in the format \"name (gender) at email\"\nvoid Author::print() const {\n   cout &lt;&lt; name &lt;&lt; \" (\" &lt;&lt; gender &lt;&lt; \") at \" &lt;&lt; email &lt;&lt; endl;\n}\n</code></pre> <p>Program Notes: \u7a0b\u5e8f\u8bf4\u660e\uff1a</p> <pre><code>Author::Author(const string &amp; name, const string &amp; email, char gender) { ...... }\n</code></pre> <p>\u5728\u6784\u9020\u51fd\u6570\u4e2d\uff0c <code>string</code> \u5bf9\u8c61\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u3002\u8fd9\u63d0\u9ad8\u4e86\u6027\u80fd\uff0c\u56e0\u4e3a\u5b83\u6d88\u9664\u4e86\u521b\u5efa\u4e34\u65f6\uff08\u514b\u9686\uff09\u5bf9\u8c61\u7684\u9700\u8981\u3002\u7136\u540e\u6784\u9020\u51fd\u6570\u8c03\u7528 <code>string</code> \u7c7b\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5c06\u53c2\u6570\u9010\u4e2a\u6210\u5458\u590d\u5236\u5230\u5176\u6570\u636e\u6210\u5458 <code>name</code> \u548c <code>email</code> \u4e2d\u3002</p> <p>\u6211\u4eec\u5c06\u53c2\u6570\u8bbe\u7f6e\u4e3a <code>const</code> \uff0c\u4ee5\u9632\u6b62\u5b83\u4eec\u5728\u51fd\u6570\u5185\u90e8\u88ab\u4fee\u6539\uff08\u4ece\u800c\u5bf9\u539f\u59cb\u526f\u672c\u4ea7\u751f\u526f\u4f5c\u7528\uff09\u3002</p> <pre><code>Book(const string &amp; name, const Author &amp; author, double price, int qtyInStock = 0);\n</code></pre> <p><code>string</code> \u548c <code>Author</code> \u5bf9\u8c61 <code>`\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u5230\u6784\u9020\u51fd\u6570\u4e2d\u3002\u8fd9\u63d0\u9ad8\u4e86\u6027\u80fd\uff0c\u56e0\u4e3a\u5b83\u907f\u514d\u4e86\u5728\u6309\u503c\u4f20\u9012\u4e2d\u521b\u5efa\u4e34\u65f6\u514b\u9686\u526f\u672c\u3002\u53c2\u6570\u88ab\u6807\u8bb0\u4e3a</code>const` \uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u6253\u7b97\u5728\u51fd\u6570\u5185\u90e8\u4fee\u6539\u5b83\u4eec\uff08\u5bf9\u539f\u59cb\u526f\u672c\u4ea7\u751f\u526f\u4f5c\u7528\uff09\u3002</p> <pre><code>Author getAuthor() const;\n</code></pre> <p>\u8be5 getter \u8fd4\u56de\u6570\u636e\u6210\u5458 <code>author</code> \u7684\u526f\u672c\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#bookcpp","title":"Book.cpp","text":"<pre><code>/* Implementation for the class Book (Book.cpp) */\n#include &lt;iostream&gt;\n#include \"Book.h\"\nusing namespace std;\n\n// Constructor, with member initializer list to initialize the\n//  component Author instance\nBook::Book(const string &amp; name, const Author &amp; author, double price, int qtyInStock)\n      : name(name), author(author) { // Init object reference in member initializer list\n   // Call setters to validate price and qtyInStock\n   setPrice(price);\n   setQtyInStock(qtyInStock);\n}\n\nstring Book::getName() const {\n   return name;\n}\n\nAuthor Book::getAuthor() {\n   return author;\n}\n\ndouble Book::getPrice() const {\n   return price;\n}\n\n// Validate price, which shall be positive\nvoid Book::setPrice(double price) {\n   if (price &gt; 0) {\n      this-&gt;price = price;\n   } else {\n      cout &lt;&lt; \"price should be positive! Set to 0\" &lt;&lt; endl;\n      this-&gt;price = 0;\n   }\n}\n\nint Book::getQtyInStock() const {\n   return qtyInStock;\n}\n\n// Validate qtyInStock, which cannot be negative\nvoid Book::setQtyInStock(int qtyInStock) {\n   if (qtyInStock &gt;= 0) {\n      this-&gt;qtyInStock = qtyInStock;\n   } else {\n      cout &lt;&lt; \"qtyInStock cannot be negative! Set to 0\" &lt;&lt; endl;\n      this-&gt;qtyInStock = 0;\n   }\n}\n\n// print in the format \"\"Book-name\" by author-name (gender) at email\"\nvoid Book::print() const {\n   cout &lt;&lt; \"'\" &lt;&lt; name &lt;&lt; \"' by \";\n   author.print();\n}\n\n// Return the author' name for this Book\nstring Book::getAuthorName() const {\n   return author.getName();   // invoke the getName() on instance author\n}\n</code></pre> <pre><code>Book::Book(const string &amp; name, Author &amp; author, double price, int qtyInStock)\n      : name(name), author(author) { ...... }\n</code></pre> <p><code>name(name)</code> \u548c <code>author(author)</code> \u8c03\u7528\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u901a\u8fc7\u9010\u6210\u5458\u62f7\u8d1d\u53c2\u6570\u6765\u6784\u9020 <code>string</code> \u548c <code>Author</code> \u7684\u65b0\u5b9e\u4f8b\u3002</p> <pre><code>Author Book::getAuthor() { return author; }\n</code></pre> <p>\u6570\u636e\u6210\u5458 <code>author</code> \u7684\u526f\u672c\u88ab\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002</p> <p>\u4f60\u5e94\u8be5\u907f\u514d\u5c06\u79c1\u6709\u6570\u636e\u6210\u5458\u7684\u5f15\u7528\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\uff08\u4f8b\u5982\uff0c <code>Author &amp; Book::getAuthor() { return author; }</code> \uff09\uff0c\u56e0\u4e3a\u8c03\u7528\u8005\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u66f4\u6539\u79c1\u6709\u6570\u636e\u6210\u5458\uff0c\u8fd9\u7834\u574f\u4e86\u201c\u4fe1\u606f\u9690\u85cf\u548c\u5c01\u88c5\u201d\u7684\u6982\u5ff5\u3002</p>"},{"location":"DEV/Programming/Cpp/04%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP/#-testbookcpp","title":"\u6d4b\u8bd5\u9a71\u52a8\u7a0b\u5e8f - TestBook.cpp","text":"<pre><code>/* Test Driver for the Book class (TestBook.cpp) */\n#include &lt;iostream&gt;\n#include \"Book.h\"\nusing namespace std;\n\nint main() {\n   // Declare and construct an instance of Author\n   Author peter(\"Peter Jones\", \"peter@somewhere.com\", 'm');\n   peter.print();  // Peter Jones (m) at peter@somewhere.com\n\n   // Declare and construct an instance of Book\n   Book cppDummy(\"C++ for Dummies\", peter, 19.99);\n   cppDummy.print();\n      // 'C++ for Dummies' by Peter Jones (m) at peter@somewhere.com\n\n   peter.setEmail(\"peter@xyz.com\");\n   peter.print();   // Peter Jones (m) at peter@xyz.com\n   cppDummy.print();\n      // 'C++ for Dummies' by Peter Jones (m) at peter@somewhere.com\n\n   cppDummy.getAuthor().setEmail(\"peter@abc.com\");\n   cppDummy.print();\n      // 'C++ for Dummies' by Peter Jones (m) at peter@somewhere.com\n}\n</code></pre> <p>\u5728\u4e0a\u8ff0\u6d4b\u8bd5\u7a0b\u5e8f\u4e2d\uff0c\u6784\u9020\u4e86\u4e00\u4e2a\u540d\u4e3a <code>peter</code> \u7684 <code>Author</code> \u5b9e\u4f8b\uff08\u5728\u7b2c 8 \u884c\uff09\u3002\u6b64\u5b9e\u4f8b\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u5230 <code>Book</code> \u7684\u6784\u9020\u51fd\u6570\u4e2d\uff08\u7b2c 12 \u884c\uff09\uff0c\u4ee5\u521b\u5efa <code>Book</code> \u7684\u5b9e\u4f8b <code>cppDummy</code> \u3002</p>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/","title":"\u5173\u4e8e\u7c7b\u548c\u5bf9\u8c61\u7684\u793a\u4f8b","text":""},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#1-2","title":"1 \u793a\u4f8b\uff1a\u65f6\u95f4\u7c7b\u7248\u672c2 \u2014\u2014\u4f7f\u7528\u5f15\u7528","text":"<p>\u7ee7\u6211\u4eec\u4e4b\u524d\u7684 Time \u7c7b\u7248\u672c\u4e4b\u540e\uff0c\u5047\u8bbe\u6211\u4eec\u5e0c\u671b\u652f\u6301\u5bf9 <code>Time</code> \u5b9e\u4f8b\u8fdb\u884c\u7ea7\u8054\u64cd\u4f5c\uff0c\u4f8b\u5982 <code>t.nextSecond().nextSecond().print()</code> \u3002\u6211\u4eec\u53ef\u4ee5\u8ba9 <code>nextSecond()</code> \u901a\u8fc7\u5f15\u7528\u8fd4\u56de\u201c <code>this</code> \u201d\u5b9e\u4f8b\u3002\u7ea7\u8054\u64cd\u4f5c <code>t.nextSecond().nextSecond().print()</code> \u5e94\u88ab\u7406\u89e3\u4e3a <code>((t.nextSecond()).nextSecond()).print()</code> \u3002 <code>t.nextSecond()</code> \u8fd4\u56de\u5bf9\u201c <code>this</code> \u201d ``\u5b9e\u4f8b\u7684\u5f15\u7528\uff0c\u7136\u540e\u8be5\u5f15\u7528\u7528\u4e8e\u8c03\u7528\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002</p>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#timeh","title":"Time.h","text":"<pre><code>class Time {\nprivate:\n   ......\npublic:\n   Time &amp; nextSecond();  // Return a reference to \"this\" instance\n   ......\n};\n</code></pre> <p>\u5728\u51fd\u6570\u539f\u578b\u4e2d\uff0c\u6211\u4eec\u58f0\u660e <code>nextSecond()</code> \u6210\u5458\u51fd\u6570\u8fd4\u56de\u5bf9 <code>Time</code> \u5bf9\u8c61\u7684\u5f15\u7528\u3002\u8fd4\u56de\u7684\u5f15\u7528\u53ef\u7528\u4e8e\u8c03\u7528\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002\u4f8b\u5982\uff0c <code>t.nextSecond().nextSecond()</code> \u88ab\u89e3\u91ca\u4e3a <code>(t.nextSecond()).nextSecond()</code> \u3002\u6211\u4eec\u4e4b\u524d\u7684\u7248\u672c\u8fd4\u56de <code>void</code> \uff0c\u65e0\u6cd5\u8fdb\u4e00\u6b65\u4f7f\u7528\u3002</p> <pre><code>// Increase this instance by one second and return this instance by reference\nTime &amp; Time::nextSecond() {\n   if (++second == 60) {\n      second = 0;\n      if (++minute == 60) {\n         minute = 0;\n         if (++hour == 24) {\n            hour = 0;\n         }\n      }\n   }\n   return *this;  // Return this instance by reference\n                  // \"this\" is a pointer to this instance. *this refers to this instance.\n}\n</code></pre> <p>C++ \u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u5173\u952e\u8bcd <code>this</code> \uff0c\u5b83\u5305\u542b\u6307\u5411\u6b64\u5b9e\u4f8b\u7684\u6307\u9488\u3002\u56e0\u6b64\uff0c <code>*this</code> \u6307\u7684\u662f\u6b64\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u901a\u8fc7\u5f15\u7528\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\uff0c\u5bf9\u5e94\u4e8e\u8fd4\u56de\u7c7b\u578b <code>Time &amp;</code> \u3002</p> <p>TestTime.cpp</p> <pre><code>Time t1(23, 59, 58);\nt1.print();     // 23:59:58\nt1.nextSecond();\nt1.print();     // 23:59:59\nt1.nextSecond().nextSecond().print();  // 00:00:01\nt1.print();     // 00:00:01\n</code></pre>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#exercise","title":"Exercise \u7ec3\u4e60","text":"<p>\u5c1d\u8bd5\u4fee\u6539 <code>setHour()</code> \u3001 <code>setMinute()</code> \u548c <code>setSecond()</code> \u4ee5\u652f\u6301\u5982 <code>aTime.setHour(22).setMinute(29).setSecond(20).print()</code> \u4e4b\u7c7b\u7684\u7ea7\u8054\u64cd\u4f5c\u3002</p>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#2-3-","title":"2. \u793a\u4f8b\uff1a\u65f6\u95f4\u7c7b\u7248\u672c 3 - \u5f02\u5e38\u5904\u7406","text":"<p>\u8f93\u5165\u9a8c\u8bc1\u662f\u5fc5\u8981\u7684\u3002\u4f8b\u5982\uff0c\u5728 <code>setHour(int h)</code> \u4e2d\uff0c\u6211\u4eec\u5e94\u8be5\u68c0\u67e5\u7ed9\u5b9a\u7684\u8f93\u5165 <code>h</code> \u662f\u5426\u5728 0 \u5230 23 \u4e4b\u95f4\u3002\u68c0\u67e5\u8f93\u5165\u5f88\u7b80\u5355\uff0c\u4f46\u5982\u679c\u8f93\u5165\u65e0\u6548\u8be5\u600e\u4e48\u529e\u5374\u5f88\u68d8\u624b\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u6253\u5370\u4e00\u6761\u9519\u8bef\u6d88\u606f\u5e76\u7a81\u7136\u7ec8\u6b62\u7a0b\u5e8f\uff08\u901a\u8fc7 <code>&lt;cstdlib&gt;</code> \u4e2d\u7684 <code>exit(1)</code> \uff09\uff1b\u6211\u4eec\u4e5f\u53ef\u4ee5\u6253\u5370\u4e00\u6761\u8b66\u544a\u6d88\u606f\uff0c\u5c06\u5c0f\u65f6\u8bbe\u7f6e\u4e3a 0\uff0c\u5e76\u7ee7\u7eed\u7a0b\u5e8f\uff0c\u4f46\u5c0f\u65f6\u503c\u53ef\u80fd\u5e76\u4e0d\u662f\u671f\u671b\u7684\u3002\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u4e0d\u592a\u7406\u60f3\u3002</p> <pre><code>void Time::setHour(int h) {\n   if (h &gt;= 0 &amp;&amp; h &lt;= 23) {\n      hour = h;\n   } else {\n      cout &lt;&lt; \"Error: Invalid hour! Hour shall be 0-23.\" &lt;&lt; endl;\n      exit(1);  // Terminate the program abruptly!!!\n   }\n}\n</code></pre> <pre><code>void Time::setHour(int h) {\n   if (h &gt;= 0 &amp;&amp; h &lt;= 23) {\n      hour = h;\n   } else {\n      cout &lt;&lt; \"Warning: Invalid hour! Hour shall be 0-23. Set to 0.\" &lt;&lt; endl;\n      hour = 0;  // Program continues with a hour value may or may not be desired?\n   }\n}\n</code></pre> <p>\u76f8\u53cd\uff0cC++ \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u673a\u5236\uff08\u5728\u5934\u6587\u4ef6 <code>&lt;stdexcept&gt;</code> \u4e2d\uff09\uff0c\u4ee5\u9002\u5f53\u4e14\u4f18\u96c5\u5730\u5904\u7406\u5f02\u5e38\u3002\u8ba9\u6211\u4eec\u4fee\u6539\u4ee3\u7801\uff0c\u4f7f\u7528 C++ \u5f02\u5e38\u5904\u7406\u673a\u5236\u8fdb\u884c\u8f93\u5165\u9a8c\u8bc1\u3002</p>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#timeh_1","title":"Time.h","text":"<pre><code>/* Header for the Time class (Time.h) */\n#ifndef TIME_H\n#define TIME_H\n\nclass Time {\nprivate:\n   int hour;     // 0 - 23\n   int minute;   // 0 - 59\n   int second;   // 0 - 59\n\npublic:\n   Time(int h = 0, int m = 0, int s = 0);\n   int getHour() const;\n   void setHour(int h);\n   int getMinute() const;\n   void setMinute(int m);\n   int getSecond() const;\n   void setSecond(int s);\n   void setTime(int h, int m, int s);\n   void print() const;\n};\n\n#endif\n</code></pre>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#timeh_2","title":"Time.h","text":"<pre><code>/* Implementation for the Time Class (Time.cpp) */\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;stdexcept&gt;    // Needed for exception handling\n#include \"Time.h\"\nusing namespace std;\n\nTime::Time(int h, int m, int s) {\n   // Call setters to perform input validation\n   setHour(h);\n   setMinute(m);\n   setSecond(s);\n}\n\nint Time::getHour() const {\n   return hour;\n}\n\nvoid Time::setHour(int h) {  // with input validation\n   if (h &gt;= 0 &amp;&amp; h &lt;= 23) {\n      hour = h;\n   } else {\n      throw invalid_argument(\"Invalid hour! Hour shall be 0-23.\");\n            // need &lt;stdexcept&gt;\n   }\n}\n\nint Time::getMinute() const {\n   return minute;\n}\n\nvoid Time::setMinute(int m) {\n   if (m &gt;= 0 &amp;&amp; m &lt;= 59) {\n      minute = m;\n   } else {\n      throw invalid_argument(\"Invalid minute! Minute shall be 0-59.\");\n            // need &lt;stdexcept&gt;\n   }\n}\n\nint Time::getSecond() const {\n   return second;\n}\n\nvoid Time::setSecond(int s) {\n   if (s &gt;= 0 &amp;&amp; s &lt;= 59) {\n      second = s;\n   } else {\n      throw invalid_argument(\"Invalid second! Second shall be 0-59.\");\n            // need &lt;stdexcept&gt;\n   }\n}\n\nvoid Time::setTime(int h, int m, int s) {\n   // Call setters to validate inputs\n   setHour(h);\n   setMinute(m);\n   setSecond(s);\n}\n\nvoid Time::print() const {\n   cout &lt;&lt; setfill('0');\n   cout &lt;&lt; setw(2) &lt;&lt; hour &lt;&lt; \":\" &lt;&lt; setw(2) &lt;&lt; minute &lt;&lt; \":\"\n        &lt;&lt; setw(2) &lt;&lt; second &lt;&lt; endl;\n}\n</code></pre> <p>Program Notes:</p> <pre><code>void Time::setHour(int h)\n   if (h &gt;= 0 &amp;&amp; h &lt;= 23) {\n      hour = h;\n   } else {\n      throw invalid_argument(\"Invalid hour! Hour shall be 0-23.\");\n   }\n}\n</code></pre> <p>\u6211\u4eec\u5c06\u901a\u8fc7 <code>setHour()</code> \u6210\u5458\u51fd\u6570\u6765\u8bf4\u660e\u8f93\u5165\u9a8c\u8bc1\u3002\u5982\u679c <code>h</code> \u662f\u4e00\u4e2a\u6709\u6548\u7684\u5c0f\u65f6\u6570\uff0c\u5b83\u4f1a\u5c06\u7ed9\u5b9a\u7684 <code>h</code> \u8d4b\u503c\u7ed9 <code>hour</code> \u3002\u5426\u5219\uff0c\u6211\u4eec\u4f7f\u7528 C++ \u5f02\u5e38\u5904\u7406\u673a\u5236\u629b\u51fa\u4e00\u4e2a\u7c7b\u578b\u4e3a <code>invalid_argument</code> \u7684\u5f02\u5e38\u5bf9\u8c61\uff08\u5728 <code>&lt;stdexcept&gt;</code> \u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\uff09\u3002\u8fd9\u5141\u8bb8\u8c03\u7528\u8005\u6355\u83b7\u5f02\u5e38\u5e76\u4f18\u96c5\u5730\u5904\u7406\u5f02\u5e38\u60c5\u51b5\uff08\u5c06\u5728\u540e\u7eed\u7684\u6d4b\u8bd5\u9a71\u52a8\u7a0b\u5e8f\u4e2d\u8fdb\u4e00\u6b65\u8bf4\u660e\uff09\u3002</p> <pre><code>Time::Time(int h, int m, int s) {\n   setHour(h);\n   setMinute(m);\n   setSecond(s);\n}\n</code></pre> <p>\u5728\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u8c03\u7528\u4e86 <code>setHour()</code> \u3001 <code>setMinute()</code> \u548c <code>setSecond()</code> \uff0c\u5b83\u4eec\u6267\u884c\u8f93\u5165\u9a8c\u8bc1\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u8d4b\u503c\u3002\u6211\u4eec\u8fd8\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u4fee\u6539\u4e86 <code>setTime()</code> \u3002</p>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#testtimecpp","title":"TestTime.cpp","text":"<pre><code>/* Test Driver for the Time class (TestTime.cpp) */\n#include &lt;iostream&gt;\n#include &lt;stdexcept&gt;  // Needed for exception handling\n#include \"Time.h\"\nusing namespace std;\n\nint main() {\n   //   Time t2(25, 0, 0); // program terminates abruptly\n   //   t2.print();        // The rest of program will not be run\n\n   // Graceful handling of exception\n   try {\n      Time t1(25, 0, 0); // Skip the remaining statements in try-clause and\n                         // jump to catch-clause if an exception is thrown\n      t1.print();\n         // Continue to the next statement after try-catch, if there is no exception\n   } catch (invalid_argument&amp; ex) {  // need &lt;stdexcept&gt;\n      cout &lt;&lt; \"Exception: \" &lt;&lt; ex.what() &lt;&lt; endl;\n         // Continue to the next statement after try-catch\n   }\n   cout &lt;&lt; \"Next statement after try-catch\" &lt;&lt; endl;\n}\n</code></pre> <p>Program Notes: \u7a0b\u5e8f\u8bf4\u660e\uff1a</p> <pre><code>Time t1(25, 0, 0); \n</code></pre> <p>\u5982\u679c\u4f60\u8fd0\u884c\u4e0a\u8ff0\u8bed\u53e5\uff08\u53d6\u6d88\u7b2c 8 \u884c\u548c\u7b2c 9 \u884c\u7684\u6ce8\u91ca\uff09\u800c\u4e0d\u6355\u83b7\u5f02\u5e38\uff0c\u7a0b\u5e8f\u4f1a\u7a81\u7136\u7ec8\u6b62\uff08\u5373\uff0c\u5269\u4f59\u7684\u8bed\u53e5\u5c06\u4e0d\u4f1a\u88ab\u6267\u884c\uff09\uff0c\u5e76\u663e\u793a\u4ee5\u4e0b\u9519\u8bef\u6d88\u606f\uff1a</p> <pre><code>terminate called after throwing an instance of 'std::invalid_argument'\n  what():  Invalid hour! Hour shall be 0-23.\n</code></pre> <pre><code>try {\n   Time t2(25, 0, 0);\n   t2.print();\n} catch (invalid_argument&amp; ex) {\n   cout &lt;&lt; \"Exception: \" &lt;&lt; ex.what() &lt;&lt; endl;\n}\n</code></pre> <p>\u7136\u800c\uff0c\u5982\u679c\u60a8\u50cf\u4e0a\u9762\u90a3\u6837\u5c06\u8bed\u53e5\u5305\u542b\u5728 try-catch \u7ed3\u6784\u4e2d\uff0c\u5f53 try \u5b50\u53e5\u4e2d\u7684\u67d0\u4e2a\u8bed\u53e5\u53d1\u751f\u5f02\u5e38\u65f6\uff0ctry \u5b50\u53e5\u4e2d\u7684\u5269\u4f59\u8bed\u53e5\u5c06\u88ab\u8df3\u8fc7\uff0c\u63a7\u5236\u6743\u8f6c\u79fb\u5230 catch \u5b50\u53e5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0ccatch \u5b50\u53e5\u4f1a\u6355\u83b7\u629b\u51fa\u7684 <code>invalid_argument</code> \u5f02\u5e38\uff0c\u6267\u884c catch \u4f53\u5185\u7684\u4ee3\u7801\u3002\u7136\u540e\u7a0b\u5e8f\u4f1a\u7ee7\u7eed\u6267\u884c try-catch \u4e4b\u540e\u7684\u4e0b\u4e00\u6761\u8bed\u53e5\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u60a8\u7684\u7a0b\u5e8f\u53ef\u4ee5\u4f18\u96c5\u5730\u5904\u7406\u5f02\u5e38\u60c5\u51b5\uff08\u4f8b\u5982\uff0c\u5173\u95ed\u6587\u4ef6\u548c\u8d44\u6e90\uff09\uff0c\u800c\u4e0d\u662f\u7a81\u7136\u7ec8\u6b62\u3002</p>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#3","title":"3. \u5bf9\u8c61\u5f15\u7528\u3001\u6307\u9488\u548c\u52a8\u6001\u5206\u914d\u6570\u7ec4\uff08\u9ad8\u7ea7\uff09","text":"<p>\u6211\u4eec\u5c06\u4f7f\u7528\u4e0a\u9762\u7684 <code>Time</code> \u7c7b\u6765\u6f14\u793a\u5bf9\u8c61\u6307\u9488\u3001\u5f15\u7528\u548c\u6570\u7ec4\uff0c\u4ee5\u53ca\u52a8\u6001\u5206\u914d\u3002</p> <pre><code>/* Test object pointer, reference and array (TestTimeObject.cpp) */\n#include &lt;iostream&gt;\n#include \"Time.h\"\nusing namespace std;\n\nint main() {\n   // Ordinary object\n   Time t1(1, 2, 3);\n   t1.print();  // 01:02:03\n\n   // Object pointer\n   Time* ptrT1 = &amp;t1;\n   (*ptrT1).print(); // 01:02:03\n   ptrT1-&gt;print();   // 01:02:03\n      // anObjectPtr-&gt;member is the same as (*anObjectPtr).member\n\n   // Object reference\n   Time&amp; refT1 = t1; // refT1 is an alias to t1\n   refT1.print();    // 01:02:03\n\n   // Dynamic allocation\n   Time* ptrT2 = new Time(4, 5, 6); // allocate dynamically\n   ptrT2-&gt;print(); // 04:05:06\n   delete ptrT2;   // deallocate\n\n   // Object Array\n   Time tArray1[2];    // tArray1 is an array of Time with 2 elements\n                       // Use default constructor for all elements\n   tArray1[0].print();  // 00:00:00\n   tArray1[1].print();  // 00:00:00\n\n   Time tArray2[2] = {Time(7, 8, 9), Time(10)}; // Invoke constructor\n   tArray2[0].print();  // 07:08:09\n   tArray2[1].print();  // 10:00:00\n\n   Time* ptrTArray3 = new Time[2]; // ptrTArray3 is a pointer to Time\n            // Dynamically allocate an array of Time with 2 elements via new[]\n   ptrTArray3[0].print();  // 00:00:00\n   ptrTArray3[1].print();  // 00:00:00\n   delete[] ptrTArray3;    // Deallocate dynamic array via delete[]\n\n   // C++11 syntax, compile with -std=c++0x\n   Time* ptrTArray4 = new Time[2] {Time(11, 12, 13), Time(14)}; // Invoke constructor\n   ptrTArray4-&gt;print();        // 11:12:13\n   (ptrTArray4 + 1)-&gt;print();  // 14:00:00\n   delete[] ptrTArray4;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#4-complex","title":"4. \u793a\u4f8b\uff1aComplex \u7c7b","text":"<p>\u4e00\u4e2a\u7c7b <code>Complex</code> \u6a21\u62df\u590d\u6570\u7684\u8bbe\u8ba1\u5982\u7c7b\u56fe\u6240\u793a\u3002\u5b83\u5305\u542b\uff1a</p> <ul> <li>\u4e24\u4e2a <code>private</code> \u6570\u636e\u6210\u5458\uff1a <code>real</code> \u548c <code>imag</code> \uff0c\u9ed8\u8ba4\u503c\u4e3a 0.0\u3002</li> <li>\u6784\u9020\u51fd\u6570\uff0c\u79c1\u6709\u6570\u636e\u6210\u5458\u7684\u516c\u5171 getter/setter\u3002</li> <li><code>setValue()</code> \u8bbe\u7f6e\u4e86 <code>real</code> \u548c <code>imag</code> \u3002</li> <li>\u4e00\u4e2a <code>public</code> \u6210\u5458\u51fd\u6570 <code>print()</code> \uff0c\u5b83\u4f1a\u6253\u5370 \"(real, imag)\"\u3002</li> <li><code>bool</code> \u6210\u5458\u51fd\u6570 <code>isReal()</code> \u548c <code>isImaginary()</code> \uff0c\u5206\u522b\u5728 <code>imag</code> \u4e3a 0 \u548c <code>real</code> \u4e3a 0 \u65f6\u8fd4\u56de true\u3002</li> <li><code>bool</code> \u6210\u5458\u51fd\u6570 <code>isReal()</code> \u548c <code>isImaginary()</code> \uff0c\u5206\u522b\u5728 <code>imag</code> \u4e3a 0 \u548c <code>real</code> \u4e3a 0 \u65f6\u8fd4\u56de true\u3002</li> <li><code>addReturnNew()</code> \uff0c\u5b83\u5c06\u7ed9\u5b9a\u7684\u590d\u6570\uff08\u901a\u8fc7\u5f15\u7528\uff09\u4e0e <code>this</code> \u5b9e\u4f8b\u76f8\u52a0\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 my complex \u5b9e\u4f8b\u3002 <code>this</code> \u5b9e\u4f8b\u4e0d\u5e94\u66f4\u6539\u3002</li> </ul>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#complexh","title":"Complex.h","text":"<pre><code>/* Header for the Complex class (Complex.h) */\n#ifndef COMPLEX_H\n#define COMPLEX_H\n\nclass Complex {\nprivate:\n   double real;\n   double imag;\n\npublic:\n   Complex(double real = 0.0, double imag = 0.0);\n   double getReal() const;\n   void setReal(double real);\n   double getImag() const;\n   void setImag(double imag);\n   void setValue(double real, double imag);\n   void print() const;\n   bool isReal() const;\n   bool isImaginary() const;\n   // Add the given Complex instance into this instance, and return this instance by reference\n   Complex &amp; addInto(const Complex &amp; another);\n   Complex &amp; addInto(double real, double imag);\n   // Add the given Complex instance and this instance, return the sum in a new instance by value\n   Complex addReturnNew(const Complex &amp; another) const;\n   Complex addReturnNew(double real, double imag) const;\n};\n\n#endif\n</code></pre>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#complexcpp","title":"Complex.cpp","text":"<pre><code>/* Implementation for the Complex Class (Complex.cpp) */\n#include &lt;iostream&gt;\n#include \"Complex.h\"\nusing namespace std;\n\nComplex::Complex(double real, double imag)\n   : real(real), imag(imag) { }\n\ndouble Complex::getReal() const {\n   return real;\n}\n\nvoid Complex::setReal(double real) {\n   this-&gt;real = real;\n}\n\ndouble Complex::getImag() const {\n   return imag;\n}\n\nvoid Complex::setImag(double imag) {\n   this-&gt;imag = imag;\n}\n\nvoid Complex::setValue(double real, double imag) {\n   this-&gt;real = real;\n   this-&gt;imag = imag;\n}\n\n// Print this Complex instance in the format of \"x + iy\"\nvoid Complex::print() const {\n   cout &lt;&lt; '(' &lt;&lt; real &lt;&lt; ',' &lt;&lt; imag &lt;&lt; ')' &lt;&lt; endl;\n}\n\nbool Complex::isReal() const {\n   return (imag == 0);\n}\n\nbool Complex::isImaginary() const {\n   return (real == 0);\n}\n\n// Add the given Complex instance into this instance and\n//  return a reference of this instance\nComplex &amp; Complex::addInto(const Complex &amp; another) {\n   real += another.real;\n   imag += another.imag;\n   return *this;\n}\n\nComplex &amp; Complex::addInto(double real, double imag) {\n   this-&gt;real += real;\n   this-&gt;imag += imag;\n   return *this;\n}\n\n// Add the given Complex instance and return the sum in a new instance by value\nComplex Complex::addReturnNew(const Complex &amp; another) const {\n   return Complex(real + another.real, imag + another.imag);\n}\n\nComplex Complex::addReturnNew(double real, double imag) const {\n   return Complex(this-&gt;real + real, this-&gt;imag + imag);\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#vs","title":"\u6309\u5f15\u7528\u8fd4\u56de vs. \u6309\u503c\u8fd4\u56de","text":"<p><code>addInto()</code> \u901a\u8fc7\u5f15\u7528\u8fd4\u56de\u6b64\u5b9e\u4f8b\uff08\u5df2\u5728 <code>main()</code> \u4e2d\u6784\u5efa\u5e76\u5b58\u5728\uff09\u3002</p> <p><code>addReturnNew()</code> \u6784\u9020\u4e00\u4e2a <code>Complex</code> \u7c7b\u7684\u4e34\u65f6\uff08\u5c40\u90e8\uff09\u5b9e\u4f8b\uff0c\u5e76\u5c06\u6b64\u4e34\u65f6\u5b9e\u4f8b\u4f5c\u4e3a\u8fd4\u56de\u503c\u4f20\u9012\u3002\u8c03\u7528\u8005\u63a5\u6536\u5e76\u5c06\u4e34\u65f6\u5b9e\u4f8b\u590d\u5236\u5230\u81ea\u5df1\u7684\u53d8\u91cf\u4e2d\uff0c\u901a\u8fc7\u9010\u6210\u5458\u8d4b\u503c\uff08\u5373\u6309\u503c\u8fd4\u56de\uff09\u3002\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u4e34\u65f6\u5c40\u90e8\u5b9e\u4f8b\u8d85\u51fa\u4f5c\u7528\u57df\u3002</p>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#testcomplexcpp","title":"TestComplex.cpp","text":"<pre><code>/* Test Driver for the Complex class (TestComplex.cpp) */\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include \"Complex.h\"\nusing namespace std;\n\nint main() {\n   Complex c1, c2(4, 5);\n   c1.print();  // (0,0)\n   c2.print();  // (4,5)\n\n   c1.setValue(6, 7);\n   c1.print();  // (6,7)\n\n   c1.setReal(0);\n   c1.setImag(8);\n   c1.print();  // (0,8)\n\n   cout &lt;&lt; boolalpha;  // print true/false instead of 0/1\n   cout &lt;&lt; \"Is real? \" &lt;&lt; c1.isReal() &lt;&lt; endl;           // false\n   cout &lt;&lt; \"Is Imaginary? \" &lt;&lt; c1.isImaginary() &lt;&lt; endl; // true\n\n   c1.addInto(c2).addInto(1, 1).print();  // (5,14)\n   c1.print();  // (5,14)\n\n   c1.addReturnNew(c2).print();   // (9,19)\n   c1.print();  // (5,14) - no change in c1\n   c1.addReturnNew(1, 1).print(); // (6,15)\n   c1.print();  // (5,14) - no change in c1\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#dont-return-a-reference-of-local-variable","title":"Don't Return a Reference of Local Variable \u4e0d\u8981\u8fd4\u56de\u5c40\u90e8\u53d8\u91cf\u7684\u5f15\u7528","text":"<p>\u5047\u8bbe\u6211\u4eec\u4fee\u6539 <code>addReturnNew()</code> \u4ee5\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>Complex &amp; Complex::addReturnNew(const Complex &amp; another) const {\n   return Complex(real + another.real, imag + another.imag);\n}\n</code></pre> <p>\u60a8\u5c06\u6536\u5230\u6b64\u7f16\u8bd1\u9519\u8bef\uff1a\u201c <code>invalid initialization of non-const reference of type 'Complex&amp;' from an rvalue of type 'Complex'</code> \u201d\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u51fd\u6570\u5185\u90e8\u6784\u9020\u7684\u4e34\u65f6\u5c40\u90e8\u53d8\u91cf\u4f1a\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u8d85\u51fa\u4f5c\u7528\u57df\u5e76\u505c\u6b62\u5b58\u5728\u3002\u8c03\u7528\u8005\u7684\u5f15\u7528\u53d8\u5f97\u65e0\u6548\u3002</p>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#5-date","title":"5. \u793a\u4f8b\uff1aDate \u7c7b","text":""},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#dateh","title":"Date.h","text":"<pre><code>/* Header for the Date class (Date.h) */\n#ifndef DATE_H\n#define DATE_H\n\n#include &lt;string&gt;\nusing namespace std;\n\nclass Date {\nprivate:\n   int year;    // 1753-9999\n   int month;   // 1-12\n   int day;     // 1-31\n   const static string STR_MONTHS[];\n   const static string STR_DAYS[];\n   const static int DAYS_IN_MONTHS[];\n   const static int YEAR_MIN = 1753;\n   const static int YEAR_MAX = 9999;\n\npublic:\n   static bool isLeapYear(int y);\n   static bool isValidDate(int y, int m, int d);\n   static int getDayOfWeek(int y, int m, int d);\n\n   Date(int y, int m, int d);\n   void setDate(int y, int m, int d);\n   int getYear() const;\n   int getMonth() const;\n   int getDay() const;\n   void setYear(int y);\n   void setMonth(int m);\n   void setDay(int d);\n   void print() const;\n\n   Date &amp; nextDay();\n   Date &amp; previousDay();\n   Date &amp; nextMonth();\n   Date &amp; previousMonth();\n   Date &amp; nextYear();\n   Date &amp; previousYear();\n};\n\n#endif\n</code></pre>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#datecpp","title":"Date.cpp","text":"<pre><code>/* Implementation for Date Class (Date.cpp) */\n#include &lt;iostream&gt;\n#include &lt;stdexcept&gt;\n#include \"Date.h\"\nusing namespace std;\n\n// Initialize static non-integer variable (must be done outside the class declaration)\nconst string Date::STR_MONTHS[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                                   \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n\nconst int Date::DAYS_IN_MONTHS[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\nconst string Date::STR_DAYS[] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n                                 \"Thursday\", \"Friday\", \"Saturday\"};\n\n// A static function that returns true if the given year is a leap year\nbool Date::isLeapYear(int year) {\n   return ((year % 4 == 0 &amp;&amp; year % 100 != 0) || (year % 400 == 0));\n}\n\n// A static function that returns true if the given y, m, d constitutes a valid date\nbool Date::isValidDate(int y, int m, int d) {\n   if (y &gt;= YEAR_MIN &amp;&amp; y &lt;= YEAR_MAX &amp;&amp; m &gt;= 1 &amp;&amp; m &lt;= 12) {\n      int lastDayOfMonth = DAYS_IN_MONTHS[m-1];\n      if (m == 2 &amp;&amp; isLeapYear(y)) {\n         lastDayOfMonth = 29;\n      }\n      return (d &gt;= 1 &amp;&amp; d &lt;= lastDayOfMonth);\n   } else {\n      return false;\n   }\n}\n\n// A static function that returns the day of the week (0:Sun, 6:Sat) for the given date\n// Wiki \"Determination of the day of the week\" for the algorithm\nint Date::getDayOfWeek(int y, int m, int d) {\n   int centuryTable[] = {4, 2, 0, 6, 4, 2, 0, 6}; // 17xx, 18xx, ...\n   int MonthTable[] = {0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5};\n   int MonthLeapYearTable[] = {6, 2, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5};\n\n   int century = y / 100;\n   int twoDigitYear = y % 100;\n   int centuryTableIndex = (century - 17) % 8;\n   // Date before 17xx are not valid, but needed to prevent negative index\n   if (centuryTableIndex &lt; 0) {\n      centuryTableIndex += 8;\n   }\n   int sum = centuryTable[centuryTableIndex] + twoDigitYear + twoDigitYear / 4;\n   if (isLeapYear(y)) {\n      sum += MonthLeapYearTable[m-1];\n   } else {\n      sum += MonthTable[m-1];\n   }\n   sum += d;\n   return sum % 7;\n}\n\n// Constructor\nDate::Date(int y, int m, int d) {\n   setDate(y, m, d);\n}\n\n// With Input validation\nvoid Date::setDate(int y, int m, int d) {\n   setYear(y);\n   setMonth(m);\n   setDay(d); // need to set the day after year and month\n}\n\nint Date::getYear() const {\n   return year;\n}\n\nvoid Date::setYear(int y) {\n   if (y &gt;= YEAR_MIN &amp;&amp; y &lt;= YEAR_MAX) {\n      year = y;\n   } else {\n      throw invalid_argument(\"Error: Invalid year (1753-9999)!\");\n   }\n}\n\nint Date::getMonth() const {\n   return month;\n}\n\nvoid Date::setMonth(int m) {\n   if (m &gt;= 1 &amp;&amp; m &lt;= 12) {\n      month = m;\n   } else {\n      throw invalid_argument(\"Error: Invalid month (1-12)!\");\n   }\n}\n\nint Date::getDay() const {\n   return day;\n}\n\n// Assuming that the year and month are already set\nvoid Date::setDay(int d) {\n   int lastDayOfMonth = DAYS_IN_MONTHS[month-1];\n   if (month == 2 &amp;&amp; isLeapYear(year)) {\n      lastDayOfMonth = 29;\n   }\n   if (d &gt;= 1 &amp;&amp; d &lt;= lastDayOfMonth) {\n      day = d;\n   } else {\n      throw invalid_argument(\"Error: Invalid day (1-28|29|30|31)!\");\n   }\n}\n\n// Print this instance in the format \"xxxday, d mmm yyyy\".\nvoid Date::print() const {\n   cout &lt;&lt; STR_DAYS[getDayOfWeek(year, month, day)] &lt;&lt; \", \"\n        &lt;&lt; day &lt;&lt; \" \" &lt;&lt; STR_MONTHS[month-1] &lt;&lt; \" \" &lt;&lt; year &lt;&lt; endl;\n}\n\n// Increment this instance to the next day and return this instance by reference\nDate&amp; Date::nextDay() {\n   int lastDayOfMonth = DAYS_IN_MONTHS[month-1];\n   if (month == 2 &amp;&amp; isLeapYear(year)) {\n      lastDayOfMonth = 29;\n   }\n\n   // check day against the end of month\n   if (++day &gt; lastDayOfMonth) {\n      day = 1;\n      if (++month &gt; 12) {\n         month = 1;\n         if (++year &gt; YEAR_MAX) {\n            throw out_of_range(\"Error: Next day is out of range!\");\n         }\n      }\n   }\n   return *this;\n}\n\n// Decrement this instance to the previous day and return this instance by reference\nDate&amp; Date::previousDay() {\n   int lastDayOfMonth = DAYS_IN_MONTHS[month-1];\n   if (month == 2 &amp;&amp; isLeapYear(year)) {\n      lastDayOfMonth = 29;\n   }\n\n   // check day against the end of month\n   if (--day &lt; 1) {\n      day = lastDayOfMonth;\n      if (--month &lt; 1) {\n         month = 12;\n         if (--year &lt; YEAR_MIN) {\n            throw out_of_range(\"Error: Previous day is out of range!\");\n         }\n      }\n   }\n   return *this;\n}\n\n// Increment this instance to the next month and return this instance by reference\nDate&amp; Date::nextMonth() {\n   if (++month &gt; 12) {\n      month = 1;\n      if (++year &gt; YEAR_MAX) {\n         throw out_of_range(\"Error: Next month is out of range!\");\n      }\n   }\n   // may need to adjust the last day of the month\n   int lastDayOfMonth = DAYS_IN_MONTHS[month-1];\n   if (month == 2 &amp;&amp; isLeapYear(year)) {\n      lastDayOfMonth = 29;\n   }\n   if (day &gt; lastDayOfMonth) {\n      day = lastDayOfMonth;\n   }\n   return *this;\n}\n\n// Decrement this instance to the previous month and return this instance by reference\nDate&amp; Date::previousMonth() {\n   if (--month &lt; 1) {\n      month = 12;\n      if (--year &lt; YEAR_MIN) {\n         throw out_of_range(\"Error: Previous month is out of range!\");\n      }\n   }\n   // may need to adjust the last day of the month\n   int lastDayOfMonth = DAYS_IN_MONTHS[month-1];\n   if (month == 2 &amp;&amp; isLeapYear(year)) {\n      lastDayOfMonth = 29;\n   }\n   if (day &gt; lastDayOfMonth) {\n      day = lastDayOfMonth;\n   }\n   return *this;\n}\n\n// Increment this instance to the next year and return this instance by reference\nDate&amp; Date::nextYear() {\n   if (++year &gt; YEAR_MAX) {\n      throw out_of_range(\"Error: Next year is out of range!\");\n   }\n   // may need to adjust the last day of the month for leap year (29 Feb)\n   //  to non-leap year (28 Feb)\n   if (month == 2 &amp;&amp; day == 29 &amp;&amp; !isLeapYear(year)) {\n      day = 28;\n   }\n   return *this;\n}\n\n// Decrement this instance to the previous year and return this instance by reference\nDate&amp; Date::previousYear() {\n   if (--year &lt; YEAR_MIN) {\n      throw out_of_range(\"Error: Previous year is out of range!\");\n   }\n   // may need to adjust the last day of the month for leap year (29 Feb)\n   //  to non-leap year (28 Feb)\n   if (month == 2 &amp;&amp; day == 29 &amp;&amp; !isLeapYear(year)) {\n      day = 28;\n   }\n   return *this;\n}\n</code></pre>"},{"location":"DEV/Programming/Cpp/05%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B/#testdatecpp","title":"TestDate.cpp","text":"<pre><code>/* Test Driver Program (TestDate.cpp) */\n#include &lt;iostream&gt;\n#include &lt;stdexcept&gt;\n#include \"Date.h\"\n\nint main() {\n   Date d1(2012, 1, 1);\n   d1.print();  // Sunday, 1 Jan 2012\n   d1.nextDay().print();  // Monday, 2 Jan 2012\n   d1.print();  // Monday, 2 Jan 2012\n\n   d1.setDate(2012, 1, 31);\n   d1.print();  // Tuesday, 31 Jan 2012\n   d1.nextDay().print();  // Wednesday, 1 Feb 2012\n\n   d1.setDate(2012, 2, 28);\n   d1.print();  // Tuesday, 28 Feb 2012\n   d1.nextDay().print();  // Wednesday, 29 Feb 2012\n\n   d1.setDate(2012, 12, 31);\n   d1.print();  // Monday, 31 Dec 2012\n   d1.nextDay().print();  // Tuesday, 1 Jan 2013\n\n//   Date d2(2011, 2, 29);  // abrupt termination!\n//   d2.print();\n\n   try {  // graceful handling of exception\n      Date d3(2011, 2, 29);\n      d3.print();\n   } catch (invalid_argument &amp;ex) {\n      cout &lt;&lt; ex.what() &lt;&lt; endl;  // Error: Invalid day (1-28|29|30|31)!\n   }\n   cout &lt;&lt; \"Next Statement after try-catch\" &lt;&lt; endl;\n\n   try {  // graceful handling of exception\n      Date d4(9999, 12, 30);\n      d4.nextDay().print(); // Friday, 31 Dec 9999\n      d4.nextDay();\n      d4.print();\n   } catch (out_of_range &amp;ex) {\n      cout &lt;&lt; ex.what() &lt;&lt; endl;  // Error: Next day is outside the valid range!\n   }\n\n   Date d5(2012, 1, 1);\n   d5.previousDay().print();  // Saturday, 31 Dec 2011\n\n   Date d6(2012, 3, 31);\n   d6.nextMonth().print();  // Monday, 30 Apr 2012\n\n   Date d7(2012, 3, 31);\n   d7.previousMonth().print();  // Wednesday, 29 Feb 2012\n\n   Date d8(2012, 2, 29);\n   d8.nextYear().print(); // Thursday, 28 Feb 2013\n\n   Date d9(2012, 2, 29);\n   d9.previousYear().print();  // Monday, 28 Feb 2011\n}\n</code></pre>"},{"location":"ESSAY/","title":"\u968f\u7b14","text":"<p>\u70b9\u51fb\u5de6\u4fa7\u76ee\u5f55\u6253\u5f00\u6587\u7ae0</p>"},{"location":"ESSAY/202504/","title":"LambShaun\u7684\u968f\u7b14\u8bb0","text":""},{"location":"ESSAY/202504/#20254","title":"2025\u5e744\u6708\u7684\u968f\u7b14\u8bb0","text":""},{"location":"ESSAY/202504/#20250428","title":"20250428","text":"<p>\u4e0d\u6653\u5f97\u624b\u91cc\u7684mac\u83ab\u540d\u7684\u53d1\u70ed\uff0c\u660e\u660e\u6ca1\u6709\u5e72\u4ec0\u4e48\u3002</p> <p>\u96be\u9053\u662f\u4eba\u6362\u4e86\u5730\u65b9\uff1f\u6c14\u6e29\u95ee\u9898\uff1f</p> <p>\u4e0a\u6d77\u548c\u5357\u4eac\u4e5f\u6ca1\u6709\u5565\u592a\u5927\u533a\u522b\uff0c\u53c8\u4e0d\u662f\u53bb\u4e86\u5e7f\u4e1c\u54ea\u54ea\u3002</p>"},{"location":"ESSAY/202504/#20250419","title":"20250419","text":"<p>\u7ed9\u7f51\u7ad9\u589e\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u529f\u80fd\u3002\u770b\u8d77\u6765\u66f4\u5b8c\u5584\u4e86\u4e9b\u3002</p> <p>\u7531\u4e8e\u5728\u5b66\u4e60\u7eaf<code>WINAPI</code>\u4e0d\u7528\u522b\u7684\u5e93\u53bb\u505a\u4e2a\u5f15\u64ce\u5427\uff0c\u6253\u5f00\u4e86\u5c18\u5c01\u7684pc\u3002 \u6211\u5c31\u5728\u5bfb\u627e\u81ea\u5df1\u5e38\u7528\u7684\u8f6f\u4ef6\u6709\u6ca1\u6709Windows\u7248\u7684\uff0c\u627e\u6765\u627e\u53bb\u4e5f\u6ca1\u627e\u5230\u4e2a\u597d\u7528\u7684\u5e94\u7528\u542f\u52a8\u8f6f\u4ef6\u3002</p> <p>\u867d\u8bf4win\u4e0a\u6709\u5fae\u8f6f\u81ea\u5df1\u5f00\u53d1\u7684Power Toys\u3002\u4f46\u662f\u771f\u7684\u96c6\u6210\u4e86\u597d\u4e00\u4e9b\u6211\u7528\u4e0d\u5230\u7684\u529f\u80fd\u3002\u7136\u540e\u5360\u7684\u5185\u5b58\u4e5f\u5f88\u5927\u5f88\u5927\u3002</p> <p>\u6240\u4ee5\u6211\u5c31\u5728\u627e\u4e00\u4e2a\u5360\u7528\u5c0f\u800c\u4e14\u597d\u7528\u7684\u8f6f\u4ef6\u3002 \u4e0b\u9762\u5206\u4eab\u4e00\u4e2a\u65b0\u7684\u8f6f\u4ef6\u3002</p> <p><code>Keypirinha</code> :\u5728Windows\u4e0a\u4f7f\u7528\u7684\u5feb\u901f\u542f\u52a8\u5668\u548c\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u5668\u3002\u7c7b\u4f3c\u4e8emac\u72ec\u5360\u7684Alfred\u3002</p> <p>\u5c0f\u800c\u7f8e\uff0c\u5185\u5b58\u5360\u7528\u6781\u5c11\uff0c\u88c5\u4e86\u63d2\u4ef6\u4e5f\u5c3130MB\u5de6\u53f3\u3002</p>"},{"location":"ESSAY/202504/#20250414","title":"20250414","text":"<p>\u7b2c\u4e00\u6b21\u5236\u4f5c\u4e86\u4e2a\u4eba\u7f51\u7ad9\uff0c\u672c\u6765\u60f3\u7740\u662f\u7528\u670d\u52a1\u5668\u6765\u7684\uff0c\u670d\u52a1\u5668\u4e5f\u662f\u6709\u7684\u3002</p> <p>\u7a81\u7136\u770b\u5230GitHub\u4e0a\u53ef\u4ee5\u7528Github Pages\u7684\u5f62\u5f0f\u6765\u521b\u5efa\u7f51\u7ad9\u3002 \u52a8\u624b\u5c1d\u8bd5\u4e86\u4e0b\uff0c\u5c31\u662f\u5f53\u524d\u7684\u6548\u679c\u4e86\u3002</p> <p>\u4e0d\u7528\u5907\u6848\uff0c\u5f88\u65b9\u4fbf\u5c31\u80fd\u8bbf\u95ee\u3002\u6211\u89c9\u5f97\u53ef\u4ee5\u628a\u81ea\u5df1\u7684\u4e00\u4e9b\u7b14\u8bb0\u554a\uff0c\u6258\u7ba1\u5230\u4e0a\u9762\u3002</p> <p>\u5c31\u5148\u8fd9\u6837\uff0c\u5f80\u540e\u6162\u6162\u6765\u561b\u3002</p>"},{"location":"ESSAY/202505/","title":"2025\u5e745\u6708\u968f\u7b14\u8bb0","text":""},{"location":"ESSAY/202505/#20250506","title":"20250506","text":"<p>\u600e\u4e48\u8bf4\u8fd9\u6b21\u7684\u65c5\u7a0b\u5462\uff0c\u4f4f\u5728\u4e86\u822a\u7ebf\u4e0b\u9762\u3002 \u9664\u4e865.1\u5f53\u5929\u6e05\u9759\u4e9b\uff0c\u5176\u4ed6\u65f6\u5019\u771f\u7684\u8f70\u9686\u9686\u3002</p> <p>\u597d\u5904\uff1a\u62ac\u5934\u80fd\u770b\u5230\u98de\u673a\uff0c\u751a\u81f3\u989c\u8272\u90fd\u53ef\u4ee5\u770b\u5230\u3002</p> <p>\u574f\u5904\uff1a\u90a3\u662f\u771f\u7684\u5435\u5435\u7684\u3002</p> <p>\u8ba4\u8bc6\u4e86\u65b0\u7684\u670b\u53cb\uff0c\u603b\u5f97\u6765\u8bf4\u65c5\u9014\u8fd8\u4e0d\u9519\u3002</p>"},{"location":"ME/about/","title":"\u6211","text":"<p>\u70b9\u51fb\u5de6\u4fa7\u76ee\u5f55\u6253\u5f00\u6587\u7ae0</p>"},{"location":"ME/contact/","title":"\u4e2a\u4eba\u8054\u7cfb\u65b9\u5f0f","text":"<ul> <li> <p>2941798250@qq.com</p> </li> <li> <p>QQ :2941798250</p> </li> </ul>"},{"location":"ME/description/","title":"\u4e2a\u4eba\u7279\u70b9","text":"<ul> <li>\u6709\u8f83\u5f3a\u7684 \u5b66\u4e60\u94bb\u7814\u80fd\u529b \u5bf9\u524d\u6cbf\u6280\u672f\u611f\u5174\u8da3</li> <li>\u6709\u826f\u597d\u7684 \u52a8\u624b\u80fd\u529b \u559c\u6b22\u5de5\u7a0b\u5b9e\u8df5 \u8bd5\u9519\u80fd\u529b\u8f83\u9ad8</li> <li>\u70ed\u7231\u751f\u6d3b \u6027\u683c\u4e50\u89c2 \u64c5\u957f\u601d\u8003 </li> </ul>"},{"location":"ME/description/#_2","title":"\u6982\u8ff0","text":"<p>\u6211\u6709\u8f83\u5f3a\u7684\u5b66\u4e60\u94bb\u7814\u80fd\u529b\uff0c\u5bf9\u524d\u6cbf\u7684\u6280\u672f\u5f88\u611f\u5174\u8da3\u3002\u6211\u5728\u5b66\u4e60\u7535\u5b50\u7cfb\u8bfe\u5185\u77e5\u8bc6\u7684\u540c\u65f6\uff0c\u6211\u4e5f\u81ea\u5b66\u4e86\u5f88\u591a\u8ba1\u7b97\u673a\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u6211\u5bf9\u7535\u5b50\u4ea7\u54c1\u3001\u7269\u8054\u7f51\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u4e92\u8054\u7f51\u7b49\u9886\u57df\u7684\u521b\u65b0\u5f88\u611f\u5174\u8da3\u3002</p> <p>\u6211\u6709\u826f\u597d\u7684\u52a8\u624b\u80fd\u529b\uff0c\u559c\u6b22\u5de5\u7a0b\u5b9e\u8df5\uff0c\u8bd5\u9519\u80fd\u529b\u8f83\u9ad8\u3002\u5b9e\u9645\u52a8\u624b\u53bb\u8bbe\u8ba1\u4ea7\u54c1\uff0c\u6211\u5f88\u4eab\u53d7\u4e00\u4e2a\u60f3\u6cd5\u5b9e\u73b0\u7684\u8fc7\u7a0b\u3002</p> <p>\u6b64\u5916\uff0c\u6211\u70ed\u7231\u751f\u6d3b\uff0c\u6027\u683c\u4e50\u89c2\uff0c\u64c5\u957f\u601d\u8003\uff0c\u559c\u6b22\u5206\u4eab\u77e5\u8bc6\u3002\u6211\u5e0c\u671b\u53ef\u4ee5\u5728\u6211\u7684\u4e2a\u4eba\u7f51\u9875\uff0c\u521b\u5efa\u77e5\u8bc6\u677f\u5757\uff0c\u5e0c\u671b\u53ef\u4ee5\u5e2e\u52a9\u5230\u4e00\u4e9b\u540c\u5b66\u3002\u5728\u95f2\u6687\u65f6\u95f4\uff0c\u6211\u4e5f\u4f1a\u653e\u7a7a\u601d\u8003\uff0c\u5199\u4e00\u4e9b\u6587\u7ae0\u3002</p>"},{"location":"ME/introduction/","title":"\u4e2a\u4eba\u4ecb\u7ecd","text":"<p>\u66f4\u65b0\u4e8e 2025.04.14</p> <ul> <li>\u59d3\u540d\uff1a\u9648\u5cf0</li> <li>\u6027\u522b\uff1a\u7537</li> </ul> <p>\u70b9\u51fb\u67e5\u770b\u66f4\u591a\u4fe1\u606f</p>"},{"location":"ME/introduction/#_2","title":"\u8054\u7cfb\u65b9\u5f0f","text":"<ul> <li>\u90ae\u7bb1\uff1aLinksff03@gamil.com</li> </ul> <p>\u70b9\u51fb\u67e5\u770b\u66f4\u591a\u4fe1\u606f</p>"},{"location":"ME/introduction/#_3","title":"\u516c\u4f17\u8d26\u53f7","text":"<ul> <li>GitHub</li> <li>Bilibili</li> </ul>"},{"location":"ME/introduction/#_4","title":"\u4e2a\u4eba\u7279\u70b9","text":"<ul> <li>\u6709\u8f83\u5f3a\u7684 \u5b66\u4e60\u94bb\u7814\u80fd\u529b \u5bf9\u524d\u6cbf\u6280\u672f\u611f\u5174\u8da3</li> <li>\u6709\u826f\u597d\u7684 \u52a8\u624b\u80fd\u529b \u559c\u6b22\u5de5\u7a0b\u5b9e\u8df5 \u8bd5\u9519\u80fd\u529b\u8f83\u9ad8</li> <li>\u70ed\u7231\u751f\u6d3b \u6027\u683c\u4e50\u89c2 \u64c5\u957f\u601d\u8003 </li> </ul> <p>\u70b9\u51fb\u67e5\u770b\u66f4\u591a</p>"},{"location":"ME/profile/","title":"\u4e2a\u4eba\u4fe1\u606f","text":"<ul> <li>\u59d3\u540d\uff1a\u9648\u5cf0</li> <li>\u6027\u522b\uff1a\u7537</li> <li>\u751f\u65e5\uff1a1222</li> </ul>"},{"location":"ME/profile/#_2","title":"\u59d3\u540d","text":""},{"location":"ME/profile/#_3","title":"\u9648\u5cf0","text":"<p>\u300c\u9648\u5cf0\u300d\u662f\u6211\u7684\u771f\u540d\uff0c\u6211\u81ea\u5df1\u6539\u7684\u3002\u5728\u8fd9\u4e2a\u4e0d\u6ce8\u91cd\u4fe1\u606f\u5b89\u5168\u7684\u56fd\u5bb6\uff0c\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u6765\u8bb2\u5f88\u5bb9\u6613\u5f97\u5230\u4e2a\u4eba\u4fe1\u606f\u3002</p> <p>\u300cLambShaun\u300d\u6211\u5404\u4e2a\u5e73\u53f0\u7684\u7528\u6237\u540d\u3002\u60f3\u8d77\u6765\u5c0f\u65f6\u5019\u770b\u7684\u52a8\u753b\u7247\u53eb\u5c0f\u7f8a\u8096\u6069\uff0c\u4e8e\u662f\u8d77\u4e86\u4e2a\u82f1\u6587\u76f4\u8bd1\u7684\u540d\u5b57\u3002\u6211\u4e2a\u4eba\u5f88\u559c\u6b22\u3002</p>"},{"location":"REPRINT/","title":"\u8f6c\u8f7d","text":"<p>\u70b9\u51fb\u5de6\u4fa7\u76ee\u5f55\u6253\u5f00\u6587\u7ae0</p>"},{"location":"RESEARCH/","title":"\u7814\u7a76","text":"<p>\u70b9\u51fb\u5de6\u4fa7\u76ee\u5f55\u6253\u5f00\u6587\u7ae0</p>"},{"location":"RESEARCH/Apps/Keypirinha/","title":"Keypirinha","text":"<p>Keypirinha\u662f\u4e00\u4e2a\u5feb\u901f\u542f\u52a8\u5668\u548c\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u5668\uff0c\u7c7b\u4f3c\u4e8eAlfred\u3001LaunchBar\u548cQuicksilver\u7b49\u5de5\u5177\u3002 \u5b83\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u952e\u76d8\u5feb\u6377\u952e\u5feb\u901f\u8bbf\u95ee\u6587\u4ef6\u3001\u6587\u4ef6\u5939\u3001\u5e94\u7528\u7a0b\u5e8f\u548c\u5176\u4ed6\u8d44\u6e90\u3002 Keypirinha\u5177\u6709\u9ad8\u5ea6\u7684\u53ef\u5b9a\u5236\u6027\u548c\u6269\u5c55\u6027\uff0c\u652f\u6301\u63d2\u4ef6\u548c\u811a\u672c\uff0c\u53ef\u4ee5\u6839\u636e\u7528\u6237\u7684\u9700\u6c42\u8fdb\u884c\u4e2a\u6027\u5316\u8bbe\u7f6e\u3002</p> <p>\u6700\u91cd\u8981\u7684\uff1a\u5360\u7528\u8d44\u6e90\u6781\u5c11\uff0c\u4e0d\u88c5\u63d2\u4ef6\u60c5\u51b5\u4e0b\uff0c\u5185\u5b58\u5360\u752830MB\u5de6\u53f3\u3002\u88c5\u4e86\u63d2\u4ef6\u4e5f\u5c3140MB\u5de6\u53f3\u3002 \u5c0f\u800c\u7f8e\u3002</p>"},{"location":"RESEARCH/Apps/Keypirinha/#_1","title":"\u5b89\u88c5","text":"<ul> <li>\u4ec5windows</li> </ul> <p>\u4e0b\u8f7dKeypirinha\u7684\u6700\u65b064\u4f4d\u7248\u672c</p> <p>\u89e3\u538b\u5230\u4efb\u610f\u76ee\u5f55</p>"},{"location":"RESEARCH/Apps/Keypirinha/#_2","title":"\u542f\u52a8","text":"<p>\u53cc\u51fb<code>Keypirinha.exe</code>\uff0c\u4f1a\u5728\u53f3\u4e0b\u89d2\u7684\u6258\u76d8\u533a\u663e\u793a\u4e00\u4e2a\u56fe\u6807</p> <p>\u9ed8\u8ba4\u5feb\u6377\u952e<code>Ctrl + Win + K</code>\uff0c\u53ef\u4ee5\u6253\u5f00Keypirinha\u7684\u641c\u7d22\u6846</p>"},{"location":"RESEARCH/Apps/Keypirinha/#_3","title":"\u4fee\u6539\u914d\u7f6e\u6587\u4ef6","text":"<p>\u7531\u4e8e\u6211\u662f\u5728Mac\u4e0a\u7528\u7684\u662fAlfred\uff0c\u6240\u4ee5\u6211\u4e60\u60ef\u4e86<code>Cmd + Space</code>\uff0c\u6240\u4ee5\u6211\u628a\u5feb\u6377\u952e\u6539\u6210\u4e86<code>Ctrl + Space</code></p> <p>\u5728\u53f3\u4e0b\u89d2\u7cfb\u7edf\u6258\u76d8\u533a\u53f3\u952e\u70b9\u51fbKeypirinha\u56fe\u6807\uff0c\u9009\u62e9<code>Configuration</code>\uff0c\u6253\u5f00\u914d\u7f6e\u6587\u4ef6</p> <p>\u7b2c\u4e00\u6b21\u6253\u5f00\u4f1a\u51fa\u73b0\u4fe9\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u5de6\u4fa7\u662f\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\uff0c\u53f3\u4fa7\u662f\u7528\u6237\u914d\u7f6e\u6587\u4ef6\u3002</p> <p>\u6211\u4eec\u5728\u53f3\u4fa7\u7684\u7528\u6237\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u4fee\u6539\uff0c\u5de6\u4fa7\u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4e0d\u8981\u52a8\u3002</p> <p></p> <p>\u6211\u4eec\u5728\u53f3\u4fa7\u914d\u7f6e\u6587\u4ef6\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a <pre><code>[app]\nlaunch_at_startup = yes //\u968f\u7cfb\u7edf\u542f\u52a8\n\nhotkey_run = Alt+Space  //\u4fee\u6539\u542f\u52a8\u5feb\u6377\u952e\n\nwrite_log_file = no     //\u662f\u5426\u5199\u5165\u65e5\u5fd7\u6587\u4ef6\u3002\u5220\u6389\u8fd9\u4e2a\uff0c\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u662fyes\n\nexclude_nonexistent_remote_files = yes //\u81ea\u52a8\u4ece\u641c\u7d22\u7ed3\u679c\u4e2d\u8fc7\u6ee4\u6389\u5df2\u7ecf\u4e0d\u5b58\u5728\u7684\u8fdc\u7a0b\u6587\u4ef6\n\n[gui]\n\ntheme = MediumLayout    //\u4e3b\u9898\u4e2d\u53f7\uff0c\u53bb\u6389\u4e0a\u9762\u5f88\u5927\u7684Keypirinha\u56fe\u6807\n\nhide_on_focus_lost = delayed //\u5931\u53bb\u7126\u70b9\u540e\u5ef6\u8fdf\u9690\u85cf\n</code></pre> \u4fdd\u5b58\u540e\uff0c\u53f3\u952e\u70b9\u51fb\u6258\u76d8\u533a\u7684Keypirinha\u56fe\u6807\uff0c\u9009\u62e9<code>Reload Configuration</code>\uff0c\u4f7f\u914d\u7f6e\u751f\u6548\u3002</p>"},{"location":"RESEARCH/Apps/Keypirinha/#keypirinhaini","title":"Keypirinha.ini \u6587\u4ef6\u89e3\u91ca","text":""},{"location":"RESEARCH/Apps/Keypirinha/#1-app","title":"1. \u5e94\u7528\u6838\u5fc3 ([app])","text":"<p>\u5f00\u673a\u542f\u52a8<code>launch_at_startup</code>: \u662f\u5426\u5728 Windows \u542f\u52a8\u65f6\u81ea\u52a8\u8fd0\u884c\u3002</p> <p>\u4e3b\u542f\u52a8\u70ed\u952e<code>hotkey_run</code>: \u8bbe\u7f6e\u7528\u4e8e\u663e\u793a/\u9690\u85cf\u641c\u7d22\u4e3b\u7a97\u53e3\u7684\u70ed\u952e\u3002</p> <p>\u7c98\u8d34\u70ed\u952e<code>hotkey_paste</code>: \u8bbe\u7f6e\u4e00\u4e2a\u70ed\u952e\uff0c\u7528\u4e8e\u6253\u5f00\u5e76\u81ea\u52a8\u7c98\u8d34\u526a\u8d34\u677f\u4e2d\u7684\u6587\u672c\u5185\u5bb9\u3002</p> <p>\u5386\u53f2\u8bb0\u5f55\u70ed\u952e<code>hotkey_history</code>: \u8bbe\u7f6e\u4e00\u4e2a\u70ed\u952e\uff0c\u7528\u4e8e\u76f4\u63a5\u4ee5\u5386\u53f2\u8bb0\u5f55\u6a21\u5f0f\u6253\u5f00 Keypirinha\u3002</p> <p>\u63a7\u5236\u53f0\u70ed\u952e<code>hotkey_console</code>: \u8bbe\u7f6e\u7528\u4e8e\u663e\u793a/\u9690\u85cf Keypirinha \u5f00\u53d1\u8005\u63a7\u5236\u53f0\u7684\u70ed\u952e\u3002</p> <p>\u65e5\u5fd7\u8bb0\u5f55<code>write_log_file</code>: \u662f\u5426\u5c06\u8fd0\u884c\u65e5\u5fd7\u5199\u5165\u6587\u4ef6\uff08\u65b9\u4fbf\u6392\u67e5\u95ee\u9898\uff09\u3002</p> <p>\u5ffd\u7565\u7684\u5305<code>ignored_packages</code>: \u53ef\u4ee5\u6307\u5b9a\u7981\u7528\u67d0\u4e9b\u63d2\u4ef6\uff08Packages\uff09\u3002</p> <p>\u7ed3\u679c\u8fc7\u6ee4:</p> <p><code>exclude_nonexistent_local_files</code>: \u81ea\u52a8\u4ece\u641c\u7d22\u7ed3\u679c\u4e2d\u8fc7\u6ee4\u6389\u5df2\u7ecf\u4e0d\u5b58\u5728\u7684\u672c\u5730\u6587\u4ef6\u3002</p> <p><code>exclude_nonexistent_remote_files</code>: \u81ea\u52a8\u4ece\u641c\u7d22\u7ed3\u679c\u4e2d\u8fc7\u6ee4\u6389\u5df2\u7ecf\u4e0d\u5b58\u5728\u7684\u8fdc\u7a0b\u6587\u4ef6\u3002</p>"},{"location":"RESEARCH/Apps/Keypirinha/#2-gui","title":"2. \u56fe\u5f62\u754c\u9762 ([gui])","text":"<p>\u7a97\u53e3\u4f4d\u7f6e\u4e0e\u5927\u5c0f<code>geometry, auto_width</code>: \u63a7\u5236\u4e3b\u7a97\u53e3\u5982\u4f55\u5b9a\u4f4d\uff08\u81ea\u52a8\u3001\u6307\u5b9a\u663e\u793a\u5668\u3001\u8ddf\u968f\u9f20\u6807\u3001\u56fa\u5b9a\u4f4d\u7f6e\uff09\u4ee5\u53ca\u81ea\u52a8\u6a21\u5f0f\u4e0b\u7684\u5bbd\u5ea6\u767e\u5206\u6bd4\u3002</p> <p>\u603b\u5728\u6700\u524d<code>always_on_top</code>: \u4e3b\u7a97\u53e3\u662f\u5426\u59cb\u7ec8\u4fdd\u6301\u5728\u5176\u4ed6\u7a97\u53e3\u4e4b\u4e0a\u3002</p> <p>\u5931\u7126\u9690\u85cf<code>hide_on_focus_lost</code>: \u5f53\u7a97\u53e3\u5931\u53bb\u7126\u70b9\u65f6\u5982\u4f55\u9690\u85cf\uff08\u7acb\u5373\u3001\u5ef6\u8fdf\u3001\u4e0d\u9690\u85cf\uff09\u3002</p> <p>\u4fdd\u7559\u4e0a\u6b21\u641c\u7d22<code>retain_last_search</code>: \u91cd\u65b0\u6253\u5f00\u7a97\u53e3\u65f6\u662f\u5426\u4fdd\u7559\u4e0a\u4e00\u6b21\u7684\u641c\u7d22\u8bcd\uff08\u5e76\u53ef\u9009\u662f\u5426\u9884\u5148\u9009\u4e2d\uff09\u3002</p> <p>Esc \u952e\u884c\u4e3a<code>escape_always_closes</code>: `Esc \u952e\u662f\u4ec5\u6e05\u9664\u641c\u7d22\u6846\u5185\u5bb9\u8fd8\u662f\u76f4\u63a5\u5173\u95ed\u7a97\u53e3\u3002</p> <p>\u7a7a\u683c\u952e\u4f5c\u4e3aTab<code>space_as_tab</code>: \u5728\u641c\u7d22\u7684\u7b2c\u4e00\u6b65\uff0c\u662f\u5426\u5141\u8bb8\u4f7f\u7528\u7a7a\u683c\u952e\u4ee3\u66ff<code>Tab</code> \u952e\u6765\u8fdb\u5165\u4e0b\u4e00\u6b65\uff08\u4f8b\u5982\u9009\u62e9\u52a8\u4f5c\uff09\u3002</p> <p>\u5217\u8868\u5faa\u73af\u6eda\u52a8<code>loop_list</code>: \u7ed3\u679c\u5217\u8868\u6eda\u52a8\u5230\u672b\u5c3e/\u5f00\u5934\u65f6\u662f\u5426\u5faa\u73af\u3002</p> <p>\u5355\u51fb\u6a21\u5f0f<code>single_click</code>: \u662f\u5426\u542f\u7528\u5355\u51fb\u76f4\u63a5\u6267\u884c\u9879\u76ee\uff08\u7c7b\u4f3c\u7f51\u9875\u94fe\u63a5\uff09\u3002</p> <p>\u6700\u5927\u7a97\u53e3\u9ad8\u5ea6<code>max_height</code>: \u9650\u5236\u7ed3\u679c\u5217\u8868\u533a\u57df\u6700\u591a\u663e\u793a\u591a\u5c11\u4e2a\u9879\u76ee\uff08\u8d85\u51fa\u5219\u9700\u8981\u6eda\u52a8\uff09\u3002</p> <p>\u4efb\u52a1\u680f\u663e\u793a<code>show_on_taskbar</code>: \u6fc0\u6d3b\u65f6\u662f\u5426\u5728\u4efb\u52a1\u680f\u663e\u793a\u56fe\u6807\u3002</p> <p>\u6700\u5927\u7ed3\u679c\u6570<code>max_results</code>: \u9650\u5236\u4e00\u6b21\u641c\u7d22\u6700\u591a\u8fd4\u56de\u591a\u5c11\u6761\u7ed3\u679c\u3002</p> <p>\u5355\u8bcd\u5206\u9694\u7b26<code>word_separators</code>: \u5b9a\u4e49\u5728\u7f16\u8f91\u6846\u5185\u4f7f\u7528<code>Ctrl+\u5de6\u53f3\u7bad\u5934</code> \u6216<code>Ctrl+Backspace</code>\u65f6\u7684\u5355\u8bcd\u8fb9\u754c\u5b57\u7b26\u3002</p> <p>\u754c\u9762\u4e3b\u9898<code>theme</code>: \u9009\u62e9\u5e94\u7528\u7684\u89c6\u89c9\u4e3b\u9898\uff08\u989c\u8272\u3001\u5b57\u4f53\u3001\u5e03\u5c40\uff09\uff0c\u53ef\u4ee5\u5c42\u53e0\u591a\u4e2a\u4e3b\u9898\u3002</p>"},{"location":"RESEARCH/Apps/Keypirinha/#3-external","title":"3. \u5916\u90e8\u7a0b\u5e8f ([external])","text":"<p>\u6587\u672c\u7f16\u8f91\u5668<code>editor, config_editor</code>: \u6307\u5b9a\u7528\u4e8e\u7f16\u8f91\u6587\u4ef6\u548c\u7f16\u8f91 Keypirinha \u914d\u7f6e\u6587\u4ef6\u7684\u5916\u90e8\u6587\u672c\u7f16\u8f91\u5668\u3002</p> <p>\u7ec8\u7aef\u6a21\u62df\u5668<code>terminal</code>: \u6307\u5b9a\u7528\u4e8e\u8fd0\u884c\u547d\u4ee4\u884c\u7a0b\u5e8f\u6216\u811a\u672c\u7684\u7ec8\u7aef\uff08\u5982 ConEmu, Windows Terminal \u7b49\uff09\u3002</p> <p>\u6587\u4ef6\u6d4f\u89c8\u5668<code>file_explorer</code>: \u6307\u5b9a\u66ff\u4ee3 Windows \u8d44\u6e90\u7ba1\u7406\u5668\u7684\u6587\u4ef6\u6d4f\u89c8\u5668\u3002</p> <p>\u7f51\u9875\u6d4f\u89c8\u5668<code>web_browser, web_browser_new_window, web_browser_private_mode</code>: \u6307\u5b9a\u66ff\u4ee3\u7cfb\u7edf\u9ed8\u8ba4\u7684\u7f51\u9875\u6d4f\u89c8\u5668\uff0c\u5e76\u8bbe\u7f6e\u9ed8\u8ba4\u662f\u5426\u5728\u65b0\u7a97\u53e3\u6216\u9690\u79c1\u6a21\u5f0f\u4e0b\u6253\u5f00\u94fe\u63a5\u3002</p>"},{"location":"RESEARCH/Apps/Keypirinha/#4-console","title":"4. \u63a7\u5236\u53f0 ([console])","text":"<p>\u63a7\u5236\u53f0\u7a97\u53e3\u4f4d\u7f6e<code>geometry</code>: \u8bbe\u7f6e\u5f00\u53d1\u8005\u63a7\u5236\u53f0\u7a97\u53e3\u7684\u4f4d\u7f6e\uff08\u7c7b\u4f3c\u4e3b\u7a97\u53e3\uff09\u3002</p> <p>\u663e\u793a\u65f6\u95f4\u6233<code>show_time_prefix</code>: \u63a7\u5236\u53f0\u65e5\u5fd7\u662f\u5426\u663e\u793a\u65f6\u95f4\u524d\u7f00\u3002</p> <p>\u6d88\u606f\u95ea\u70c1\u63d0\u793a<code>flash_on</code>: \u5f53\u63a7\u5236\u53f0\u7a97\u53e3\u5728\u540e\u53f0\u65f6\uff0c\u6536\u5230\u7279\u5b9a\u7ea7\u522b\uff08\u5982\u8b66\u544a\u3001\u9519\u8bef\uff09\u7684\u6d88\u606f\u65f6\u662f\u5426\u95ea\u70c1\u4efb\u52a1\u680f\u56fe\u6807\u63d0\u793a\u3002</p> <p>\u63a7\u5236\u53f0\u522b\u540d<code>alias_*</code>: \u53ef\u4ee5\u5b9a\u4e49\u5728\u63a7\u5236\u53f0\u4e2d\u4f7f\u7528\u7684\u547d\u4ee4\u522b\u540d\uff0c\u7b80\u5316\u5e38\u7528\u64cd\u4f5c\u3002</p>"},{"location":"RESEARCH/Apps/Keypirinha/#5-network","title":"5. \u7f51\u7edc ([network])","text":"<p>\u4ee3\u7406\u8bbe\u7f6e<code>proxy</code>: \u914d\u7f6e Keypirinha \u53ca\u5176\u63d2\u4ef6\u8fdb\u884c\u7f51\u7edc\u8fde\u63a5\u65f6\u4f7f\u7528\u7684\u4ee3\u7406\u670d\u52a1\u5668\uff08\u7cfb\u7edf\u8bbe\u7f6e\u3001\u65e0\u4ee3\u7406\u3001\u6307\u5b9a\u4ee3\u7406\u5730\u5740\uff09\u3002</p>"},{"location":"RESEARCH/Apps/Keypirinha/#6-var-env","title":"6. \u53d8\u91cf\u4e0e\u73af\u5883 ([var], [env])","text":"<p>\u53d8\u91cf<code>[var]</code>: \u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e9b\u53d8\u91cf\uff0c\u5728\u914d\u7f6e\u6587\u4ef6\u7684\u5176\u4ed6\u5730\u65b9\u5f15\u7528\u3002Keypirinha \u4e5f\u9884\u5b9a\u4e49\u4e86\u4e00\u4e9b\u53d8\u91cf\uff08\u5982\u7a0b\u5e8f\u8def\u5f84\u3001\u914d\u7f6e\u8def\u5f84\u7b49\uff09\u3002 \u73af\u5883\u53d8\u91cf<code>[env]</code>: \u53ef\u4ee5\u901a\u8fc7 ${env:\u53d8\u91cf\u540d} \u7684\u65b9\u5f0f\u76f4\u63a5\u8bbf\u95ee\u7cfb\u7edf\u7684\u73af\u5883\u53d8\u91cf\u3002</p>"},{"location":"RESEARCH/Apps/Keypirinha/#7-theme","title":"7. \u4e3b\u9898\u5b9a\u4e49 ([theme/...])","text":"<p>\u6587\u4ef6\u672b\u5c3e\u5305\u542b\u4e86\u591a\u4e2a\u9884\u5b9a\u4e49\u7684\u4e3b\u9898\u793a\u4f8b\uff08\u5982 ElectricStateColors, SolarizedLightColors, MonokaiColors, AnthraciteFull, TinyLayout \u7b49\uff09\u3002</p> <p>[theme/Default] \u90e8\u5206\u8be6\u7ec6\u5217\u51fa\u4e86\u6240\u6709\u53ef\u7528\u7684\u4e3b\u9898\u914d\u7f6e\u9879\uff0c\u5305\u62ec\uff1a</p> <p>\u5b57\u4f53 <code>font_face, font_*_size, font_*_style, mono_font_*</code></p> <p>\u989c\u8272 <code>color_*</code></p> <p>\u900f\u660e\u5ea6<code>opacity_back</code></p> <p>\u754c\u9762\u5143\u7d20\u5e03\u5c40<code>layout, compact_results, satellite_*</code></p> <p>\u8fb9\u8ddd\u4e0e\u586b\u5145<code>control_margin, textbox_padding, listitem_padding</code></p>"},{"location":"RESEARCH/Apps/Keypirinha/#_4","title":"\u63d2\u4ef6","text":"<p>Keypirinha \u7684\u63d2\u4ef6\u7cfb\u7edf\u5141\u8bb8\u7528\u6237\u5b89\u88c5\u548c\u4f7f\u7528\u5404\u79cd\u63d2\u4ef6\u6765\u6269\u5c55\u5176\u529f\u80fd\u3002</p>"},{"location":"RESEARCH/Apps/Keypirinha/#keypirinha-package-control","title":"Keypirinha Package Control","text":"<p>Keypirinha Package Control \u662f Keypirinha \u7684\u5b98\u65b9\u63d2\u4ef6\u7ba1\u7406\u5668\uff0c\u5141\u8bb8\u7528\u6237\u8f7b\u677e\u5b89\u88c5\u3001\u66f4\u65b0\u548c\u5220\u9664\u63d2\u4ef6\u3002</p>"},{"location":"RESEARCH/Apps/Keypirinha/#_5","title":"\u5b89\u88c5","text":"<p>\u6253\u5f00\u53f3\u952eKeypirinha\u9009\u62e9<code>Open Console</code></p> <p>\u5728\u63a7\u5236\u53f0\u4e2d\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff1a <pre><code>import keypirinha as kp,keypirinha_net as kpn,os;p=\"PackageControl.keypirinha-package\";d=kpn.build_urllib_opener().open(\"https://github.com/ueffel/Keypirinha-PackageControl/releases/download/1.0.5/\"+p);pb=d.read();d.close();f=open(os.path.join(kp.installed_package_dir(),p),\"wb\");f.write(pb);f.close()\n</code></pre> \u67e5\u770b\u66f4\u591a\u548c\u53c2\u8003</p>"},{"location":"RESEARCH/Apps/Keypirinha/#kill","title":"Kill","text":"<p>Kill \u662f\u4e00\u4e2a Keypirinha \u63d2\u4ef6\uff0c\u7528\u4e8e\u5feb\u901f\u5173\u95ed\u5e94\u7528\u7a0b\u5e8f\u3002</p> <p>\u7c7b\u4f3c\u4e8e Mac \u4e0a\u7684<code>Cmd + Q</code>\uff0c\u53ef\u4ee5\u5feb\u901f\u5173\u95ed\u5f53\u524d\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd8\u6709Alfred\u7684<code>Quit</code>\u529f\u80fd\u3002</p>"},{"location":"RESEARCH/Apps/Keypirinha/#_6","title":"\u5b89\u88c5","text":"<p>\u5728 \u6309\u5feb\u6377\u952e\u542f\u52a8Keyprinha\u4e2d\u641c\u7d22<code>Install Package \"Keypirinha-Plugin-Kill\"</code>\uff0c\u5b89\u88c5\u5373\u53ef\u3002</p> <ul> <li>\u9700\u8981\u5148\u5b89\u88c5<code>Keypirinha Package Control</code>\u63d2\u4ef6\u3002</li> </ul> <p>\u67e5\u770b\u66f4\u591a\u548c\u53c2\u8003</p>"},{"location":"WEBSITE/","title":"\u4f60\u597d","text":"<p>\u8fd9\u91cc\u662f\u9648\u5cf0\u4e2a\u4eba\u7f51\u7ad9 https://lambshaun.github.io/</p> <ul> <li>\u901a\u8fc7\u4e3b\u9898\u548c\u76ee\u5f55\u6d4f\u89c8\u6587\u7ae0\u3002<ul> <li>\u7535\u8111\u7aef\uff1a\u5728\u4e0a\u65b9\u6807\u7b7e\u680f\u9009\u62e9\u4e3b\u9898\uff0c\u5728\u5de6\u4fa7\u76ee\u5f55\u9009\u62e9\u6587\u7ae0\u3002</li> <li>\u79fb\u52a8\u7aef\uff1a\u70b9\u51fb\u5de6\u4e0a\u89d2\u56fe\u6807\u9009\u62e9\u4e3b\u9898\u548c\u6587\u7ae0\u3002</li> </ul> </li> <li>\u641c\u7d22\u5173\u952e\u8bcd\u67e5\u627e\u6587\u7ae0</li> </ul>"}]}