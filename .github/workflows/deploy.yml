# .github/workflows/deploy.yml
name: Deploy MkDocs site to GitHub Pages

on:
  # 在推送到 main 分支时触发工作流
  push:
    branches:
      - main # 或者你的主分支名，比如 master
  # 允许你手动从 Actions 选项卡运行此工作流
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署，跳过正在运行和等待中的构建队列。
# 但是，不要取消进行中的运行，因为我们希望允许这些运行完成。
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # 工作流运行后输出部署的 URL
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行器
    steps:
      - name: Checkout repository # 步骤1：检出你的代码
        uses: actions/checkout@v4 # 使用官方的 checkout action

      - name: Set up Python # 步骤2：设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: 3.x # 使用 Python 3.x

      - name: Install dependencies # 步骤3：安装 MkDocs 和其他依赖 (比如主题)
        run: |
          pip install mkdocs mkdocs-material # 如果用了其他插件或主题，也在这里添加

      - name: Build MkDocs site # 步骤4：构建 MkDocs 网站
        run: mkdocs build # 这会将静态文件生成到 site/ 目录

      - name: Setup Pages # 步骤5：配置 GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact # 步骤6：上传构建好的网站文件 (site/ 目录的内容)
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: './site' # 指定包含静态网站文件的目录

      - name: Deploy to GitHub Pages # 步骤7：部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4